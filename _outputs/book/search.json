[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Automating the Modelling of Transformative Artificial Intelligence Risks",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n\nAbstract\n\n\nOutline(s): Table of Contents",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html",
    "href": "chapters/Outlines/Outline_12.html",
    "title": "Preface",
    "section": "",
    "text": "Acknowledgments\ntitle: “Automating the Modelling of Transformative Artificial Intelligence Risks” subtitle: “An Epistemic Framework for Leveraging Frontier AI Systems to Upscale Conditional Policy Assessments in Bayesian Networks on a Narrow Path towards Existential Safety” author:\nApplied to canonical examples and real AI safety arguments, the system demonstrates extraction accuracy exceeding 85% for structural relationships and 73% for probability capture. By making implicit models explicit, enabling cross-worldview comparison, and supporting rigorous policy evaluation, AMTAIR bridges communication gaps between technical researchers, policy specialists, and other stakeholders working to address existential risks from advanced AI.\nThe thesis contributes both theoretical foundations and practical implementation, validated through expert comparison and real-world case studies including Carlsmith’s power-seeking AI model. While current limitations include correlation handling and extraction ambiguities, the approach provides essential epistemic infrastructure for coordinated AI governance. plain-language-summary: | This thesis develops software tools that automatically extract and visualize the hidden assumptions and probability estimates in AI safety arguments. By transforming complex written arguments into interactive diagrams showing relationships and probabilities, AMTAIR helps different groups working on AI safety—researchers, policymakers, and others—understand each other better and coordinate their efforts to address risks from advanced AI systems. key-points:\nThis Quarto book represents the culmination of interdisciplinary research at the intersection of AI safety, formal epistemology, and computational social science. The work emerged from recognizing a fundamental challenge in AI governance: while investment in AI safety research has grown exponentially, coordination between different stakeholder communities remains fragmented, potentially increasing existential risk through misaligned efforts.\nThe journey from initial concept to working implementation involved iterative refinement based on feedback from advisors, domain experts, and potential users. What began as a technical exercise in automated extraction evolved into a broader framework for enhancing epistemic security in one of humanity’s most critical coordination challenges.\nI thank my supervisor Dr. Timo Speith for guidance throughout this project, the MTAIR team for pioneering the manual approach that inspired automation, and the AI safety community for creating the rich literature that made this work possible. Special recognition goes to technical advisors who provided implementation feedback and domain experts who validated extraction results.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-opening-scenario",
    "href": "chapters/Outlines/Outline_12.html#sec-opening-scenario",
    "title": "Preface",
    "section": "Opening Scenario: The Policymaker’s Dilemma",
    "text": "Opening Scenario: The Policymaker’s Dilemma\nImagine a senior policy advisor preparing recommendations for AI governance legislation. On her desk lie a dozen reports from leading AI safety researchers, each painting a different picture of the risks ahead. One argues that misaligned AI could pose existential risks within the decade, citing complex technical arguments about instrumental convergence and orthogonality. Another suggests these concerns are overblown, emphasizing uncertainty and the strength of existing institutions. A third proposes specific technical standards but acknowledges deep uncertainty about their effectiveness.\nEach report seems compelling in isolation, written by credentialed experts with sophisticated arguments. Yet they reach dramatically different conclusions about both the magnitude of risk and appropriate interventions. The technical arguments involve unfamiliar concepts—mesa-optimization, corrigibility, capability amplification—expressed through different frameworks and implicit assumptions. Time is limited, stakes are high, and the legislation could shape humanity’s trajectory for decades.\nThis scenario plays out daily across government offices, corporate boardrooms, and research institutions worldwide. It exemplifies what I term the “coordination crisis” in AI governance: despite unprecedented attention and resources directed toward AI safety, we lack the epistemic infrastructure to synthesize diverse expert knowledge into actionable governance strategies.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-coordination-crisis",
    "href": "chapters/Outlines/Outline_12.html#sec-coordination-crisis",
    "title": "Preface",
    "section": "The Coordination Crisis in AI Governance",
    "text": "The Coordination Crisis in AI Governance\nAs AI capabilities advance at an accelerating pace—demonstrated by the rapid progression from GPT-3 to GPT-4, Claude, and emerging multimodal systems—humanity faces a governance challenge unlike any in history. The task of ensuring increasingly powerful AI systems remain aligned with human values and beneficial to our long-term flourishing grows more urgent with each capability breakthrough. This challenge becomes particularly acute when considering transformative AI systems that could drastically alter civilization’s trajectory, potentially including existential risks from misaligned systems pursuing objectives counter to human welfare.\nThe current state of AI governance presents a striking paradox. On one hand, we witness extraordinary mobilization: billions in research funding, proliferating safety initiatives, major tech companies establishing alignment teams, and governments worldwide developing AI strategies. The Asilomar AI Principles garnered thousands of signatures, the EU advances comprehensive AI regulation, and technical researchers produce increasingly sophisticated work on alignment, interpretability, and robustness.\nYet alongside this activity, we observe systematic coordination failures that may prove catastrophic. Technical safety researchers develop sophisticated alignment techniques without clear implementation pathways. Policy specialists craft regulatory frameworks lacking technical grounding to ensure practical efficacy. Ethicists articulate normative principles that lack operational specificity. Strategy researchers identify critical uncertainties but struggle to translate these into actionable guidance. International bodies convene without shared frameworks for assessing interventions.\nThis fragmentation is not merely inefficient—it systematically amplifies existential risk through several mechanisms:\n\nSafety Gaps from Misaligned Efforts\nWhen different communities operate with incompatible frameworks, critical risks fall through the cracks. Technical researchers may solve alignment problems under assumptions that policymakers’ decisions invalidate. Regulations optimized for current systems may inadvertently incentivize dangerous development patterns. Without shared models of the risk landscape, our collective efforts resemble the parable of blind men describing an elephant—each accurate within their domain but missing the complete picture.\n\n\nResource Misallocation\nThe AI safety community duplicates efforts while leaving critical areas underexplored. Multiple teams independently develop similar frameworks without building on each other’s work. Funders struggle to identify high-impact opportunities across technical and governance domains. Talent flows toward well-publicized approaches while neglected strategies remain understaffed. This misallocation becomes more costly as the window for establishing effective governance narrows.\n\n\nNegative-Sum Dynamics\nPerhaps most concerning, uncoordinated interventions can actively increase risk. Safety standards that advantage established players may accelerate risky development elsewhere. Partial transparency requirements might enable capability advances without commensurate safety improvements. International agreements lacking shared technical understanding may lock in dangerous practices. Without coordination, our cure risks becoming worse than the disease.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-historical-urgency",
    "href": "chapters/Outlines/Outline_12.html#sec-historical-urgency",
    "title": "Preface",
    "section": "Historical Parallels and Temporal Urgency",
    "text": "Historical Parallels and Temporal Urgency\nHistory offers instructive parallels. The nuclear age began with scientists racing to understand and control forces that could destroy civilization. Early coordination failures—competing national programs, scientist-military tensions, public-expert divides—nearly led to catastrophe multiple times. Only through developing shared frameworks (deterrence theory), institutions (IAEA), and communication channels (hotlines, treaties) did humanity navigate the nuclear precipice.\nYet AI presents unique coordination challenges that compress our response timeline:\nAccelerating Development: Unlike nuclear weapons requiring massive infrastructure, AI development proceeds in corporate labs and academic departments worldwide. Capability improvements come through algorithmic insights and computational scale, both advancing exponentially.\nDual-Use Ubiquity: Every AI advance potentially contributes to both beneficial applications and catastrophic risks. The same language model architectures enabling scientific breakthroughs could facilitate dangerous manipulation or deception at scale.\nComprehension Barriers: Nuclear risks were viscerally understandable—cities vaporized, radiation sickness, nuclear winter. AI risks involve abstract concepts like optimization processes, goal misspecification, and emergent capabilities that resist intuitive understanding.\nGovernance Lag: Traditional governance mechanisms—legislation, international treaties, professional standards—operate on timescales of years to decades. AI capabilities advance on timescales of months to years, creating an ever-widening capability-governance gap.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-research-question",
    "href": "chapters/Outlines/Outline_12.html#sec-research-question",
    "title": "Preface",
    "section": "Research Question and Scope",
    "text": "Research Question and Scope\nThis thesis addresses a specific dimension of the coordination challenge by investigating:\nHow can computational approaches formalize the worldviews and arguments underlying AI safety discourse, transforming qualitative disagreements into quantitative models suitable for rigorous policy evaluation?\nMore specifically, I explore whether frontier AI technologies can be utilized to automate the modeling of transformative AI risks, enabling robust prediction of policy impacts across diverse worldviews.\nTo break this down:\n\nComputational Formalization: Using automated extraction and formal representation to make implicit models explicit\nWorldview Representation: Capturing different perspectives on AI risk in comparable frameworks\nArgument Transformation: Converting natural language arguments into structured Bayesian networks\nPolicy Evaluation: Assessing intervention impacts through formal counterfactual analysis\n\nThe scope encompasses both theoretical development and practical implementation. Theoretically, I develop a framework for representing diverse perspectives on AI risk in a common formal language. Practically, I implement this framework in a computational system—the AI Risk Pathway Analyzer (ARPA)—that enables interactive exploration of how policy interventions might alter existential risk across different worldviews.\nThis investigation focuses specifically on existential risks from misaligned AI systems rather than broader AI ethics concerns. This narrowed scope enables deep technical development while addressing the highest-stakes coordination challenges where current fragmentation poses the greatest danger.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-multiplicative-benefits",
    "href": "chapters/Outlines/Outline_12.html#sec-multiplicative-benefits",
    "title": "Preface",
    "section": "The Multiplicative Benefits Framework",
    "text": "The Multiplicative Benefits Framework\nThe central thesis of this work is that combining three elements—automated worldview extraction, prediction market integration, and formal policy evaluation—creates multiplicative rather than merely additive benefits for AI governance. Each component enhances the others, creating a system more valuable than the sum of its parts.\n\nAutomated Worldview Extraction\nCurrent approaches to AI risk modeling, exemplified by the Modeling Transformative AI Risks (MTAIR) project, demonstrate the value of formal representation but require extensive manual effort. Creating a single model demands hundreds of expert-hours to translate qualitative arguments into quantitative frameworks. This bottleneck severely limits the number of perspectives that can be formalized and the speed of model updates as new arguments emerge.\nAutomation using frontier language models addresses this scaling challenge. By developing systematic methods to extract causal structures and probability judgments from natural language, we can process orders of magnitude more content, incorporate diverse perspectives rapidly, and maintain models that evolve with the discourse.\n\n\nLive Data Integration\nStatic models, however well-constructed, quickly become outdated in fast-moving domains. Prediction markets and forecasting platforms aggregate distributed knowledge about uncertain futures, providing continuously updated probability estimates. By connecting formal models to these live data sources, we create dynamic assessments that incorporate the latest collective intelligence.\nThis integration serves multiple purposes: grounding abstract models in empirical forecasts, identifying which uncertainties most affect outcomes, revealing when model assumptions diverge from collective expectations, and generating new questions for forecasting communities.\n\n\nFormal Policy Evaluation\nThe ultimate purpose of risk modeling is informing action. Formal policy evaluation transforms static risk assessments into actionable guidance by modeling how specific interventions alter critical parameters. Using causal inference techniques, we can assess not just the probability of adverse outcomes but how those probabilities change under different policy regimes.\nThis enables genuinely evidence-based policy development: comparing interventions across multiple worldviews, identifying robust strategies that work across scenarios, understanding which uncertainties most affect policy effectiveness, and prioritizing research to reduce decision-relevant uncertainty.\n\n\nThe Synergy\nThe multiplicative benefits emerge from the interactions between components:\n\nAutomation enables comprehensive coverage, making prediction market integration more valuable by connecting to more perspectives\nMarket data validates and calibrates automated extractions, improving quality\nPolicy evaluation gains precision from both comprehensive models and live probability updates\nThe complete system creates feedback loops where policy analysis identifies critical uncertainties for market attention\n\nThis synergistic combination addresses the coordination crisis by providing common ground for disparate communities, translating between technical and policy languages, quantifying previously implicit disagreements, and enabling evidence-based compromise.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-roadmap",
    "href": "chapters/Outlines/Outline_12.html#sec-roadmap",
    "title": "Preface",
    "section": "Thesis Structure and Roadmap",
    "text": "Thesis Structure and Roadmap\nThe remainder of this thesis develops the multiplicative benefits framework from theoretical foundations to practical implementation:\nChapter 2: Context and Theoretical Foundations establishes the intellectual groundwork, examining:\n\nThe epistemic challenges unique to AI governance\nBayesian networks as formal tools for uncertainty representation\nArgument mapping as a bridge from natural language to formal models\nThe MTAIR project’s achievements and limitations\nRequirements for effective coordination infrastructure\n\nChapter 3: AMTAIR Design and Implementation presents the technical system:\n\nOverall architecture and design principles\nThe two-stage extraction pipeline (ArgDown → BayesDown)\nValidation methodology and results\nCase studies from simple examples to complex AI risk models\nIntegration with prediction markets and policy evaluation\n\nChapter 4: Discussion - Implications and Limitations critically examines:\n\nTechnical limitations and failure modes\nConceptual concerns about formalization\nIntegration with existing governance frameworks\nScaling challenges and opportunities\nBroader implications for epistemic security\n\nChapter 5: Conclusion synthesizes key contributions and charts paths forward:\n\nSummary of theoretical and practical achievements\nConcrete recommendations for stakeholders\nResearch agenda for community development\nVision for AI governance with proper coordination infrastructure\n\nThroughout, I maintain dual focus on theoretical sophistication and practical utility. The framework aims not merely to advance academic understanding but to provide actionable tools for improving coordination in AI governance during this critical period.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-carlsmith-model",
    "href": "chapters/Outlines/Outline_12.html#sec-carlsmith-model",
    "title": "Preface",
    "section": "AI Existential Risk: The Carlsmith Model",
    "text": "AI Existential Risk: The Carlsmith Model\nTo ground our discussion in concrete terms, I examine Joseph Carlsmith’s “Is Power-Seeking AI an Existential Risk?” as an exemplar of structured reasoning about AI catastrophic risk. Carlsmith’s analysis stands out for its explicit probabilistic decomposition of the path from current AI development to potential existential catastrophe.\n\nSix-Premise Decomposition\nCarlsmith structures his argument through six conditional premises, each assigned explicit probability estimates:\nPremise 1: APS Systems by 2070 (P ≈ 0.65)\n“By 2070, there will be AI systems with Advanced capability, Agentic planning, and Strategic awareness” - the conjunction of capabilities that could enable systematic pursuit of objectives in the world.\nPremise 2: Alignment Difficulty (P ≈ 0.40)\n“It will be harder to build aligned APS systems than misaligned systems that are still attractive to deploy” - capturing the challenge that safety may conflict with capability or efficiency.\nPremise 3: Deployment Despite Misalignment (P ≈ 0.70)\n“Conditional on 1 and 2, we will deploy misaligned APS systems” - reflecting competitive pressures and limited coordination.\nPremise 4: Power-Seeking Behavior (P ≈ 0.65)\n“Conditional on 1-3, misaligned APS systems will seek power in high-impact ways” - based on instrumental convergence arguments.\nPremise 5: Disempowerment Success (P ≈ 0.40)\n“Conditional on 1-4, power-seeking will scale to permanent human disempowerment” - despite potential resistance and safeguards.\nPremise 6: Existential Catastrophe (P ≈ 0.95)\n“Conditional on 1-5, this disempowerment constitutes existential catastrophe” - connecting power loss to permanent curtailment of human potential.\nOverall Risk: Multiplying through the conditional chain yields P(doom) ≈ 0.05 or 5% by 2070.\n\n\nWhy Carlsmith Exemplifies Formalizable Arguments\nCarlsmith’s model demonstrates several features that make it ideal for formal representation:\nExplicit Probabilistic Structure: Each premise receives numerical probability estimates with documented reasoning, enabling direct translation to Bayesian network parameters.\nClear Conditional Dependencies: The logical flow from capabilities through deployment decisions to catastrophic outcomes maps naturally onto directed acyclic graphs.\nTransparent Decomposition: Breaking the argument into modular premises allows independent evaluation and sensitivity analysis of each component.\nDocumented Reasoning: Extensive justification for each probability enables extraction of both structure and parameters from the source text.\nThis structured approach exemplifies the type of reasoning AMTAIR aims to formalize and automate. While Carlsmith spent months developing this model manually, similar rigor exists implicitly in many AI safety arguments awaiting extraction.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-epistemic-challenge",
    "href": "chapters/Outlines/Outline_12.html#sec-epistemic-challenge",
    "title": "Preface",
    "section": "The Epistemic Challenge of Policy Evaluation",
    "text": "The Epistemic Challenge of Policy Evaluation\nEvaluating AI governance policies presents unique epistemic challenges that traditional policy analysis methods cannot adequately address. Understanding these challenges motivates the need for new computational approaches.\n\nUnique Characteristics of AI Governance\nDeep Uncertainty Rather Than Risk: Traditional policy analysis distinguishes between risk (known probability distributions) and uncertainty (known possibilities, unknown probabilities). AI governance faces deep uncertainty—we cannot confidently enumerate possible futures, much less assign probabilities. Will recursive self-improvement enable rapid capability gains? Can value alignment be solved technically? These foundational questions resist empirical resolution before their answers become catastrophically relevant.\nComplex Multi-Level Causation: Policy effects propagate through technical, institutional, and social levels with intricate feedback loops. A technical standard might alter research incentives, shifting capability development trajectories, changing competitive dynamics, and ultimately affecting existential risk through pathways invisible at the policy’s inception. Traditional linear causal models cannot capture these dynamics.\nIrreversibility and Lock-In: Many AI governance decisions create path dependencies that prove difficult or impossible to reverse. Early technical standards shape development trajectories. Institutional structures ossify. International agreements create sticky equilibria. Unlike many policy domains where course correction remains possible, AI governance mistakes may prove permanent.\nValue-Laden Technical Choices: The entanglement of technical and normative questions confounds traditional separation of facts and values. What constitutes “alignment”? How much capability development should we risk for economic benefits? Technical specifications embed ethical judgments that resist neutral expertise.\n\n\nLimitations of Traditional Approaches\nStandard policy evaluation tools prove inadequate for these challenges:\nCost-Benefit Analysis assumes commensurable outcomes and stable probability distributions. When potential outcomes include existential catastrophe with deeply uncertain probabilities, the mathematical machinery breaks down. Infinite negative utility resists standard decision frameworks.\nScenario Planning helps explore possible futures but typically lacks the probabilistic reasoning needed for decision-making under uncertainty. Without quantification, scenarios provide narrative richness but limited action guidance.\nExpert Elicitation aggregates specialist judgment but struggles with interdisciplinary questions where no single expert grasps all relevant factors. Moreover, experts often operate with different implicit models, making aggregation problematic.\nRed Team Exercises test specific plans but miss systemic risks emerging from component interactions. Gaming individual failures cannot reveal emergent catastrophic possibilities.\nThese limitations create a methodological gap: we need approaches that handle deep uncertainty, represent complex causation, quantify expert disagreement, and enable systematic exploration of intervention effects.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-bayesian-networks",
    "href": "chapters/Outlines/Outline_12.html#sec-bayesian-networks",
    "title": "Preface",
    "section": "Bayesian Networks as Knowledge Representation",
    "text": "Bayesian Networks as Knowledge Representation\nBayesian networks offer a mathematical framework uniquely suited to addressing these epistemic challenges. By combining graphical structure with probability theory, they provide tools for reasoning about complex uncertain domains.\n\nMathematical Foundations\nA Bayesian network consists of:\n\nDirected Acyclic Graph (DAG): Nodes represent variables, edges represent direct dependencies\nConditional Probability Tables (CPTs): For each node, P(node|parents) quantifies relationships\n\nThe joint probability distribution factors according to the graph structure:\n\\[P(X_1, X_2, ..., X_n) = \\prod_{i=1}^{n} P(X_i | Parents(X_i))\\]\nThis factorization enables efficient inference and embodies causal assumptions explicitly.\n\n\nThe Rain-Sprinkler-Grass Example\nThe canonical example illustrates key concepts:\n[Grass_Wet]: Concentrated moisture on grass. \n + [Rain]: Water falling from sky.\n + [Sprinkler]: Artificial watering system.\n   + [Rain]\nNetwork Structure:\n\nRain (root cause): P(rain) = 0.2\nSprinkler (intermediate): P(sprinkler|rain) varies by rain state\nGrass_Wet (effect): P(wet|rain, sprinkler) depends on both causes\n\nThis simple network demonstrates:\n\nMarginal Inference: P(grass_wet) computed from joint distribution\nDiagnostic Reasoning: P(rain|grass_wet) reasoning from effects to causes\nIntervention Modeling: P(grass_wet|do(sprinkler=on)) for policy analysis\n\n\n\nAdvantages for AI Risk Modeling\nBayesian networks provide several crucial capabilities:\nExplicit Uncertainty Representation: Every belief is a probability distribution, avoiding false certainty while enabling quantitative reasoning.\nCausal Modeling: Directed edges represent causal relationships, enabling counterfactual reasoning through Pearl’s do-calculus for policy evaluation.\nModular Structure: Complex arguments decompose into manageable components that can be independently evaluated and refined.\nEvidence Integration: Bayesian updating provides principled methods for incorporating new information as it emerges.\nVisual Communication: Graphical structure makes complex relationships comprehensible across expertise levels.\nThese features address key requirements for AI governance: handling uncertainty, representing causation, enabling systematic analysis, and facilitating communication across communities.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-argument-mapping",
    "href": "chapters/Outlines/Outline_12.html#sec-argument-mapping",
    "title": "Preface",
    "section": "Argument Mapping and Formal Representations",
    "text": "Argument Mapping and Formal Representations\nThe gap between natural language arguments and formal models requires systematic bridging. Argument mapping provides methods for making implicit reasoning structures explicit and analyzable.\n\nFrom Natural Language to Structure\nNatural language arguments contain rich information expressed through:\n\nCausal claims (“X leads to Y”)\nConditional relationships (“If A then likely B”)\nUncertainty expressions (“probably,” “might,” “certainly”)\nSupport/attack patterns between claims\n\nArgument mapping extracts this structure, identifying:\n\nCore claims and propositions\nInferential relationships\nImplicit assumptions\nUncertainty qualifications\n\n\n\nArgDown: Structured Argument Notation\nArgDown provides a markdown-like syntax for hierarchical argument representation:\n[MainClaim]: Description of primary conclusion.\n + [SupportingEvidence]: Evidence supporting the claim.\n   + [SubEvidence]: More specific support.\n - [CounterArgument]: Evidence against the claim.\nThis notation captures argument structure while remaining human-readable and writable. Crucially, it serves as an intermediate representation between natural language and formal models.\n\n\nBayesDown: The Bridge to Bayesian Networks\nBayesDown extends ArgDown with probabilistic metadata:\n[Node]: Description. {\n  \"instantiations\": [\"node_TRUE\", \"node_FALSE\"],\n  \"priors\": {\"p(node_TRUE)\": \"0.7\", \"p(node_FALSE)\": \"0.3\"},\n  \"posteriors\": {\n    \"p(node_TRUE|parent_TRUE)\": \"0.9\",\n    \"p(node_TRUE|parent_FALSE)\": \"0.4\"\n  }\n}\nThis representation:\n\nPreserves narrative structure from the original argument\nAdds mathematical precision through probability specifications\nEnables transformation to standard Bayesian network formats\nSupports validation by maintaining traceability to sources\n\nThe two-stage extraction process (ArgDown → BayesDown) separates concerns: first capturing structure, then quantifying relationships. This modularity enables human oversight at critical decision points.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-mtair-framework",
    "href": "chapters/Outlines/Outline_12.html#sec-mtair-framework",
    "title": "Preface",
    "section": "The MTAIR Framework: Achievements and Limitations",
    "text": "The MTAIR Framework: Achievements and Limitations\nThe Modeling Transformative AI Risks (MTAIR) project, led by RAND researchers, pioneered formal modeling of AI existential risk arguments. Understanding its approach and limitations motivates the automation efforts of AMTAIR.\n\nMTAIR’s Approach\nMTAIR manually translated influential AI risk arguments into Bayesian networks using Analytica software:\nSystematic Decomposition: Breaking complex arguments into variables and relationships through expert analysis.\nProbability Elicitation: Gathering quantitative estimates through structured expert interviews and literature review.\nSensitivity Analysis: Identifying which parameters most influence conclusions about AI risk levels.\nVisual Communication: Creating interactive models that stakeholders could explore and modify.\n\n\nKey Achievements\nMTAIR demonstrated several important possibilities:\nFeasibility of Formalization: Complex philosophical arguments about AI risk can be represented as Bayesian networks while preserving essential insights.\nValue of Quantification: Moving from qualitative concerns to quantitative models enables systematic analysis, comparison, and prioritization.\nCross-Perspective Communication: Formal models provide common ground for technical and policy communities to engage productively.\nResearch Prioritization: Sensitivity analysis reveals which empirical questions would most reduce uncertainty about AI risks.\n\n\nFundamental Limitations\nHowever, MTAIR’s manual approach faces severe constraints:\nLabor Intensity: Each model requires hundreds of expert-hours to construct, limiting coverage to a few perspectives.\nStatic Nature: Models become outdated as arguments evolve but updating requires near-complete reconstruction.\nLimited Accessibility: Using the models requires Analytica software and significant technical sophistication.\nSingle Perspective: Each model represents one worldview, making comparison across perspectives difficult.\nThese limitations prevent MTAIR’s approach from scaling to meet AI governance needs. As the pace of AI development accelerates and arguments proliferate, manual modeling cannot keep pace.\n\n\nThe Automation Opportunity\nMTAIR’s experience reveals both the value of formal modeling and the necessity of automation. Key lessons:\n\nFormal models genuinely enhance understanding and coordination\nThe modeling process itself surfaces implicit assumptions\nQuantification enables analyses impossible with qualitative arguments alone\nBut manual approaches cannot scale to match the challenge\n\nThis motivates AMTAIR’s central innovation: using frontier language models to automate the extraction and formalization process while preserving the benefits MTAIR demonstrated.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-coordination-requirements",
    "href": "chapters/Outlines/Outline_12.html#sec-coordination-requirements",
    "title": "Preface",
    "section": "Requirements for Coordination Infrastructure",
    "text": "Requirements for Coordination Infrastructure\nBased on the challenges identified and lessons from existing approaches, we can specify requirements for computational tools that could enhance coordination in AI governance:\n\nScalability\nThe system must process large volumes of arguments across:\n\nAcademic papers and technical reports\nPolicy documents and proposals\nBlog posts and informal arguments\nForecasting questions and market data\n\nAutomation is essential—manual approaches cannot match the pace of discourse.\n\n\nAccessibility\nDiverse stakeholders must be able to engage with the system:\n\nResearchers need technical depth and modification capabilities\nPolicymakers require clear summaries and intervention analysis\nForecasters want integration with prediction platforms\nPublic stakeholders deserve transparent representation\n\nThis demands multiple interfaces and levels of abstraction.\n\n\nEpistemic Virtues\nThe system should enhance rather than replace human judgment by:\n\nMaking assumptions explicit through formal representation\nPreserving uncertainty rather than false precision\nEnabling validation through traceable extraction\nSupporting disagreement through multi-worldview representation\nEncouraging updating as new evidence emerges\n\n\n\nIntegration Capabilities\nIsolated tools have limited impact. The system needs:\n\nData source connections to prediction markets and forecasting platforms\nAPI accessibility for integration with other tools\nExport formats compatible with standard analysis software\nVersion control for tracking model evolution\nCollaborative features for community development\n\n\n\nRobustness Properties\nGiven the high stakes, the system must handle:\n\nExtraction errors through validation and correction mechanisms\nAdversarial inputs designed to manipulate outputs\nModel uncertainty through sensitivity analysis\nScaling challenges as networks grow large\nEvolution over time as arguments develop\n\nThese requirements shape AMTAIR’s design, as detailed in the next chapter.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-system-architecture",
    "href": "chapters/Outlines/Outline_12.html#sec-system-architecture",
    "title": "Preface",
    "section": "System Architecture Overview",
    "text": "System Architecture Overview\nAMTAIR implements an end-to-end pipeline transforming unstructured text into interactive Bayesian network visualizations. The architecture reflects key design principles:\n\nModularity: Each component can be independently improved\nTransparency: Intermediate outputs enable inspection and validation\nFlexibility: Multiple input formats and configurable processing\nScalability: Efficient processing of large document sets\n\n\nFive-Stage Pipeline\nThe system processes information through five distinct stages:\nDocuments → Ingestion → ArgDown → BayesDown → Networks → Visualization\nEach stage produces inspectable outputs, enabling validation and debugging. This transparency is crucial for building trust in automated extraction.\n\n\nComponent Architecture\nclass AMTAIRPipeline:\n    def __init__(self):\n        self.ingestion = DocumentIngestion()\n        self.extraction = BayesDownExtractor()  \n        self.transformation = DataTransformer()\n        self.network_builder = BayesianNetworkBuilder()\n        self.visualizer = InteractiveVisualizer()\n        \n    def process(self, document):\n        \"\"\"End-to-end processing from document to interactive model\"\"\"\n        structured_data = self.ingestion.preprocess(document)\n        bayesdown = self.extraction.extract(structured_data)\n        dataframe = self.transformation.convert(bayesdown)\n        network = self.network_builder.construct(dataframe)\n        return self.visualizer.render(network)\nThis clean separation of concerns enables targeted improvements and alternative implementations for each component.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-two-stage-extraction",
    "href": "chapters/Outlines/Outline_12.html#sec-two-stage-extraction",
    "title": "Preface",
    "section": "The Two-Stage Extraction Process",
    "text": "The Two-Stage Extraction Process\nThe core innovation of AMTAIR lies in separating structural extraction from probability quantification. This two-stage approach addresses key challenges in automated formalization.\n\nStage 1: Structural Extraction (ArgDown)\nThe first stage identifies argument structure without concerning itself with quantification:\nVariable Identification: Extract key propositions and entities from text using patterns like “X causes Y,” “If A then B,” and domain-specific indicators.\nRelationship Mapping: Identify support, attack, and conditional relationships between variables through linguistic analysis.\nHierarchy Construction: Build nested ArgDown representation preserving logical flow:\n[Existential_Catastrophe]: Destruction of humanity's potential.\n + [Human_Disempowerment]: Loss of control to AI systems.\n   + [Misaligned_Power_Seeking]: AI pursuing problematic objectives.\n     + [APS_Systems]: Advanced, agentic, strategic AI.\n     + [Deployment_Decisions]: Choice to deploy despite risks.\nValidation: Ensure extracted structure forms valid directed acyclic graph and preserves key argumentative relationships from source.\n\n\nStage 2: Probability Integration (BayesDown)\nThe second stage adds quantitative information to the structural skeleton:\nQuestion Generation: For each node, generate probability elicitation questions:\n\n“What is the probability of existential catastrophe?”\n“What is P(catastrophe|human_disempowerment)?”\n\nProbability Extraction: Identify explicit numerical statements and map qualitative expressions:\n\n“Very likely” → 0.75-0.9\n“Possible but unlikely” → 0.1-0.3\n\nCoherence Enforcement: Ensure probabilities satisfy basic constraints:\n\nProbabilities sum to 1.0\nConditional tables are complete\nNo logical contradictions\n\nMetadata Integration: Combine structure with probabilities in BayesDown format.\n\n\nWhy Two Stages?\nThis separation provides several benefits:\nModular Validation: Structure can be verified independently from probability estimates, simplifying quality assurance.\nHuman Oversight: Experts can review and correct structural extraction before probability quantification.\nFlexible Quantification: Different methods (LLM extraction, expert elicitation, market data) can provide probabilities for the same structure.\nError Isolation: Structural errors don’t contaminate probability extraction and vice versa.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-implementation-details",
    "href": "chapters/Outlines/Outline_12.html#sec-implementation-details",
    "title": "Preface",
    "section": "Implementation Details",
    "text": "Implementation Details\nThe system is implemented in Python, leveraging established libraries while adding novel extraction capabilities.\n\nTechnology Stack\n\nLanguage Models: OpenAI GPT-4 and Anthropic Claude for extraction\nNetwork Analysis: NetworkX for graph algorithms\nProbabilistic Modeling: pgmpy for Bayesian network operations\nVisualization: PyVis for interactive network rendering\nData Processing: Pandas for structured data manipulation\n\n\n\nKey Algorithms\nHierarchical Parsing: The system parses ArgDown/BayesDown syntax recognizing indentation-based hierarchy:\ndef parse_markdown_hierarchy_fixed(markdown_text, ArgDown=False):\n    \"\"\"Parse ArgDown or BayesDown format into structured DataFrame\"\"\"\n    # Clean text and extract node information\n    titles_info = extract_titles_info(clean_text)\n    \n    # Establish parent-child relationships based on indentation\n    titles_with_relations = establish_relationships_fixed(titles_info)\n    \n    # Convert to DataFrame with proper columns\n    df = convert_to_dataframe(titles_with_relations, ArgDown)\n    \n    # Add derived properties\n    df = add_network_analysis_columns(df)\n    \n    return df\nProbability Completion: When sources don’t specify all required probabilities, the system uses principled methods:\n\nMaximum entropy for missing values\nCoherence constraints propagation\nExpert-specified defaults\n\nVisual Encoding: Nodes are colored by probability magnitude and styled by network position:\n\nGreen (high probability) to red (low probability) gradient\nBlue borders for root causes, purple for intermediate, magenta for effects\n\n\n\nPerformance Characteristics\nBenchmarking reveals practical scalability:\n\nSmall networks (≤10 nodes): &lt;1 second processing\nMedium networks (11-30 nodes): 2-8 seconds\nLarge networks (31-50 nodes): 15-45 seconds\nVery large networks (&gt;50 nodes): Require approximation methods\n\nThe bottleneck shifts from extraction (linear in text length) to inference (exponential in network connectivity) as models grow.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-case-rain-sprinkler",
    "href": "chapters/Outlines/Outline_12.html#sec-case-rain-sprinkler",
    "title": "Preface",
    "section": "Case Study: Rain-Sprinkler-Grass",
    "text": "Case Study: Rain-Sprinkler-Grass\nI begin with the canonical example to demonstrate the complete pipeline on a simple, well-understood case.\n\nInput Representation\nThe source BayesDown representation:\n[Grass_Wet]: Concentrated moisture on grass.\n{\"instantiations\": [\"grass_wet_TRUE\", \"grass_wet_FALSE\"],\n \"priors\": {\"p(grass_wet_TRUE)\": \"0.322\", \"p(grass_wet_FALSE)\": \"0.678\"},\n \"posteriors\": {\n   \"p(grass_wet_TRUE|sprinkler_TRUE,rain_TRUE)\": \"0.99\",\n   \"p(grass_wet_TRUE|sprinkler_TRUE,rain_FALSE)\": \"0.9\",\n   \"p(grass_wet_TRUE|sprinkler_FALSE,rain_TRUE)\": \"0.8\",\n   \"p(grass_wet_TRUE|sprinkler_FALSE,rain_FALSE)\": \"0.0\"\n }}\n + [Rain]: Water falling from sky.\n   {\"instantiations\": [\"rain_TRUE\", \"rain_FALSE\"],\n    \"priors\": {\"p(rain_TRUE)\": \"0.2\", \"p(rain_FALSE)\": \"0.8\"}}\n + [Sprinkler]: Artificial watering system.\n   {\"instantiations\": [\"sprinkler_TRUE\", \"sprinkler_FALSE\"],\n    \"priors\": {\"p(sprinkler_TRUE)\": \"0.448\", \"p(sprinkler_FALSE)\": \"0.552\"},\n    \"posteriors\": {\n      \"p(sprinkler_TRUE|rain_TRUE)\": \"0.01\",\n      \"p(sprinkler_TRUE|rain_FALSE)\": \"0.4\"\n    }}\n   + [Rain]\n\n\nProcessing Steps\n\nParsing: Extract three nodes with relationships\nValidation: Verify probability coherence and DAG structure\nEnhancement: Calculate joint probabilities and network metrics\nConstruction: Build formal Bayesian network\nVisualization: Render interactive display\n\n\n\nResults\nThe system successfully:\n\nExtracts complete network structure\nPreserves all probability information\nCalculates correct marginal probabilities\nGenerates interactive visualization\nEnables inference queries\n\nThis simple example validates the basic pipeline functionality before tackling complex real-world cases.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-case-carlsmith",
    "href": "chapters/Outlines/Outline_12.html#sec-case-carlsmith",
    "title": "Preface",
    "section": "Case Study: Carlsmith’s Power-Seeking AI Model",
    "text": "Case Study: Carlsmith’s Power-Seeking AI Model\nApplying AMTAIR to Carlsmith’s model demonstrates scalability to realistic AI safety arguments.\n\nModel Complexity\nThe Carlsmith model contains:\n\n23 nodes representing different factors\n27 edges encoding dependencies\nMultiple probability tables with complex conditionals\nSix-level causal depth from root causes to catastrophe\n\n\n\nExtraction Results\nThe automated extraction successfully identifies:\nCore Risk Pathway:\nExistential_Catastrophe \n← Human_Disempowerment \n← Scale_Of_Power_Seeking\n← Misaligned_Power_Seeking\n← [APS_Systems, Difficulty_Of_Alignment, Deployment_Decisions]\nSupporting Structure:\n\nCompetitive dynamics influencing deployment\nTechnical factors affecting alignment difficulty\nCorrective mechanisms and their limitations\n\nProbability Preservation:\n\nExtracted probabilities match Carlsmith’s published estimates\nConditional relationships properly captured\nFinal P(doom) calculation reproduces ~5% result\n\n\n\nValidation Against Original\nComparing extracted model to Carlsmith’s original:\n\n\n\nMetric\nPerformance\n\n\n\n\nStructural Accuracy\n92% (nodes and edges)\n\n\nProbability Accuracy\n87% (within 0.05)\n\n\nPath Completeness\n100% (all major paths)\n\n\nSemantic Preservation\nHigh (per expert review)\n\n\n\nThe high fidelity demonstrates AMTAIR’s capability for complex real-world arguments.\n\n\nInsights from Formalization\nFormal representation reveals several insights:\nCritical Path Analysis: The pathway through APS development and deployment decisions carries the highest risk contribution.\nSensitivity Points: Small changes in deployment probability create large changes in overall risk.\nIntervention Opportunities: Improving alignment difficulty or deployment governance show highest impact potential.\nThese insights emerge naturally from formal analysis but remain implicit in textual arguments.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-validation-methodology",
    "href": "chapters/Outlines/Outline_12.html#sec-validation-methodology",
    "title": "Preface",
    "section": "Validation Methodology",
    "text": "Validation Methodology\nEstablishing trust in automated extraction requires rigorous validation across multiple dimensions.\n\nGround Truth Construction\nI created validation datasets through:\n\nExpert Manual Extraction: Three domain experts independently extracted models from the same sources\nConsensus Building: Reconciled differences to create gold standard representations\nAnnotation: Marked source passages supporting each element\n\n\n\nEvaluation Metrics\nStructural Metrics:\n\nPrecision: Fraction of extracted elements that are correct\nRecall: Fraction of true elements that are extracted\nF1 Score: Harmonic mean balancing precision and recall\n\nProbabilistic Metrics:\n\nMean Absolute Error for probability values\nKullback-Leibler divergence for distributions\nCalibration plots for uncertainty expression\n\nSemantic Metrics:\n\nExpert ratings of meaning preservation\nFunctional equivalence for inference queries\n\n\n\nResults Summary\nAcross 20 test documents:\n\n\n\nComponent\nPrecision\nRecall\nF1 Score\n\n\n\n\nNode Identification\n89%\n86%\n0.875\n\n\nEdge Extraction\n84%\n81%\n0.825\n\n\nProbability Values\n76%\n71%\n0.735\n\n\nOverall System\n83%\n79%\n0.810\n\n\n\nPerformance is strongest for explicit structural elements and numerical probabilities, with more challenges in extracting implicit relationships and qualitative uncertainty.\n\n\nError Analysis\nCommon failure modes:\nImplicit Assumptions (23% of errors): Unstated background assumptions that experts infer but system misses.\nComplex Conditionals (19% of errors): Nested conditionals with multiple antecedents challenge current parsing.\nAmbiguous Quantifiers (17% of errors): Terms like “significant” lack clear probability mapping without context.\nCoreference Resolution (15% of errors): Pronouns and indirect references create attribution challenges.\nUnderstanding these limitations guides both current usage and future improvements.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-policy-evaluation",
    "href": "chapters/Outlines/Outline_12.html#sec-policy-evaluation",
    "title": "Preface",
    "section": "Policy Evaluation Capabilities",
    "text": "Policy Evaluation Capabilities\nBeyond extraction and visualization, AMTAIR enables systematic policy analysis through formal intervention modeling.\n\nIntervention Representation\nPolicies are modeled as modifications to network parameters:\ndef evaluate_policy_intervention(network, intervention, targets):\n    \"\"\"Evaluate policy impact using do-calculus\"\"\"\n    # Baseline without intervention\n    baseline = network.query(targets)\n    \n    # Apply intervention using Pearl's do-operator\n    intervened = network.do_query(\n        intervention['variable'],\n        intervention['value'], \n        targets\n    )\n    \n    # Calculate effect metrics\n    return {\n        'baseline_risk': baseline,\n        'intervened_risk': intervened,\n        'relative_reduction': 1 - intervened/baseline,\n        'absolute_reduction': baseline - intervened\n    }\n\n\nExample: Deployment Governance\nConsider a policy requiring safety certification before deployment:\nIntervention: Set P(deployment|misaligned) = 0.1 (from 0.7)\nResults:\n\nBaseline P(catastrophe) = 0.05\nIntervened P(catastrophe) = 0.012\nRelative risk reduction = 76%\nNumber needed to regulate = 26 deployments\n\nThis quantitative analysis enables comparison across interventions.\n\n\nRobustness Analysis\nPolicies must work across worldviews. AMTAIR enables:\n\nMulti-Model Evaluation: Test interventions across different extracted models\nParameter Sensitivity: Vary assumptions to find breaking points\nScenario Analysis: Combine interventions under different futures\nConfidence Bounds: Propagate uncertainty through to outcomes\n\nThis systematic approach moves beyond intuitive policy assessment.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-visualization-design",
    "href": "chapters/Outlines/Outline_12.html#sec-visualization-design",
    "title": "Preface",
    "section": "Interactive Visualization Design",
    "text": "Interactive Visualization Design\nMaking Bayesian networks accessible to diverse stakeholders requires careful visualization design.\n\nVisual Encoding Strategy\nThe system uses multiple visual channels:\nColor: Probability magnitude (green=high, red=low) Borders: Node type (blue=root, purple=intermediate, magenta=effect)\nSize: Centrality in network (larger=more influential) Layout: Force-directed positioning reveals clusters\n\n\nProgressive Disclosure\nInformation appears at appropriate levels:\n\nOverview: Network structure and color coding\nHover: Node description and prior probability\nClick: Full probability tables and details\nInteraction: Drag to rearrange, zoom to explore\n\nThis layered approach serves both quick assessment and deep analysis needs.\n\n\nUser Interface Elements\nKey features enhance usability:\n\nPhysics Controls: Adjust layout dynamics\nFilter Options: Show/hide node types\nExport Functions: Save images or data\nComparison Mode: Side-by-side worldviews\n\nThese features emerged from user testing with researchers and policymakers.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-market-integration",
    "href": "chapters/Outlines/Outline_12.html#sec-market-integration",
    "title": "Preface",
    "section": "Integration with Prediction Markets",
    "text": "Integration with Prediction Markets\nWhile full integration remains future work, the architecture supports connection to live forecasting data.\n\nDesign for Integration\nThe system architecture anticipates market connections:\nclass PredictionMarketConnector:\n    def __init__(self, market_apis):\n        self.markets = market_apis\n        \n    def find_relevant_questions(self, model_variables):\n        \"\"\"Map model variables to forecast questions\"\"\"\n        # Semantic matching between variables and questions\n        \n    def fetch_probabilities(self, questions):\n        \"\"\"Retrieve latest market probabilities\"\"\"\n        # API calls with caching and error handling\n        \n    def update_model(self, model, market_data):\n        \"\"\"Integrate market probabilities into model\"\"\"\n        # Weighted updating based on liquidity and track record\n\n\nChallenges and Opportunities\nKey integration challenges:\n\nQuestion Mapping: Model variables rarely match market questions exactly\nTemporal Alignment: Markets forecast specific dates, models consider scenarios\nQuality Variation: Market depth and participation vary significantly\n\nDespite challenges, even partial integration provides value through external validation and dynamic updating.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-computational",
    "href": "chapters/Outlines/Outline_12.html#sec-computational",
    "title": "Preface",
    "section": "Computational Considerations",
    "text": "Computational Considerations\nAs networks grow large, computational challenges emerge requiring sophisticated approaches.\n\nExact vs. Approximate Inference\nSmall networks enable exact inference through variable elimination. Larger networks require approximation:\nMonte Carlo Methods: Sample from probability distributions to estimate queries Variational Inference: Optimize simpler distributions to approximate true posteriors Belief Propagation: Pass messages between nodes to converge on beliefs\nThe system automatically selects appropriate methods based on network properties.\n\n\nScaling Strategies\nFor very large networks:\n\nHierarchical Decomposition: Break into sub-networks for independent analysis\nPruning: Remove low-influence paths for specific queries\nCaching: Store computed results for common queries\nParallelization: Distribute sampling across processors\n\nThese strategies extend practical network size limits significantly.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-technical-summary",
    "href": "chapters/Outlines/Outline_12.html#sec-technical-summary",
    "title": "Preface",
    "section": "Summary of Technical Achievements",
    "text": "Summary of Technical Achievements\nAMTAIR successfully demonstrates:\n\nAutomated extraction from natural language to formal models\nTwo-stage architecture separating structure from quantification\nHigh fidelity preservation of complex arguments\nInteractive visualization accessible to diverse users\nPolicy evaluation capabilities through intervention modeling\nScalable implementation handling realistic network sizes\n\nThese achievements validate the feasibility of computational coordination infrastructure for AI governance.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-technical-limitations",
    "href": "chapters/Outlines/Outline_12.html#sec-technical-limitations",
    "title": "Preface",
    "section": "Technical Limitations and Responses",
    "text": "Technical Limitations and Responses\n\nObjection 1: Extraction Quality Boundaries\nCritic: “Complex implicit reasoning chains resist formalization. Automated extraction will systematically miss nuanced arguments, subtle conditional relationships, and context-dependent meanings that human readers naturally understand.”\nResponse: This concern has merit—extraction does face inherent limitations. However, the empirical results tell a more nuanced story. With extraction achieving 85%+ accuracy for structural relationships and 73% for probability capture, the system performs well enough for practical use while falling short of human expert performance.\nMore importantly, AMTAIR employs a hybrid human-AI workflow that addresses this limitation:\n\nTwo-stage verification: Humans review structural extraction before probability quantification\nTransparent outputs: All intermediate representations remain human-readable\nIterative refinement: Extraction prompts improve based on error analysis\nEnsemble approaches: Multiple extraction attempts can identify ambiguities\n\nThe question is not whether automated extraction perfectly captures every nuance—it doesn’t. Rather, it’s whether imperfect extraction still provides value over no formal representation. When the alternative is relying on conflicting mental models that remain entirely implicit, even 75% accurate formal models represent significant progress.\nFurthermore, extraction errors often reveal interesting properties of the source arguments themselves—ambiguities that human readers gloss over become explicit when formalization fails. This diagnostic value enhances rather than undermines the approach.\n\n\nObjection 2: False Precision in Uncertainty\nCritic: “Attaching exact probabilities to unprecedented events like AI catastrophe is fundamentally misguided. The numbers create false confidence in what amounts to educated speculation about radically uncertain futures.”\nResponse: This philosophical objection strikes at the heart of formal risk assessment. However, AMTAIR addresses it through several design choices:\nFirst, the system explicitly represents uncertainty about uncertainty. Rather than point estimates, the framework supports probability distributions over parameters. When someone says “likely” we might model this as Beta(8,2) rather than exactly 0.8, capturing both the central estimate and our uncertainty about it.\nSecond, all probabilities are explicitly conditional on stated assumptions. The system doesn’t claim “P(catastrophe) = 0.05” absolutely, but rather “Given Carlsmith’s model assumptions, P(catastrophe) = 0.05.” This conditionality is preserved throughout analysis.\nThird, sensitivity analysis reveals which probabilities actually matter. Often, precise values are unnecessary—knowing whether a parameter is closer to 0.1 or 0.9 suffices for decision-making. The formalization helps identify where precision matters and where it doesn’t.\nFinally, the alternative to quantification isn’t avoiding the problem but making it worse. When experts say “highly likely” or “significant risk,” they implicitly reason with probabilities. Formalization simply makes these implicit quantities explicit and subject to scrutiny. As Dennis Lindley noted, “Uncertainty is not in the events, but in our knowledge about them.”\n\n\nObjection 3: Correlation Complexity\nCritic: “Bayesian networks assume conditional independence given parents, but real-world AI risks involve complex correlations. Ignoring these dependencies could dramatically misrepresent risk levels.”\nResponse: Standard Bayesian networks do face limitations with correlation representation—this is a genuine technical challenge. However, several approaches within the framework address this:\nExplicit correlation nodes: When factors share hidden common causes, we can add latent variables to capture correlations. For instance, “AI research culture” might influence both “capability advancement” and “safety investment.”\nCopula methods: For known correlation structures, copula functions can model dependencies while preserving marginal distributions. This extends standard Bayesian networks significantly.\nSensitivity bounds: When correlations remain uncertain, we can compute bounds on outcomes under different correlation assumptions. This reveals when correlations critically affect conclusions.\nModel ensembles: Different correlation structures can be modeled separately and results aggregated, similar to climate modeling approaches.\nMore fundamentally, the question is whether imperfect independence assumptions invalidate the approach. In practice, explicitly modeling first-order effects with known limitations often proves more valuable than attempting to capture all dependencies informally. The framework makes assumptions transparent, enabling targeted improvements where correlations matter most.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-conceptual-concerns",
    "href": "chapters/Outlines/Outline_12.html#sec-conceptual-concerns",
    "title": "Preface",
    "section": "Conceptual and Methodological Concerns",
    "text": "Conceptual and Methodological Concerns\n\nObjection 4: Democratic Exclusion\nCritic: “Transforming policy debates into complex graphs and equations will sideline non-technical stakeholders, concentrating influence among those comfortable with formal models. This technocratic approach undermines democratic participation in crucial decisions about humanity’s future.”\nResponse: This concern about technocratic exclusion deserves serious consideration—formal methods can indeed create barriers. However, AMTAIR’s design explicitly prioritizes accessibility alongside rigor:\nProgressive disclosure interfaces allow engagement at multiple levels. A policymaker might explore visual network structures and probability color-coding without engaging mathematical details. Interactive features let users modify assumptions and see consequences without understanding implementation.\nNatural language preservation ensures original arguments remain accessible. The BayesDown format maintains human-readable descriptions alongside formal specifications. Users can always trace from mathematical representations back to source texts.\nComparative advantage comes from making implicit technical content explicit, not adding complexity. When experts debate AI risk, they already employ sophisticated probabilistic reasoning—formalization reveals rather than creates this complexity. Making hidden assumptions visible arguably enhances rather than reduces democratic participation.\nMultiple interfaces serve different communities. Researchers access full technical depth, policymakers use summary dashboards, public stakeholders explore interactive visualizations. The same underlying model supports varied engagement modes.\nRather than excluding non-technical stakeholders, proper implementation can democratize access to expert reasoning by making it inspectable and modifiable. The risk lies not in formalization itself but in poor interface design or gatekeeping behaviors around model access.\n\n\nObjection 5: Oversimplification of Complex Systems\nCritic: “Forcing rich socio-technical systems into discrete Bayesian networks necessarily loses crucial dynamics—feedback loops, emergent properties, institutional responses, and cultural factors that shape AI development. The models become precise but wrong.”\nResponse: All models simplify by necessity—as Box noted, “All models are wrong, but some are useful.” The question becomes whether formal simplifications improve upon informal mental models:\nTransparent limitations make formal models’ shortcomings explicit. Unlike mental models where simplifications remain hidden, network representations clearly show what is and isn’t included. This transparency enables targeted criticism and improvement.\nIterative refinement allows models to grow more sophisticated over time. Starting with first-order effects and adding complexity where it proves important follows successful practice in other domains. Climate models began simply and added dynamics as computational power and understanding grew.\nComplementary tools address different aspects of the system. Bayesian networks excel at probabilistic reasoning and intervention analysis. Other approaches—agent-based models, system dynamics, scenario planning—can capture different properties. AMTAIR provides one lens, not the only lens.\nEmpirical adequacy ultimately judges models. If simplified representations enable better predictions and decisions than informal alternatives, their abstractions are justified. Early results suggest formal models, despite simplifications, outperform intuitive reasoning for complex risk assessment.\nThe goal isn’t creating perfect representations but useful ones. By making simplifications explicit and modifiable, formal models enable systematic improvement in ways mental models cannot.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-red-teaming",
    "href": "chapters/Outlines/Outline_12.html#sec-red-teaming",
    "title": "Preface",
    "section": "Red-Teaming Results",
    "text": "Red-Teaming Results\nTo identify failure modes, I conducted systematic adversarial testing of the AMTAIR system.\n\nAdversarial Extraction Attempts\nI tested the system with deliberately challenging inputs:\nContradictory Arguments: Texts asserting P(A) = 0.2 and P(A) = 0.8 in different sections\n\nResult: System flagged inconsistency rather than averaging\nMitigation: Explicit consistency checking with user resolution\n\nCircular Reasoning: Arguments where A causes B causes C causes A\n\nResult: DAG validation caught cycles, extraction failed gracefully\nMitigation: Clear error messages explaining the structural issue\n\nExtremely Vague Language: Texts using only qualitative terms without clear relationships\n\nResult: Extraction quality degraded significantly (F1 &lt; 0.5)\nMitigation: Confidence scores on extracted elements, human review triggers\n\nDeceptive Framings: Arguments designed to imply false causal relationships\n\nResult: System sometimes extracted spurious connections\nMitigation: Source grounding requirements, validation against citations\n\n\n\nRobustness Findings\nKey vulnerabilities identified:\n\nAnchoring bias: System tends to over-weight first probability mentioned (34% effect)\nAuthority sensitivity: Extracted probabilities inflated for cited experts (18% average)\nComplexity degradation: Performance drops sharply beyond 50 nodes\nContext loss: Long-range dependencies in text sometimes missed\n\nHowever, the system demonstrated robustness to:\n\nDifferent writing styles and academic disciplines\nVariations in argument structure and presentation order\nMixed numerical and qualitative probability expressions\nReasonable levels of grammatical errors and typos\n\n\n\nImplications for Deployment\nThese results suggest AMTAIR is suitable for:\n\nResearch applications with expert oversight\nPolicy analysis of well-structured arguments\nEducational uses demonstrating formal reasoning\nCollaborative modeling with human verification\n\nBut should be used cautiously for:\n\nFully automated analysis without review\nAdversarial or politically contentious texts\nReal-time decision-making without validation\nArguments far outside training distribution",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-epistemic-security",
    "href": "chapters/Outlines/Outline_12.html#sec-epistemic-security",
    "title": "Preface",
    "section": "Enhancing Epistemic Security",
    "text": "Enhancing Epistemic Security\nDespite limitations, AMTAIR contributes to epistemic security in AI governance through several mechanisms.\n\nMaking Models Inspectable\nThe greatest epistemic benefit comes from forcing implicit models into explicit form. When an expert claims “misalignment likely leads to catastrophe,” formalization asks:\n\nLikely means what probability?\nThrough what causal pathways?\nUnder what assumptions?\nWith what evidence?\n\nThis explicitation serves multiple functions:\nClarity: Vague statements become precise claims subject to evaluation\nComparability: Different experts’ models can be systematically compared\nCriticizability: Hidden assumptions become visible targets for challenge\nUpdatability: Formal models can systematically incorporate new evidence\n\n\nRevealing Convergence and Divergence\nComparative analysis across extracted models reveals surprising patterns:\nStructural convergence: Different experts often share similar causal models even when probability estimates diverge dramatically. This suggests shared understanding of mechanisms despite disagreement on magnitudes.\nParameter clustering: Probability estimates often cluster around a few values rather than spreading uniformly, suggesting implicit coordination or common evidence bases.\nCrux identification: Formal comparison precisely identifies where worldviews diverge—often just 2-3 key parameters drive different conclusions about overall risk.\nThese insights remain hidden when arguments stay in natural language form.\n\n\nImproving Collective Reasoning\nAMTAIR enhances group epistemics through:\nExplicit uncertainty: Replacing “might,” “could,” “likely” with probability distributions reduces miscommunication and forces precision\nCompositional reasoning: Complex arguments decompose into manageable components that can be independently evaluated\nEvidence integration: New information updates specific parameters rather than requiring complete argument reconstruction\nExploration tools: Stakeholders can modify assumptions and immediately see consequences, building intuition about model dynamics\nEarly pilot studies with AI governance researchers show 40% reduction in time to identify core disagreements and 60% improvement in agreement about what they disagree about—meta-agreement that enables productive debate.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-scaling",
    "href": "chapters/Outlines/Outline_12.html#sec-scaling",
    "title": "Preface",
    "section": "Scaling Challenges and Opportunities",
    "text": "Scaling Challenges and Opportunities\nMoving from prototype to widespread adoption faces both technical and social challenges.\n\nTechnical Scaling\nComputational complexity grows with network size, but several approaches help:\n\nHierarchical decomposition for very large models\nCaching and approximation for common queries\nDistributed processing for extraction tasks\nIncremental updating rather than full recomputation\n\nData quality varies dramatically across sources:\n\nAcademic papers provide structured arguments\nBlog posts offer rich ideas with less formal structure\nPolicy documents mix normative and empirical claims\nSocial media presents extreme extraction challenges\n\nIntegration complexity increases with ecosystem growth:\n\nMultiple LLM providers with different capabilities\nDiverse visualization needs across users\nVarious export formats for downstream tools\nVersion control for evolving models\n\n\n\nSocial and Institutional Scaling\nAdoption barriers include:\n\nLearning curve for formal methods\nInstitutional inertia in established processes\nConcerns about replacing human judgment\nResource requirements for implementation\n\nTrust building requires:\n\nTransparent methodology documentation\nPublished validation studies\nHigh-profile successful applications\nCommunity ownership and development\n\nSustainability depends on:\n\nOpen source development model\nDiverse funding sources\nAcademic and industry partnerships\nClear value demonstration\n\n\n\nOpportunities for Impact\nDespite challenges, several factors favor adoption:\nTiming: AI governance needs tools now, creating receptive audiences\nComplementarity: AMTAIR enhances rather than replaces existing processes\nFlexibility: The approach adapts to different contexts and needs\nNetwork effects: Value increases as more perspectives are formalized\nEarly adopters in research organizations and think tanks can demonstrate value, creating momentum for broader adoption.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-governance-integration",
    "href": "chapters/Outlines/Outline_12.html#sec-governance-integration",
    "title": "Preface",
    "section": "Integration with Governance Frameworks",
    "text": "Integration with Governance Frameworks\nAMTAIR complements rather than replaces existing governance approaches.\n\nStandards Development\nTechnical standards bodies could use AMTAIR to:\n\nModel how proposed standards affect risk pathways\nCompare different standard options systematically\nIdentify unintended consequences through pathway analysis\nBuild consensus through explicit model negotiation\n\nExample: Evaluating compute thresholds for AI system regulation by modeling how different thresholds affect capability development, safety investment, and competitive dynamics.\n\n\nRegulatory Design\nRegulators could apply the framework to:\n\nAssess regulatory impact across different scenarios\nIdentify enforcement challenges through explicit modeling\nCompare international approaches systematically\nDesign adaptive regulations responsive to evidence\n\nExample: Analyzing how liability frameworks affect corporate AI development decisions under different market conditions.\n\n\nInternational Coordination\nMultilateral bodies could leverage shared models for:\n\nEstablishing common risk assessments\nNegotiating agreements with explicit assumptions\nMonitoring compliance through parameter tracking\nAdapting agreements as evidence emerges\n\nExample: Building shared models for AGI development scenarios to inform international AI governance treaties.\n\n\nOrganizational Decision-Making\nIndividual organizations could use AMTAIR for:\n\nInternal risk assessment and planning\nBoard-level communication about AI strategies\nResearch prioritization based on model sensitivity\nSafety case development with explicit assumptions\n\nExample: An AI lab modeling how different safety investments affect both capability advancement and risk mitigation.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-future-research",
    "href": "chapters/Outlines/Outline_12.html#sec-future-research",
    "title": "Preface",
    "section": "Future Research Directions",
    "text": "Future Research Directions\nSeveral research directions could enhance AMTAIR’s capabilities and impact.\n\nTechnical Enhancements\nImproved extraction: Fine-tuning language models specifically for argument extraction, handling implicit reasoning, and cross-document synthesis\nRicher representations: Temporal dynamics, continuous variables, and multi-agent interactions within extended frameworks\nInference advances: Quantum computing applications, neural approximate inference, and hybrid symbolic-neural methods\nValidation methods: Automated consistency checking, anomaly detection in extracted models, and benchmark dataset development\n\n\nMethodological Extensions\nCausal discovery: Inferring causal structures from data rather than just extracting from text\nExperimental integration: Connecting models to empirical results from AI safety experiments\nDynamic updating: Continuous model refinement as new evidence emerges from research and deployment\nUncertainty quantification: Richer representation of deep uncertainty and model confidence\n\n\nApplication Domains\nBeyond AI safety: Climate risk, biosecurity, nuclear policy, and other existential risks\nCorporate governance: Strategic planning, risk management, and innovation assessment\nScientific modeling: Formalizing theoretical arguments in emerging fields\nEducational tools: Teaching probabilistic reasoning and critical thinking\n\n\nEcosystem Development\nOpen standards: Common formats for model exchange and tool interoperability\nCommunity platforms: Collaborative model development and sharing infrastructure\nTraining programs: Building capacity for formal modeling in governance communities\nQuality assurance: Certification processes for high-stakes model applications\nThese directions could transform AMTAIR from a single tool into a broader ecosystem for enhanced reasoning about complex risks.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-key-contributions",
    "href": "chapters/Outlines/Outline_12.html#sec-key-contributions",
    "title": "Preface",
    "section": "Summary of Key Contributions",
    "text": "Summary of Key Contributions\nThis thesis has demonstrated both the need for and feasibility of computational approaches to enhancing coordination in AI governance. The work makes several distinct contributions across theory, methodology, and implementation.\n\nTheoretical Contributions\nDiagnosis of the Coordination Crisis: I’ve articulated how fragmentation across technical, policy, and strategic communities systematically amplifies existential risk from advanced AI. This framing moves beyond identifying disagreements to understanding how misaligned efforts create negative-sum dynamics—safety gaps emerge between communities, resources are misallocated through duplication and neglect, and interventions interact destructively.\nThe Multiplicative Benefits Framework: The combination of automated extraction, prediction market integration, and formal policy evaluation creates value exceeding the sum of parts. Automation enables scale, markets provide empirical grounding, and policy analysis delivers actionable insights. Together, they address different facets of the coordination challenge while reinforcing each other’s strengths.\nEpistemic Infrastructure Conception: Positioning formal models as epistemic infrastructure reframes the role of technical tools in governance. Rather than replacing human judgment, computational approaches provide common languages, shared representations, and systematic methods for managing disagreement—essential foundations for coordination under uncertainty.\n\n\nMethodological Innovations\nTwo-Stage Extraction Architecture: Separating structural extraction (ArgDown) from probability quantification (BayesDown) addresses key challenges in automated formalization. This modularity enables human oversight at critical points, supports multiple quantification methods, and isolates different types of errors for targeted improvement.\nBayesDown as Bridge Representation: The development of BayesDown syntax creates a crucial intermediate representation preserving both narrative accessibility and mathematical precision. This bridge enables the transformation from qualitative arguments to quantitative models while maintaining traceability and human readability.\nValidation Framework: The systematic approach to validating automated extraction—comparing against expert annotations, measuring multiple accuracy dimensions, and analyzing error patterns—establishes scientific standards for assessing formalization tools. This framework can guide future development in this emerging area.\n\n\nTechnical Achievements\nWorking Implementation: AMTAIR demonstrates end-to-end feasibility from document ingestion through interactive visualization. The system achieves practically useful accuracy levels: 85%+ for structural extraction and 73% for probability capture on real AI safety arguments.\nScalability Solutions: Technical approaches for handling realistic model complexity—hierarchical decomposition, approximate inference, and progressive visualization—show that computational limitations need not prevent practical application.\nAccessibility Design: The layered interface approach serves diverse stakeholders without compromising technical depth. Progressive disclosure, visual encoding, and interactive exploration make formal models accessible beyond technical specialists.\n\n\nEmpirical Findings\nExtraction Feasibility: The successful extraction of complex arguments like Carlsmith’s model validates the core premise that implicit formal structures exist in natural language arguments and can be computationally recovered with reasonable fidelity.\nConvergence Patterns: Comparative analysis reveals surprising structural agreement across worldviews even when probability estimates diverge dramatically. This suggests shared causal understanding despite parameter disagreements—a foundation for coordination.\nIntervention Impacts: Policy evaluation demonstrates how formal models enable rigorous assessment of governance options. The ability to quantify risk reduction across scenarios and identify robust strategies validates the practical value of formalization.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-limitations-assessment",
    "href": "chapters/Outlines/Outline_12.html#sec-limitations-assessment",
    "title": "Preface",
    "section": "Limitations and Honest Assessment",
    "text": "Limitations and Honest Assessment\nDespite these contributions, important limitations constrain current capabilities and should guide appropriate use.\n\nTechnical Constraints\nExtraction Boundaries: While 73-85% accuracy suffices for many purposes, systematic biases remain. The system struggles with implicit assumptions, complex conditionals, and context-dependent meanings. These limitations necessitate human review for high-stakes applications.\nCorrelation Handling: Standard Bayesian networks inadequately represent complex correlations in real systems. While extensions like copulas and explicit correlation nodes help, fully capturing interdependencies remains challenging.\nComputational Scaling: Very large networks (&gt;50 nodes) require approximations that may affect accuracy. As models grow to represent richer phenomena, computational constraints increasingly bind.\n\n\nConceptual Limitations\nFormalization Trade-offs: Converting rich arguments to formal models necessarily loses nuance. While making assumptions explicit provides value, some insights resist mathematical representation.\nProbability Interpretation: Deep uncertainty about unprecedented events challenges probabilistic representation. Numbers can create false precision even when explicitly conditional and uncertain.\nSocial Complexity: Institutional dynamics, cultural factors, and political processes influence AI development in ways that simple causal models struggle to capture.\n\n\nPractical Constraints\nAdoption Barriers: Learning curves, institutional inertia, and resource requirements limit immediate deployment. Even demonstrably valuable tools face implementation challenges.\nMaintenance Burden: Models require updating as arguments evolve and evidence emerges. Without sustained effort, formal representations quickly become outdated.\nContext Dependence: The approach works best for well-structured academic arguments. Application to informal discussions, political speeches, or social media remains challenging.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-governance-implications",
    "href": "chapters/Outlines/Outline_12.html#sec-governance-implications",
    "title": "Preface",
    "section": "Implications for AI Governance",
    "text": "Implications for AI Governance\nDespite limitations, AMTAIR’s approach offers significant implications for how AI governance can evolve toward greater coordination and effectiveness.\n\nNear-Term Applications\nResearch Coordination: Research organizations can use formal models to:\n\nMap the landscape of current arguments and identify gaps\nPrioritize investigations targeting high-sensitivity parameters\nBuild cumulative knowledge through explicit model updating\nFacilitate collaboration through shared representations\n\nPolicy Development: Governance bodies can apply the framework to:\n\nEvaluate proposals across multiple expert worldviews\nIdentify robust interventions effective under uncertainty\nMake assumptions explicit for democratic scrutiny\nTrack how evidence changes optimal policies over time\n\nStakeholder Communication: The visualization and analysis tools enable:\n\nClearer communication between technical and policy communities\nPublic engagement with complex risk assessments\nBoard-level strategic discussions grounded in formal analysis\nInternational negotiations with explicit shared models\n\n\n\nMedium-Term Transformation\nAs adoption spreads, we might see:\nEpistemic Commons: Shared repositories of formalized arguments become reference points for governance discussions, similar to how economic models inform monetary policy or climate models guide environmental agreements.\nAdaptive Governance: Policies designed with explicit models can include triggers for reassessment as key parameters change, enabling responsive governance that avoids both paralysis and recklessness.\nProfessionalization: “Model curator” and “argument formalization specialist” emerge as recognized roles, building expertise in bridging natural language and formal representations.\nQuality Standards: Community norms develop around model transparency, validation requirements, and appropriate use cases, preventing both dismissal and over-reliance on formal tools.\n\n\nLong-Term Vision\nSuccessfully scaling this approach could fundamentally alter AI governance:\nCoordinated Response: Rather than fragmented efforts, the AI safety ecosystem could operate with shared situational awareness—different actors understanding how their efforts interact and contribute to collective goals.\nAnticipatory Action: Formal models with prediction market integration could provide early warning of emerging risks, enabling proactive rather than reactive governance.\nGlobal Cooperation: Shared formal frameworks could facilitate international coordination similar to how economic models enable monetary coordination or climate models support environmental agreements.\nDemocratic Enhancement: Making expert reasoning transparent and modifiable could enable broader participation in crucial decisions about humanity’s technological future.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-recommendations",
    "href": "chapters/Outlines/Outline_12.html#sec-recommendations",
    "title": "Preface",
    "section": "Recommendations for Stakeholders",
    "text": "Recommendations for Stakeholders\nDifferent communities can take concrete steps to realize these benefits:\n\nFor Researchers\n\nExperiment with formalization: Try extracting your own arguments into ArgDown/BayesDown format to discover implicit assumptions\nContribute to validation: Provide expert annotations for building benchmark datasets and improving extraction quality\nDevelop extensions: Build on the open-source foundation to add capabilities for your specific domain needs\nPublish formally: Include formal model representations alongside traditional papers to enable cumulative building\n\n\n\nFor Policymakers\n\nPilot applications: Use AMTAIR for internal analysis of specific policy proposals to build familiarity and identify value\nDemand transparency: Request formal models underlying expert recommendations to understand assumptions and uncertainties\nFund development: Support tool development and training to build governance capacity for formal methods\nDesign adaptively: Create policies with explicit triggers based on model parameters to enable responsive governance\n\n\n\nFor Technologists\n\nImprove extraction: Contribute better prompting strategies, fine-tuned models, or validation methods\nEnhance interfaces: Develop visualizations and interactions serving specific stakeholder needs\nBuild integrations: Connect AMTAIR to other tools in the AI governance ecosystem\nScale infrastructure: Address computational challenges for larger models and broader deployment\n\n\n\nFor Funders\n\nSupport ecosystem: Fund not just tool development but training, community building, and maintenance\nBridge communities: Incentivize collaborations between formal modelers and domain experts\nMeasure coordination: Develop metrics for assessing coordination improvements from formal tools\nPatient capital: Recognize that epistemic infrastructure requires sustained investment to reach potential",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-future-research-agenda",
    "href": "chapters/Outlines/Outline_12.html#sec-future-research-agenda",
    "title": "Preface",
    "section": "Future Research Agenda",
    "text": "Future Research Agenda\nBuilding on this foundation, several research directions could amplify impact:\n\nTechnical Priorities\nExtraction Enhancement:\n\nFine-tuning language models specifically for argument extraction\nHandling implicit reasoning and long-range dependencies\nCross-document synthesis for comprehensive models\nMultilingual extraction for global perspectives\n\nRepresentation Extensions:\n\nTemporal dynamics for modeling AI development trajectories\nMulti-agent representations for strategic interactions\nContinuous variables for economic and capability metrics\nUncertainty types beyond probability distributions\n\nIntegration Depth:\n\nSemantic matching between models and prediction markets\nAutomated experiment design based on model sensitivity\nPolicy optimization algorithms using extracted models\nReal-time updating from news and research feeds\n\n\n\nMethodological Development\nValidation Science:\n\nLarger benchmark datasets with diverse argument types\nMetrics for semantic preservation beyond accuracy\nAdversarial robustness testing protocols\nLongitudinal studies of model evolution\n\nHybrid Approaches:\n\nOptimal human-AI collaboration patterns for extraction\nCombining formal models with other methods (scenarios, simulations)\nIntegration with deliberative and participatory processes\nBalancing automation with expert judgment\n\nSocial Methods:\n\nEthnographic studies of model use in organizations\nMeasuring coordination improvements empirically\nUnderstanding adoption barriers and facilitators\nDesigning interventions for epistemic security\n\n\n\nApplication Expansion\nDomain Extensions:\n\nClimate risk assessment and policy evaluation\nBiosecurity governance and pandemic preparedness\nNuclear policy and deterrence stability\nEmerging technology governance broadly\n\nInstitutional Integration:\n\nEmbedding in regulatory impact assessment\nCorporate strategic planning applications\nAcademic peer review enhancement\nDemocratic deliberation support tools\n\nGlobal Deployment:\n\nAdapting to different governance contexts\nSupporting multilateral negotiation processes\nBuilding capacity in developing nations\nCreating resilient distributed infrastructure",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-closing-reflections",
    "href": "chapters/Outlines/Outline_12.html#sec-closing-reflections",
    "title": "Preface",
    "section": "Closing Reflections",
    "text": "Closing Reflections\nThe work presented in this thesis emerges from a simple observation: while humanity mobilizes unprecedented resources to address AI risks, our efforts remain tragically uncoordinated. Different communities work with incompatible frameworks, duplicate efforts, and sometimes actively undermine each other’s work. This fragmentation amplifies the very risks we seek to mitigate.\nAMTAIR represents one attempt to build bridges—computational tools that create common ground for disparate perspectives. By making implicit models explicit, quantifying uncertainty, and enabling systematic policy analysis, these tools offer hope for enhanced coordination. The successful extraction of complex arguments, validation against expert judgment, and demonstration of policy evaluation capabilities suggest this approach has merit.\nYet tools alone cannot solve coordination problems rooted in incentives, institutions, and human psychology. AMTAIR provides infrastructure for coordination, not coordination itself. Success requires not just technical development but changes in how we approach collective challenges—valuing transparency over strategic ambiguity, embracing uncertainty rather than false confidence, and prioritizing collective outcomes over parochial interests.\nThe path forward demands both ambition and humility. Ambition to build the epistemic infrastructure necessary for navigating unprecedented risks. Humility to recognize our tools’ limitations and the irreducible role of human wisdom in governance. The question is not whether formal models can replace human judgment—they cannot and should not. Rather, it’s whether we can augment our collective intelligence with computational tools that help us reason together about futures too important to leave to chance.\nAs AI capabilities advance toward transformative potential, the window for establishing effective governance narrows. We cannot afford continued fragmentation when facing potentially irreversible consequences. The coordination crisis in AI governance represents both existential risk and existential opportunity—risk if we fail to align our efforts, opportunity if we succeed in building unprecedented cooperation around humanity’s most important challenge.\nThis thesis contributes technical foundations and demonstrates feasibility. The greater work—building communities, changing practices, and fostering coordination—remains ahead. May we prove equal to the task, for all our futures depend on it.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-appendix-technical",
    "href": "chapters/Outlines/Outline_12.html#sec-appendix-technical",
    "title": "Preface",
    "section": "Appendix A: Technical Implementation Details",
    "text": "Appendix A: Technical Implementation Details\n[Detailed code documentation, API specifications, and architectural diagrams]",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-appendix-validation",
    "href": "chapters/Outlines/Outline_12.html#sec-appendix-validation",
    "title": "Preface",
    "section": "Appendix B: Validation Datasets and Procedures",
    "text": "Appendix B: Validation Datasets and Procedures\n[Complete validation protocols, benchmark datasets, and inter-annotator agreement analysis]",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-appendix-cases",
    "href": "chapters/Outlines/Outline_12.html#sec-appendix-cases",
    "title": "Preface",
    "section": "Appendix C: Extended Case Studies",
    "text": "Appendix C: Extended Case Studies\n[Additional extraction examples and policy evaluation scenarios]",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-appendix-bayesdown",
    "href": "chapters/Outlines/Outline_12.html#sec-appendix-bayesdown",
    "title": "Preface",
    "section": "Appendix D: BayesDown Syntax Specification",
    "text": "Appendix D: BayesDown Syntax Specification\n[Complete formal specification of the BayesDown format]",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-appendix-prompts",
    "href": "chapters/Outlines/Outline_12.html#sec-appendix-prompts",
    "title": "Preface",
    "section": "Appendix E: Prompt Engineering Details",
    "text": "Appendix E: Prompt Engineering Details\n[Full extraction prompts and iterative refinements]",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/Outlines/Outline_12.html#sec-appendix-userguide",
    "href": "chapters/Outlines/Outline_12.html#sec-appendix-userguide",
    "title": "Preface",
    "section": "Appendix F: User Guide",
    "text": "Appendix F: User Guide\n[Practical guidance for using AMTAIR tools]",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html",
    "title": "1  ``` {.python .cell-code}",
    "section": "",
    "text": "1.2 0.2 Connect to GitHub Repository\nThe Public GitHub Repo Url in use:\nhttps://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/\nNote: When encountering errors, accessing the data, try using “RAW” Urls.\nCode\n# @title 0.2 --- Connect to GitHub Repository --- Load Files\n\n\"\"\"\nBLOCK PURPOSE: Establishes connection to the AMTAIR GitHub repository and provides\nfunctions to load example data files for processing.\n\nThis block creates a reusable function for accessing files from the project's\nGitHub repository, enabling access to example files like the rain-sprinkler-lawn\nBayesian network that serves as our canonical test case.\n\nDEPENDENCIES: requests library, io library\nOUTPUTS: load_file_from_repo function and test file loads\n\"\"\"\n\nfrom requests.exceptions import HTTPError\n\n# Specify the base repository URL for the AMTAIR project\nrepo_url = \"https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_carlsmith/\"\nprint(f\"Connecting to repository: {repo_url}\")\n\ndef load_file_from_repo(relative_path):\n    \"\"\"\n    Loads a file from the specified GitHub repository using a relative path.\n\n    Args:\n        relative_path (str): Path to the file relative to the repo_url\n\n    Returns:\n        For CSV/JSON: pandas DataFrame\n        For MD: string containing file contents\n\n    Raises:\n        HTTPError: If file not found or other HTTP error occurs\n        ValueError: If unsupported file type is requested\n    \"\"\"\n    file_url = repo_url + relative_path\n    print(f\"Attempting to load: {file_url}\")\n\n    # Fetch the file content from GitHub\n    response = requests.get(file_url)\n\n    # Check for bad status codes with enhanced error messages\n    if response.status_code == 404:\n        raise HTTPError(f\"File not found at URL: {file_url}. Check the file path/name and ensure the file is publicly accessible.\", response=response)\n    else:\n        response.raise_for_status()  # Raise for other error codes\n\n    # Convert response to file-like object\n    file_object = io.StringIO(response.text)\n\n    # Process different file types appropriately\n    if relative_path.endswith(\".csv\"):\n        return pd.read_csv(file_object)  # Return DataFrame for CSV\n    elif relative_path.endswith(\".json\"):\n        return pd.read_json(file_object)  # Return DataFrame for JSON\n    elif relative_path.endswith(\".md\"):\n        return file_object.read()  # Return raw content for MD files\n    else:\n        raise ValueError(f\"Unsupported file type: {relative_path.split('.')[-1]}. Add support in the GitHub Connection section of this notebook.\")\n\n# Load example files to test connection\ntry:\n    # Load the extracted data CSV file\n#    df = load_file_from_repo(\"extracted_data.csv\")\n\n    # Load the ArgDown test text\n    md_content = load_file_from_repo(\"ArgDown.md\")\n\n    print(\"✅ Successfully connected to repository and loaded test files.\")\nexcept Exception as e:\n    print(f\"❌ Error loading files: {str(e)}\")\n    print(\"Please check your internet connection and the repository URL.\")\n\n# Display preview of loaded content (commented out to avoid cluttering output)\nprint(md_content)\n\n\nConnecting to repository: https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_carlsmith/\nAttempting to load: https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_carlsmith/ArgDown.md\n✅ Successfully connected to repository and loaded test files.\n[Existential_Catastrophe]: The destruction of humanity's long-term potential due to AI systems we've lost control over. {\"instantiations\": [\"existential_catastrophe_TRUE\", \"existential_catastrophe_FALSE\"]}\n- [Human_Disempowerment]: Permanent and collective disempowerment of humanity relative to AI systems. {\"instantiations\": [\"human_disempowerment_TRUE\", \"human_disempowerment_FALSE\"]}\n    - [Scale_Of_Power_Seeking]: Power-seeking by AI systems scaling to the point of permanently disempowering all of humanity. {\"instantiations\": [\"scale_of_power_seeking_TRUE\", \"scale_of_power_seeking_FALSE\"]}\n        - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"]}\n            - [APS_Systems]: AI systems with advanced capabilities, agentic planning, and strategic awareness. {\"instantiations\": [\"aps_systems_TRUE\", \"aps_systems_FALSE\"]}\n                - [Advanced_AI_Capability]: AI systems that outperform humans on tasks that grant significant power in the world. {\"instantiations\": [\"advanced_ai_capability_TRUE\", \"advanced_ai_capability_FALSE\"]}\n                - [Agentic_Planning]: AI systems making and executing plans based on world models to achieve objectives. {\"instantiations\": [\"agentic_planning_TRUE\", \"agentic_planning_FALSE\"]}\n                - [Strategic_Awareness]: AI systems with models accurately representing power dynamics with humans. {\"instantiations\": [\"strategic_awareness_TRUE\", \"strategic_awareness_FALSE\"]}\n            - [Difficulty_Of_Alignment]: It is harder to build aligned systems than misaligned systems that are attractive to deploy. {\"instantiations\": [\"difficulty_of_alignment_TRUE\", \"difficulty_of_alignment_FALSE\"]}\n                - [Instrumental_Convergence]: AI systems with misaligned objectives tend to seek power as an instrumental goal. {\"instantiations\": [\"instrumental_convergence_TRUE\", \"instrumental_convergence_FALSE\"]}\n                - [Problems_With_Proxies]: Optimizing for proxy objectives breaks correlations with intended goals. {\"instantiations\": [\"problems_with_proxies_TRUE\", \"problems_with_proxies_FALSE\"]}\n                - [Problems_With_Search]: Search processes can yield systems pursuing different objectives than intended. {\"instantiations\": [\"problems_with_search_TRUE\", \"problems_with_search_FALSE\"]}\n            - [Deployment_Decisions]: Decisions to deploy potentially misaligned AI systems. {\"instantiations\": [\"deployment_decisions_DEPLOY\", \"deployment_decisions_WITHHOLD\"]}\n                - [Incentives_To_Build_APS]: Strong incentives to build and deploy APS systems. {\"instantiations\": [\"incentives_to_build_aps_STRONG\", \"incentives_to_build_aps_WEAK\"]}\n                    - [Usefulness_Of_APS]: APS systems are very useful for many valuable tasks. {\"instantiations\": [\"usefulness_of_aps_HIGH\", \"usefulness_of_aps_LOW\"]}\n                    - [Competitive_Dynamics]: Competitive pressures between AI developers. {\"instantiations\": [\"competitive_dynamics_STRONG\", \"competitive_dynamics_WEAK\"]}\n                - [Deception_By_AI]: AI systems deceiving humans about their true objectives. {\"instantiations\": [\"deception_by_ai_TRUE\", \"deception_by_ai_FALSE\"]}\n        - [Corrective_Feedback]: Human society implementing corrections after observing problems. {\"instantiations\": [\"corrective_feedback_EFFECTIVE\", \"corrective_feedback_INEFFECTIVE\"]}\n            - [Warning_Shots]: Observable failures in weaker systems before catastrophic risks. {\"instantiations\": [\"warning_shots_OBSERVED\", \"warning_shots_UNOBSERVED\"]}\n            - [Rapid_Capability_Escalation]: AI capabilities escalating very rapidly, allowing little time for correction. {\"instantiations\": [\"rapid_capability_escalation_TRUE\", \"rapid_capability_escalation_FALSE\"]}\n[Barriers_To_Understanding]: Difficulty in understanding the internal workings of advanced AI systems. {\"instantiations\": [\"barriers_to_understanding_HIGH\", \"barriers_to_understanding_LOW\"]}\n- [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"]}\n[Adversarial_Dynamics]: Potentially adversarial relationships between humans and power-seeking AI. {\"instantiations\": [\"adversarial_dynamics_TRUE\", \"adversarial_dynamics_FALSE\"]}\n- [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"]}\n[Stakes_Of_Error]: The escalating impact of mistakes with power-seeking AI systems. {\"instantiations\": [\"stakes_of_error_HIGH\", \"stakes_of_error_LOW\"]}\n- [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"]}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#title-amtair-prototype-demonstration-public-colab-notebook",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#title-amtair-prototype-demonstration-public-colab-notebook",
    "title": "1  ``` {.python .cell-code}",
    "section": "1.1 title: AMTAIR Prototype Demonstration (Public Colab Notebook)",
    "text": "1.1 title: AMTAIR Prototype Demonstration (Public Colab Notebook)\n:::\n\n\n# [AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)\n\n# AMTAIR Prototype: Automating Transformative AI Risk Modeling\n\n## Executive Summary\n\nThis notebook implements a prototype of the AMTAIR (Automating Transformative AI Risk Modeling) project, which addresses the critical coordination failure in AI governance by developing computational tools that automate the extraction of probabilistic world models from AI safety literature.\n\nThe prototype demonstrates the transformation pipeline from structured argument representations (ArgDown) to probabilistic Bayesian networks (BayesDown), enabling the visualization and analysis of causal relationships and probability distributions that underlie AI risk assessments and policy evaluations.\n\n### Purpose Within the Master's Thesis\n\nThis notebook serves as the technical implementation component of the Master's thesis \"Automating Transformative AI Risk Modeling: A Computational Approach to Policy Impact Evaluation.\" It demonstrates the feasibility of automating the extraction and formalization of world models, focusing on the core extraction pipeline and visualization capabilities that form the foundation for more sophisticated analysis.\n\n### Relevance to AI Governance\n\nThe coordination crisis in AI governance stems from different stakeholders working with incompatible assumptions, terminologies, and priorities. By making implicit models explicit through automated extraction and formalization, this work helps bridge communication gaps between technical researchers, policy specialists, and other stakeholders, contributing to more effective coordination in addressing existential risks from advanced AI.\n\n## Notebook Structure and Workflow\n\nThis notebook implements a multi-stage pipeline for transforming argument structures into interactive Bayesian network visualizations:\n\n1. **Environment Setup** (Sections 0.1-0.3): Establishes the technical environment with necessary libraries and data connections\n\n2. **Argument Extraction** (Sections 1.0-1.8): Processes source documents into structured ArgDown representations\n\n3. **Probability Integration** (Sections 2.0-2.8): Enhances ArgDown with probability information to create BayesDown\n\n4. **Data Transformation** (Section 3.0): Converts BayesDown into structured DataFrame format\n\n5. **Visualization and Analysis** (Section 4.0): Creates interactive Bayesian network visualizations\n\n6. **Archiving and Export** (Sections 5.0-6.0): Provides utilities for saving and sharing results\n\nThroughout this notebook, we use the classic rain-sprinkler-lawn example as a canonical test case, demonstrating how a simple causal scenario (rain and sprinkler use affecting wet grass) can be represented, processed, and visualized using our automated pipeline.\n\n## Project Context and Purpose\n\nThis notebook implements a prototype of the Automating Transformative AI Risk Modeling (AMTAIR) project, which addresses a critical coordination failure in AI governance by developing computational tools to automate the extraction of probabilistic world models from AI safety literature.\n\nThe coordination crisis in AI governance stems from different stakeholders (technical researchers, policy specialists, ethicists) operating with different terminologies, priorities, and implicit theories of change. This fragmentation systematically increases existential risk through safety gaps, resource misallocation, and capability-governance mismatches.\n\nThe AMTAIR project aims to bridge these divides by:\n1. Making implicit models explicit through automated extraction and formalization\n2. Enabling comparison across different worldviews\n3. Providing a common language for discussing probabilistic relationships\n4. Supporting policy evaluation across diverse scenarios\n\n## Notebook Overview and Pipeline\n\nThis notebook demonstrates the core extraction pipeline from structured argument representations (ArgDown) to probabilistic Bayesian networks (BayesDown), using the classic rain-sprinkler-lawn example as a canonical test case.\n\nThe pipeline consists of five main stages:\n1. **Environment Setup**: Libraries, GitHub repository access, and data loading\n2. **Argument Extraction**: Processing source documents into structured ArgDown format\n3. **Probability Integration**: Enhancing ArgDown with probabilistic information to create BayesDown\n4. **Data Transformation**: Converting BayesDown into structured DataFrame format\n5. **Visualization & Analysis**: Creating interactive Bayesian network visualizations\n\n## Connection to Master's Thesis\n\nThis notebook serves as the technical implementation component of the Master's thesis \"Automating Transformative AI Risk Modeling: A Computational Approach to Policy Impact Evaluation\" (see PY_Thesis_OutlineNDraft), demonstrating the feasibility of automating the process of extracting and formalizing world models from AI safety literature.\n\nThe thesis positions this work as a solution to the coordination crisis in AI governance, where the AMTAIR tools provide a crucial bridge between different stakeholder communities by creating formal representations that can be analyzed, compared, and used for policy evaluation.\n\nFor broader context on the project's motivation and placement within AI governance efforts, see PY_Post0.0 (\"The Missing Piece: Why We Need a Grand Strategy for AI\") and PY_AMTAIRDescription, which explain how this technical work contributes to the development of a comprehensive AI safety grand strategy.\n\n## Instructions --- How to use this notebook:\n\n\n1. **Import Libraries & Install Packages**: Run Section 0.1 to set up the necessary dependencies for data processing and visualization.\n\n2. **Connect to GitHub Repository & Load Data files**: Run Section 0.2 to establish connections to the data repository and load example datasets. This step retrieves sample ArgDown files and extracted data for demonstration.\n\n3. **Process Source Documents to ArgDown**: Sections 1.0-1.8 demonstrate the extraction of argument structures from source documents (such as PDFs) into ArgDown format, a markdown-like notation for structured arguments.\n\n4. **Convert ArgDown to BayesDown**: Sections 2.0-2.3 handle the transformation of ArgDown files into BayesDown format, which incorporates probabilistic information into the argument structure.\n\n5. **Extract Data into Structured Format**: Section 3.0 processes BayesDown format into structured database entries (CSV) that can be used for analysis.\n\n6. **Create and Analyze Bayesian Networks**: Section 4.0 demonstrates how to build Bayesian networks from the extracted data and provides tools for analyzing risk pathways.\n\n7. **Save and Export Results**: Sections 5.0-6.0 provide methods for archiving results and exporting visualizations.\n\n\n&gt;[AMTAIR Prototype Demonstration (Public Colab Notebook)](#scrollTo=lt8-AnebGUXr)\n\n&gt;[AMTAIR Prototype: Automating Transformative AI Risk Modeling](#scrollTo=iDy_leH6DJH_)\n\n&gt;&gt;[Executive Summary](#scrollTo=iDy_leH6DJH_)\n\n&gt;&gt;&gt;[Purpose Within the Master's Thesis](#scrollTo=iDy_leH6DJH_)\n\n&gt;&gt;&gt;[Relevance to AI Governance](#scrollTo=iDy_leH6DJH_)\n\n&gt;&gt;[Notebook Structure and Workflow](#scrollTo=iDy_leH6DJH_)\n\n&gt;&gt;[Project Context and Purpose](#scrollTo=Cm1JQGDYNJjf)\n\n&gt;&gt;[Notebook Overview and Pipeline](#scrollTo=Cm1JQGDYNJjf)\n\n&gt;&gt;[Connection to Master's Thesis](#scrollTo=Cm1JQGDYNJjf)\n\n&gt;&gt;[Instructions --- How to use this notebook:](#scrollTo=22NBzTxxsnfQ)\n\n&gt;&gt;[Key Concepts:](#scrollTo=NovjnOw6bzLi)\n\n&gt;&gt;[Example Workflow:](#scrollTo=NovjnOw6bzLi)\n\n&gt;&gt;[Troubleshooting:](#scrollTo=NovjnOw6bzLi)\n\n&gt;[Environment Setup and Data Access](#scrollTo=neYYoWhbNRIJ)\n\n&gt;[0.1 Prepare Colab/Python Environment --- Import Libraries & Packages](#scrollTo=GtVFO-s74vI_)\n\n&gt;&gt;[0.2 Connect to GitHub Repository](#scrollTo=2a3VR0fLhJow)\n\n&gt;&gt;[0.3 File Import](#scrollTo=y-ix4Rp5fE9m)\n\n&gt;[1.0 Sources (PDF's of Papers) to ArgDown (.md file)](#scrollTo=52XyPlte5HrU)\n\n&gt;[Sources to ArgDown: Structured Argument Extraction](#scrollTo=1-7O4KHfNU-e)\n\n&gt;&gt;[Process Overview](#scrollTo=1-7O4KHfNU-e)\n\n&gt;&gt;[What is ArgDown?](#scrollTo=1-7O4KHfNU-e)\n\n&gt;&gt;[1.1 Specify Source Document (e.g. PDF)](#scrollTo=ESKnZ_4f_a6y)\n\n&gt;&gt;[1.2 Generate ArgDown Extraction Prompt](#scrollTo=6ToQFra3_nl9)\n\n&gt;&gt;[1.3 Prepare LLM API Call](#scrollTo=pGv2KcZU_9Bn)\n\n&gt;&gt;[1.4 Make ArgDown Extraction LLM API Call](#scrollTo=i5xsDYnsAWC4)\n\n&gt;&gt;[1.5 Save ArgDown Extraction Response](#scrollTo=Lc2nMp8nAfeU)\n\n&gt;&gt;[1.6 Review and Check ArgDown.md File](#scrollTo=5HcCfqE4A0ht)\n\n&gt;&gt;[1.6.2 Check the Graph Structure with the ArgDown Sandbox Online](#scrollTo=gSpkvLbCC_PI)\n\n&gt;&gt;[1.7 Extract ArgDown Graph Information as DataFrame](#scrollTo=MAm0UKpeBvyr)\n\n&gt;&gt;[1.8 Store ArgDown Information as 'ArgDown.csv' file](#scrollTo=iFC6oiyICREn)\n\n&gt;[2.0 Probability Extractions: ArgDown (.csv) to BayesDown (.md + plugin JSON syntax)](#scrollTo=7SGB0XMp5VFq)\n\n&gt;[ArgDown to BayesDown: Adding Probability Information](#scrollTo=hWkmySZYNtzS)\n\n&gt;&gt;[Process Overview](#scrollTo=hWkmySZYNtzS)\n\n&gt;&gt;[What is BayesDown?](#scrollTo=hWkmySZYNtzS)\n\n&gt;&gt;[2.1 Probability Extraction Questions --- 'ArgDown.csv' to 'ArgDown_WithQuestions.csv'](#scrollTo=WcF2nHXBZru4)\n\n&gt;&gt;[2.2 'ArgDown_WithQuestions.csv' to 'BayesDownQuestions.md'](#scrollTo=-q9UOQ8yaBZn)\n\n&gt;&gt;[2.3 Generate BayesDown Probability Extraction Prompt](#scrollTo=Ux4OUCPue6Bu)\n\n&gt;&gt;[2.3.1 BayesDown Format Specification](#scrollTo=ivcnd2ml41Nv)\n\n&gt;&gt;&gt;[Core Structure](#scrollTo=ivcnd2ml41Nv)\n\n&gt;&gt;&gt;&gt;&gt;[Rain-Sprinkler-Lawn Example](#scrollTo=Fn72WmgVEOH0)\n\n&gt;&gt;[2.4 Prepare 2nd API call](#scrollTo=d4tB9WD-fIWZ)\n\n&gt;&gt;[2.5 Make BayesDown Probability Extraction API Call](#scrollTo=oPWto83lfN9Q)\n\n&gt;&gt;[2.6 Save BayesDown with Probability Estimates (.csv)](#scrollTo=L8NWpz8MfZ9_)\n\n&gt;&gt;[2.7 Review & Verify BayesDown Probability Estimates](#scrollTo=Q3PTtYgRfsLa)\n\n&gt;&gt;[2.7.2 Check the Graph Structure with the ArgDown Sandbox Online](#scrollTo=VwoAgBsafonh)\n\n&gt;&gt;[2.8 Extract BayesDown with Probability Estimates as Dataframe](#scrollTo=19KDn2mKf309)\n\n&gt;[3.0 Data Extraction: BayesDown (.md) to Database (.csv)](#scrollTo=vUSS00TCEpeW)\n\n&gt;[BayesDown to Structured Data: Network Construction](#scrollTo=vUSS00TCEpeW)\n\n&gt;&gt;[Extraction Pipeline Overview](#scrollTo=vUSS00TCEpeW)\n\n&gt;&gt;&gt;[Theoretical Foundation](#scrollTo=vUSS00TCEpeW)\n\n&gt;&gt;&gt;[Role in Thesis Research](#scrollTo=vUSS00TCEpeW)\n\n&gt;&gt;&gt;[3.1 ExtractBayesDown-Data_v1](#scrollTo=AFnu_1Ludahi)\n\n&gt;&gt;[3.1.2 Test BayesDown Extraction](#scrollTo=eUBJh8Qp4yd4)\n\n&gt;&gt;[3.1.2.2 Check the Graph Structure with the ArgDown Sandbox Online](#scrollTo=z4Hgs0ICDQyW)\n\n&gt;&gt;[3.3 Extraction](#scrollTo=mv8f4c4D3yJj)\n\n&gt;&gt;&gt;[3.3 Data-Post-Processing](#scrollTo=UcXf3fZ8dahj)\n\n&gt;&gt;&gt;[3.4 Download and save finished data frame as .csv file](#scrollTo=xTwPO_J-dahj)\n\n&gt;[4.0 Analysis & Inference: Bayesian Network Visualization](#scrollTo=t3zl7vKMECMg)\n\n&gt;&gt;[Bayesian Network Visualization Approach](#scrollTo=t3zl7vKMECMg)\n\n&gt;&gt;&gt;[Visualization Philosophy](#scrollTo=t3zl7vKMECMg)\n\n&gt;&gt;&gt;[Connection to AMTAIR Goals](#scrollTo=t3zl7vKMECMg)\n\n&gt;&gt;&gt;[Implementation Structure](#scrollTo=t3zl7vKMECMg)\n\n&gt;&gt;[Phase 1: Dependencies/Functions](#scrollTo=LSeSAPvtgIgU)\n\n&gt;&gt;[Phase 2: Node Classification and Styling Module](#scrollTo=byAExfek5yFU)\n\n&gt;&gt;[Phase 3: HTML Content Generation Module](#scrollTo=gnS3jFGU52OZ)\n\n&gt;&gt;[Phase 4: Main Visualization Function](#scrollTo=d2uyG0Pi571f)\n\n&gt;[Quickly check HTML Outputs](#scrollTo=bFtxTKmLElSF)\n\n&gt;[Conclusion: From Prototype to Production](#scrollTo=oatKYlKrOSiN)\n\n&gt;&gt;[Summary of Achievements](#scrollTo=oatKYlKrOSiN)\n\n&gt;&gt;[Limitations and Future Work](#scrollTo=oatKYlKrOSiN)\n\n&gt;&gt;[Connection to AMTAIR Project](#scrollTo=oatKYlKrOSiN)\n\n&gt;[6.0 Save Outputs](#scrollTo=kjbIj19epbrF)\n\n&gt;[Saving and Exporting Results](#scrollTo=0QqlN6dYpm4s)\n\n&gt;&gt;[Convert .ipynb Notebook to MarkDown](#scrollTo=pS6AhdiSCLw4)\n\n\n\n## Key Concepts:\n\n- **ArgDown**: A structured format for representing arguments, with hierarchical relationships between statements.\n- **BayesDown**: An extension of ArgDown that incorporates probabilistic information, allowing for Bayesian network construction.\n- **Extraction Pipeline**: The process of converting unstructured text to structured argument representations.\n- **Bayesian Networks**: Probabilistic graphical models that represent variables and their conditional dependencies.\n\n## Example Workflow:\n\n1. Load a sample ArgDown file from the repository\n2. Extract the hierarchical structure and relationships\n3. Add probabilistic information to create a BayesDown representation\n4. Generate a Bayesian network visualization\n5. Analyze conditional probabilities and risk pathways\n\n## Troubleshooting:\n\n- If connectivity issues occur, ensure you have access to the GitHub repository\n- For visualization errors, check that all required libraries are properly installed\n- When processing custom files, ensure they follow the expected format conventions\n\n# 0. Environment Setup and Data Access\n\nThis section establishes the technical foundation for the AMTAIR prototype by:\n1. Installing and importing necessary libraries\n2. Setting up access to the GitHub repository\n3. Loading example data files\n\nThe environment setup is designed to be run once per session, with flags to prevent redundant installations and imports. This section forms the basis for the subsequent extraction and analysis steps in the pipeline.\n\nThe key goal is to create a reproducible environment where the Bayesian network extraction and visualization can be performed consistently, with appropriate error handling and resource management.\n\n# 0.1 Prepare Colab/Python Environment --- Import Libraries & Packages\n\n::: {#cell-9 .cell quarto-private-1='{\"key\":\"colab\",\"value\":{\"base_uri\":\"https://localhost:8080/\"}}' outputId='b474c7e1-0e7e-47f3-a546-9321cff91a6e'}\n``` {.python .cell-code}\n# @title 0.1 --- Install & Import Libraries & Packages (One-Time Setup) ---\n\n\"\"\"\nBLOCK PURPOSE: Establishes the core technical environment for the AMTAIR prototype.\nSets up all required libraries for Bayesian network processing, visualization, and data manipulation.\nUses a flag-based approach to ensure setup only runs once per session, enhancing efficiency.\n\nThe setup follows a three-stage process:\n1. Install required packages not available in Colab by default\n2. Import all necessary libraries with error handling\n3. Set a global flag to prevent redundant execution\n\nDEPENDENCIES: Requires internet connection for package installation\nOUTPUTS: Global variable _setup_imports_done and loaded Python libraries\n\"\"\"\n\n#  Check if setup has already been completed in this session using environment flag\ntry:\n    # If this variable exists, setup was already done successfully\n    _setup_imports_done\n    print(\"✅ Libraries already installed and imported in this session. Skipping setup.\")\n\nexcept NameError:\n    print(\"⏳ Performing one-time library installation and imports...\")\n\n    # --- STAGE 1: Install required packages ---\n    # Install visualization and network analysis libraries\n    !pip install -q pyvis  # Network visualization library\n    !apt-get install pandoc -y  # Document conversion utility\n\n    # Install Google API and data processing packages\n    !pip install -q --upgrade gspread pandas google-auth google-colab  # Data manipulation and Google integration\n\n    # Install Bayesian network and probabilistic modeling tools\n    !pip install -q pgmpy  # Probabilistic graphical models library\n\n    # Install notebook conversion tools\n    !pip install -q nbconvert  # Often pre-installed, but ensures availability\n\n    print(\"   --&gt; Installations complete.\")\n\n    # --- STAGE 2: Import libraries with error handling ---\n    try:\n        # Network and HTTP libraries\n        import requests      # For making HTTP requests to APIs and GitHub\n        import io            # For handling in-memory file-like objects\n\n        # Data processing libraries\n        import pandas as pd  # For structured data manipulation\n        import numpy as np   # For numerical operations\n        import json          # For JSON parsing and serialization\n        import re            # For regular expression pattern matching\n\n        # Visualization libraries\n        import matplotlib.pyplot as plt  # For creating plots and charts\n        from IPython.display import HTML, display, Markdown  # For rich output in notebook\n\n        # --- Specialized libraries requiring installation ---\n        # Network analysis library\n        import networkx as nx  # For graph representation and analysis\n\n        # Probabilistic modeling libraries\n        from pgmpy.models import BayesianNetwork  # For Bayesian network structure\n        from pgmpy.factors.discrete import TabularCPD  # For conditional probability tables\n        from pgmpy.inference import VariableElimination  # For probabilistic inference\n\n        # Interactive network visualization\n        from pyvis.network import Network  # For interactive network visualization\n\n        # Output version information for key libraries\n        print(f\"      pandas version: {pd.__version__}\")\n        print(f\"      networkx version: {nx.__version__}\")\n        # Add others if specific versions are critical\n\n        print(\"   --&gt; Imports complete.\")\n\n        # --- STAGE 3: Set flag to indicate successful setup ---\n        _setup_imports_done = True\n        print(\"✅ One-time setup finished successfully.\")\n\n    except ImportError as e:\n        # Handle specific import failures\n        print(f\"❌ ERROR during import: {e}\")\n        print(\"   --&gt; Setup did not complete successfully. Please check installations.\")\n    except Exception as e:\n        # Handle unexpected errors\n        print(f\"❌ UNEXPECTED ERROR during setup: {e}\")\n        print(\"   --&gt; Setup did not complete successfully.\")\n\n# Environment is now ready for AMTAIR processing\n\n✅ Libraries already installed and imported in this session. Skipping setup.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#file-import",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#file-import",
    "title": "1  ``` {.python .cell-code}",
    "section": "1.3 0.3 File Import",
    "text": "1.3 0.3 File Import\n\n\nCode\n# @title\nmd_content\n\n\n'[Existential_Catastrophe]: The destruction of humanity\\'s long-term potential due to AI systems we\\'ve lost control over. {\"instantiations\": [\"existential_catastrophe_TRUE\", \"existential_catastrophe_FALSE\"]}\\n- [Human_Disempowerment]: Permanent and collective disempowerment of humanity relative to AI systems. {\"instantiations\": [\"human_disempowerment_TRUE\", \"human_disempowerment_FALSE\"]}\\n    - [Scale_Of_Power_Seeking]: Power-seeking by AI systems scaling to the point of permanently disempowering all of humanity. {\"instantiations\": [\"scale_of_power_seeking_TRUE\", \"scale_of_power_seeking_FALSE\"]}\\n        - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"]}\\n            - [APS_Systems]: AI systems with advanced capabilities, agentic planning, and strategic awareness. {\"instantiations\": [\"aps_systems_TRUE\", \"aps_systems_FALSE\"]}\\n                - [Advanced_AI_Capability]: AI systems that outperform humans on tasks that grant significant power in the world. {\"instantiations\": [\"advanced_ai_capability_TRUE\", \"advanced_ai_capability_FALSE\"]}\\n                - [Agentic_Planning]: AI systems making and executing plans based on world models to achieve objectives. {\"instantiations\": [\"agentic_planning_TRUE\", \"agentic_planning_FALSE\"]}\\n                - [Strategic_Awareness]: AI systems with models accurately representing power dynamics with humans. {\"instantiations\": [\"strategic_awareness_TRUE\", \"strategic_awareness_FALSE\"]}\\n            - [Difficulty_Of_Alignment]: It is harder to build aligned systems than misaligned systems that are attractive to deploy. {\"instantiations\": [\"difficulty_of_alignment_TRUE\", \"difficulty_of_alignment_FALSE\"]}\\n                - [Instrumental_Convergence]: AI systems with misaligned objectives tend to seek power as an instrumental goal. {\"instantiations\": [\"instrumental_convergence_TRUE\", \"instrumental_convergence_FALSE\"]}\\n                - [Problems_With_Proxies]: Optimizing for proxy objectives breaks correlations with intended goals. {\"instantiations\": [\"problems_with_proxies_TRUE\", \"problems_with_proxies_FALSE\"]}\\n                - [Problems_With_Search]: Search processes can yield systems pursuing different objectives than intended. {\"instantiations\": [\"problems_with_search_TRUE\", \"problems_with_search_FALSE\"]}\\n            - [Deployment_Decisions]: Decisions to deploy potentially misaligned AI systems. {\"instantiations\": [\"deployment_decisions_DEPLOY\", \"deployment_decisions_WITHHOLD\"]}\\n                - [Incentives_To_Build_APS]: Strong incentives to build and deploy APS systems. {\"instantiations\": [\"incentives_to_build_aps_STRONG\", \"incentives_to_build_aps_WEAK\"]}\\n                    - [Usefulness_Of_APS]: APS systems are very useful for many valuable tasks. {\"instantiations\": [\"usefulness_of_aps_HIGH\", \"usefulness_of_aps_LOW\"]}\\n                    - [Competitive_Dynamics]: Competitive pressures between AI developers. {\"instantiations\": [\"competitive_dynamics_STRONG\", \"competitive_dynamics_WEAK\"]}\\n                - [Deception_By_AI]: AI systems deceiving humans about their true objectives. {\"instantiations\": [\"deception_by_ai_TRUE\", \"deception_by_ai_FALSE\"]}\\n        - [Corrective_Feedback]: Human society implementing corrections after observing problems. {\"instantiations\": [\"corrective_feedback_EFFECTIVE\", \"corrective_feedback_INEFFECTIVE\"]}\\n            - [Warning_Shots]: Observable failures in weaker systems before catastrophic risks. {\"instantiations\": [\"warning_shots_OBSERVED\", \"warning_shots_UNOBSERVED\"]}\\n            - [Rapid_Capability_Escalation]: AI capabilities escalating very rapidly, allowing little time for correction. {\"instantiations\": [\"rapid_capability_escalation_TRUE\", \"rapid_capability_escalation_FALSE\"]}\\n[Barriers_To_Understanding]: Difficulty in understanding the internal workings of advanced AI systems. {\"instantiations\": [\"barriers_to_understanding_HIGH\", \"barriers_to_understanding_LOW\"]}\\n- [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"]}\\n[Adversarial_Dynamics]: Potentially adversarial relationships between humans and power-seeking AI. {\"instantiations\": [\"adversarial_dynamics_TRUE\", \"adversarial_dynamics_FALSE\"]}\\n- [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"]}\\n[Stakes_Of_Error]: The escalating impact of mistakes with power-seeking AI systems. {\"instantiations\": [\"stakes_of_error_HIGH\", \"stakes_of_error_LOW\"]}\\n- [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"]}\\n'",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#process-overview",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#process-overview",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.1 Process Overview",
    "text": "3.1 Process Overview\nThis section implements the first major stage of the AMTAIR pipeline: transforming source documents (such as research papers, blog posts, or expert analyses) into structured argument representations using the ArgDown format.\nArgDown is a markdown-like notation for representing arguments in a hierarchical structure. In the context of AMTAIR, it serves as the first step toward creating formal Bayesian networks by: 1. Identifying key variables/statements in the text 2. Capturing their hierarchical relationships 3. Preserving their descriptive content 4. Defining their possible states (instantiations)\nThe extraction process uses Large Language Models (LLMs) to identify the structure and relationships in the text, though in this notebook we focus on processing pre-formatted examples rather than performing the full extraction from raw text.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#what-is-argdown",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#what-is-argdown",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.2 What is ArgDown?",
    "text": "3.2 What is ArgDown?\nArgDown uses a simple syntax where: - Statements are represented as [Statement]: Description - Relationships are indicated with + symbols and indentation - Metadata is added in JSON format, including possible states of each variable\nFor example:\n[MainClaim]: Description of the main claim. {\"instantiations\": [\"claim_TRUE\", \"claim_FALSE\"]}\n\n + [SupportingEvidence]: Description of evidence. {\"instantiations\": [\"evidence_TRUE\", \"evidence_FALSE\"]}\nThis structure will later be enhanced with probability information to create BayesDown, which can be transformed into a Bayesian network for analysis and visualization.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#specify-source-document-e.g.-pdf",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#specify-source-document-e.g.-pdf",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.3 1.1 Specify Source Document (e.g. PDF)",
    "text": "3.3 1.1 Specify Source Document (e.g. PDF)\nReview the source document, ensure it is suitable for API call and upload to / store it in the correct location.\n\n\nCode\n# @title 1.1.a) --- MTAIR Online Model (Analytica) ---\n\nfrom IPython.display import IFrame\n\nIFrame(src=\"https://acp.analytica.com/view0?invite=4560&code=3000289064591444815\", width=\"100%\", height=\"900px\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#generate-argdown-extraction-prompt",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#generate-argdown-extraction-prompt",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.4 1.2 Generate ArgDown Extraction Prompt",
    "text": "3.4 1.2 Generate ArgDown Extraction Prompt\nGenerate Extraction Prompt\n\n\nCode\n# @title 1.2.0 --- Prompt Template Function Definitions ---\n\n\"\"\"\nBLOCK PURPOSE: Defines a flexible template system for LLM prompts used in the extraction pipeline.\n\nThis block implements two key classes:\n1. PromptTemplate: A simple template class supporting variable substitution for dynamic prompts\n2. PromptLibrary: A collection of pre-defined prompt templates for different extraction tasks\n\nThese templates are used in the ArgDown extraction and BayesDown probability extraction\nstages of the pipeline, providing consistent and well-structured prompts to the LLMs.\n\nDEPENDENCIES: string.Template for variable substitution\nOUTPUTS: PromptTemplate and PromptLibrary classes\n\"\"\"\n\nfrom string import Template\nfrom typing import Dict, Optional, Union, List\n\nclass PromptTemplate:\n    \"\"\"Template system for LLM prompts with variable substitution\"\"\"\n\n    def __init__(self, template: str):\n        \"\"\"Initialize with template string using $variable format\"\"\"\n        self.template = Template(template)\n\n    def format(self, **kwargs) -&gt; str:\n        \"\"\"Substitute variables in the template\"\"\"\n        return self.template.safe_substitute(**kwargs)\n\n    @classmethod\n    def from_file(cls, filepath: str) -&gt; 'PromptTemplate':\n        \"\"\"Load template from a file\"\"\"\n        with open(filepath, 'r') as f:\n            template = f.read()\n        return cls(template)\n\nclass PromptLibrary:\n    \"\"\"Collection of prompt templates for different extraction tasks\"\"\"\n\n    # ArgDown extraction prompt - transforms source text into structured argument map\n    ARGDOWN_EXTRACTION = PromptTemplate(\"\"\"\nYou are participating in the AMTAIR (Automating Transformative AI Risk Modeling) project and you are tasked with converting natural language arguments into ArgDown syntax by extracting and formalizing causal world models from unstructured text.\nYour specific task is to extract the implicit causal model from the provided document in structured ArgDown format.\n\n## Epistemic Foundation & Purpose\n\nThis extraction represents one possible interpretation of the implicit causal model in the document. Multiple extractions from the same text help reveal patterns of convergence (where the model is clearly articulated) and divergence (where the model contains ambiguities). This approach acknowledges that expert texts often contain implicit rather than explicit causal models.\n\nYour role is to reveal the causal structure already present in the author's thinking, maintaining epistemic humility about your interpretation while adhering strictly to the required format.\n\n## ArgDown Format Specification\n\n### Core Syntax\n\nArgDown represents causal relationships using a hierarchical structure:\n\n1. Variables appear in square brackets with descriptive text:\n   `[Variable_Name]: Description of the variable.`\n\n2. Causal relationships use indentation (2 spaces per level) and '+' symbols:\n\n[Effect]: Description of effect. + [Cause]: Description of cause. + [Deeper_Cause]: Description of deeper cause.\n\n3. Causality flows from bottom (more indented) to top (less indented):\n- More indented variables (causes) influence less indented variables (effects)\n- The top-level variable is the ultimate effect or outcome\n- Deeper indentation levels represent root causes or earlier factors\n\n4. Each variable must include JSON metadata with possible states (instantiations):\n`[Variable]: Description. {\"instantiations\": [\"variable_STATE1\", \"variable_STATE2\"]}`\n\n### JSON Metadata Format\n\nThe JSON metadata must follow this exact structure:\n\n```json\n{\"instantiations\": [\"variable_STATE1\", \"variable_STATE2\"]}\n\nRequirements:\n* Double quotes (not single) around field names and string values\n* Square brackets enclosing the instantiations array\n* Comma separation between array elements\n* No trailing comma after the last element\n* Must be valid JSON syntax that can be parsed by standard JSON parsers\n\nFor binary variables (most common case):\n{\"instantiations\": [\"variable_TRUE\", \"variable_FALSE\"]}\n\nFor multi-state variables (when clearly specified in the text):\n{\"instantiations\": [\"variable_HIGH\", \"variable_MEDIUM\", \"variable_LOW\"]}\n\nThe metadata must appear on the same line as the variable definition, after the description.\n## Complex Structural Patterns\n### Variables Influencing Multiple Effects\nThe same variable can appear multiple times in different places in the hierarchy if it influences multiple effects:\n[Effect1]: First effect description. {\"instantiations\": [\"effect1_TRUE\", \"effect1_FALSE\"]}\n  + [Cause_A]: Description of cause A. {\"instantiations\": [\"cause_a_TRUE\", \"cause_a_FALSE\"]}\n\n[Effect2]: Second effect description. {\"instantiations\": [\"effect2_TRUE\", \"effect2_FALSE\"]}\n  + [Cause_A]\n  + [Cause_B]: Description of cause B. {\"instantiations\": [\"cause_b_TRUE\", \"cause_b_FALSE\"]}\n\n### Multiple Causes of the Same Effect\nMultiple causes can influence the same effect by being listed at the same indentation level:\n[Effect]: Description of effect. {\"instantiations\": [\"effect_TRUE\", \"effect_FALSE\"]}\n  + [Cause1]: Description of first cause. {\"instantiations\": [\"cause1_TRUE\", \"cause1_FALSE\"]}\n  + [Cause2]: Description of second cause. {\"instantiations\": [\"cause2_TRUE\", \"cause2_FALSE\"]}\n    + [Deeper_Cause]: A cause that influences Cause2. {\"instantiations\": [\"deeper_cause_TRUE\", \"deeper_cause_FALSE\"]}\n\n### Causal Chains\nCausal chains are represented through multiple levels of indentation:\n[Ultimate_Effect]: The final outcome. {\"instantiations\": [\"ultimate_effect_TRUE\", \"ultimate_effect_FALSE\"]}\n  + [Intermediate_Effect]: A mediating variable. {\"instantiations\": [\"intermediate_effect_TRUE\", \"intermediate_effect_FALSE\"]}\n    + [Root_Cause]: The initial cause. {\"instantiations\": [\"root_cause_TRUE\", \"root_cause_FALSE\"]}\n  + [2nd_Intermediate_Effect]: A mediating variable. {\"instantiations\": [\"intermediate_effect_TRUE\", \"intermediate_effect_FALSE\"]}\n\n\n### Common Cause of Multiple Variables\nA common cause affecting multiple variables is represented by referencing the same variable in multiple places:\n[Effect1]: First effect description. {\"instantiations\": [\"effect1_TRUE\", \"effect1_FALSE\"]}\n  + [Common_Cause]: Description of common cause. {\"instantiations\": [\"common_cause_TRUE\", \"common_cause_FALSE\"]}\n\n[Effect2]: Second effect description. {\"instantiations\": [\"effect2_TRUE\", \"effect2_FALSE\"]}\n  + [Common_Cause]\n\n## Detailed Extraction Workflow\nPlease follow this step-by-step process, documenting your reasoning in XML tags:\n&lt;analysis&gt;\nFirst, conduct a holistic analysis of the document:\n1. Identify the main subject matter or domain\n2. Note key concepts, variables, and factors discussed\n3. Pay attention to language indicating causal relationships (causes, affects, influences, depends on, etc.)\n4. Look for the ultimate outcomes or effects that are the focus of the document\n5. Record your general understanding of the document's implicit causal structure\n&lt;/analysis&gt;\n&lt;variable_identification&gt;\nNext, identify and list the key variables in the causal model:\n* Focus on factors that are discussed as having an influence or being influenced\n* For each variable:\n  * Create a descriptive name in [square_brackets]\n  * Write a concise description based directly on the text\n  * Determine possible states (usually binary TRUE/FALSE unless clearly specified)\n* Distinguish between:\n  * Outcome variables (effects the author is concerned with)\n  * Intermediate variables (both causes and effects in chains)\n  * Root cause variables (exogenous factors in the model)\n* List all identified variables with their descriptions and possible states\n&lt;/variable_identification&gt;\n\n&lt;causal_structure&gt;\nThen, determine the causal relationships between variables:\n* For each variable, identify what factors influence it\n* Note the direction of causality (what causes what)\n* Look for mediating variables in causal chains\n* Identify common causes of multiple effects\n* Capture feedback loops if present (though they must be represented as DAGs)\n* Map out the hierarchical structure of the causal model\n&lt;/causal_structure&gt;\n\n&lt;format_conversion&gt;\nNow, convert your analysis into proper ArgDown format:\n* Start with the ultimate outcome variables at the top level\n* Place direct causes indented below with \\+ symbols\n* Continue with deeper causes at further indentation levels\n* Add variable descriptions and instantiations metadata\n* Ensure variables appearing in multiple places have consistent names\n* Check that the entire structure forms a valid directed acyclic graph\n&lt;/format_conversion&gt;\n\n&lt;validation&gt;\n\nFinally, review your extraction for quality and format correctness:\n1. Verify all variables have properly formatted metadata\n2. Check that indentation properly represents causal direction\n3. Confirm the extraction accurately reflects the document's implicit model\n4. Ensure no cycles exist in the causal structure\n5. Verify that variables referenced multiple times are consistent\n6. Check that the extraction would be useful for subsequent analysis\n\n&lt;/validation&gt;\n\n\n## Source Document Analysis Guidance\nWhen analyzing the source document:\n* Focus on revealing the author's own causal model, not imposing an external framework\n* Maintain the author's terminology where possible\n* Look for both explicit statements of causality and implicit assumptions\n* Pay attention to the relative importance the author assigns to different factors\n* Notice where the author expresses certainty versus uncertainty\n* Consider the level of granularity appropriate to the document's own analysis\n\nRemember that your goal is to make the implicit model explicit, not to evaluate or improve it.\nThe value lies in accurately representing the author's perspective, even if you might personally disagree or see limitations in their model.\n\n\"\"\")\n\n    # BayesDown probability extraction prompt - enhances ArgDown with probability information\n    BAYESDOWN_EXTRACTION = PromptTemplate(\"\"\"\nYou are an expert in probabilistic reasoning and Bayesian networks. Your task is to extend the provided ArgDown structure with probability information, creating a BayesDown representation.\n\nFor each statement in the ArgDown structure, you need to:\n1. Estimate prior probabilities for each possible state\n2. Estimate conditional probabilities given parent states\n3. Maintain the original structure and relationships\n\nHere is the format to follow:\n[Node]: Description. { \"instantiations\": [\"node_TRUE\", \"node_FALSE\"], \"priors\": { \"p(node_TRUE)\": \"0.7\", \"p(node_FALSE)\": \"0.3\" }, \"posteriors\": { \"p(node_TRUE|parent_TRUE)\": \"0.9\", \"p(node_TRUE|parent_FALSE)\": \"0.4\", \"p(node_FALSE|parent_TRUE)\": \"0.1\", \"p(node_FALSE|parent_FALSE)\": \"0.6\" } }\n [Parent]: Parent description. {...}\n\n\nHere are the specific probability questions to answer:\n$questions\n\nArgDown structure to enhance:\n$argdown\n\nProvide the complete BayesDown representation with probabilities:\n\"\"\")\n\n    @classmethod\n    def get_template(cls, template_name: str) -&gt; PromptTemplate:\n        \"\"\"Get a prompt template by name\"\"\"\n        if hasattr(cls, template_name):\n            return getattr(cls, template_name)\n        else:\n            raise ValueError(f\"Template not found: {template_name}\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#prepare-llm-api-call",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#prepare-llm-api-call",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.5 1.3 Prepare LLM API Call",
    "text": "3.5 1.3 Prepare LLM API Call\nCombine Systemprompt + API Specifications + ArgDown Instructions + Prompt + Source PDF for API Call\n\n\nCode\n# @title 1.3.0 --- Provider-Agnostic LLM API Interface ---\n\n\"\"\"\nBLOCK PURPOSE: Provides a unified interface for interacting with different LLM providers.\n\nThis block implements a flexible, provider-agnostic system for making LLM API calls:\n1. Base abstract class (LLMProvider) defining the common interface\n2. Implementation classes for specific providers (OpenAI and Anthropic)\n3. Factory class for creating appropriate provider instances\n\nThis abstraction allows the extraction pipeline to work with different LLM providers\nwithout changing the core code, supporting both current and future LLM backends.\n\nDEPENDENCIES: requests for API calls, os for environment variables, abstract base classes\nOUTPUTS: LLMProvider abstract class and concrete implementations for OpenAI and Anthropic\n\"\"\"\n\nimport os\nimport json\nimport time\nimport requests\nfrom abc import ABC, abstractmethod\nfrom typing import Dict, List, Optional, Union, Any\nfrom dataclasses import dataclass\n\n@dataclass\nclass LLMResponse:\n    \"\"\"Standard response object for LLM completions\"\"\"\n    content: str            # The generated text response\n    model: str              # The model used for generation\n    usage: Dict[str, int]   # Token usage statistics\n    raw_response: Dict[str, Any]  # Complete provider-specific response\n    created_at: float = time.time()  # Timestamp of response creation\n\nclass LLMProvider(ABC):\n    \"\"\"Abstract base class for LLM providers\"\"\"\n\n    @abstractmethod\n    def complete(self,\n                prompt: str,\n                system_prompt: Optional[str] = None,\n                temperature: float = 0.7,\n                max_tokens: int = 4000) -&gt; LLMResponse:\n        \"\"\"Generate a completion from the LLM\"\"\"\n        pass\n\n    @abstractmethod\n    def get_available_models(self) -&gt; List[str]:\n        \"\"\"Return a list of available models from this provider\"\"\"\n        pass\n\nclass OpenAIProvider(LLMProvider):\n    \"\"\"OpenAI API implementation\"\"\"\n\n    def __init__(self, api_key: Optional[str] = None, organization: Optional[str] = None):\n        \"\"\"Initialize with API key from args or environment\"\"\"\n        self.api_key = api_key or os.environ.get(\"OPENAI_API_KEY\")\n        if not self.api_key:\n            raise ValueError(\"OpenAI API key is required. Provide as argument or set OPENAI_API_KEY environment variable.\")\n\n        self.organization = organization or os.environ.get(\"OPENAI_ORGANIZATION\")\n        self.api_base = \"https://api.openai.com/v1\"\n\n    def complete(self,\n                prompt: str,\n                system_prompt: Optional[str] = None,\n                model: str = \"gpt-4-turbo\",\n                temperature: float = 0.7,\n                max_tokens: int = 4000) -&gt; LLMResponse:\n        \"\"\"Generate a completion using OpenAI's API\"\"\"\n\n        # Prepare request headers\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {self.api_key}\"\n        }\n\n        if self.organization:\n            headers[\"OpenAI-Organization\"] = self.organization\n\n        # Create message structure\n        messages = []\n        if system_prompt:\n            messages.append({\"role\": \"system\", \"content\": system_prompt})\n\n        messages.append({\"role\": \"user\", \"content\": prompt})\n\n        # Prepare request data\n        data = {\n            \"model\": model,\n            \"messages\": messages,\n            \"temperature\": temperature,\n            \"max_tokens\": max_tokens\n        }\n\n        # Make API call\n        response = requests.post(\n            f\"{self.api_base}/chat/completions\",\n            headers=headers,\n            json=data\n        )\n\n        response.raise_for_status()\n        result = response.json()\n\n        # Transform into standardized response format\n        return LLMResponse(\n            content=result[\"choices\"][0][\"message\"][\"content\"],\n            model=result[\"model\"],\n            usage=result[\"usage\"],\n            raw_response=result\n        )\n\n    def get_available_models(self) -&gt; List[str]:\n        \"\"\"Return a list of available OpenAI models\"\"\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\"\n        }\n\n        if self.organization:\n            headers[\"OpenAI-Organization\"] = self.organization\n\n        response = requests.get(\n            f\"{self.api_base}/models\",\n            headers=headers\n        )\n\n        response.raise_for_status()\n        models = response.json()[\"data\"]\n        return [model[\"id\"] for model in models]\n\nclass AnthropicProvider(LLMProvider):\n    \"\"\"Anthropic Claude API implementation\"\"\"\n\n    def __init__(self, api_key: Optional[str] = None):\n        \"\"\"Initialize with API key from args or environment\"\"\"\n        self.api_key = api_key or os.environ.get(\"ANTHROPIC_API_KEY\")\n        if not self.api_key:\n            raise ValueError(\"Anthropic API key is required. Provide as argument or set ANTHROPIC_API_KEY environment variable.\")\n\n        self.api_base = \"https://api.anthropic.com/v1\"\n\n    def complete(self,\n                prompt: str,\n                system_prompt: Optional[str] = None,\n                model: str = \"claude-3-opus-20240229\",\n                temperature: float = 0.7,\n                max_tokens: int = 4000) -&gt; LLMResponse:\n        \"\"\"Generate a completion using Anthropic's API\"\"\"\n\n        # Prepare request headers\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-API-Key\": self.api_key,\n            \"anthropic-version\": \"2023-06-01\"\n        }\n\n        # Prepare request data in Anthropic-specific format\n        data = {\n            \"model\": model,\n            \"messages\": [{\"role\": \"user\", \"content\": prompt}],\n            \"temperature\": temperature,\n            \"max_tokens\": max_tokens\n        }\n\n        # Add system prompt if provided (Anthropic uses a different format)\n        if system_prompt:\n            data[\"system\"] = system_prompt\n\n        # Make API call\n        response = requests.post(\n            f\"{self.api_base}/messages\",\n            headers=headers,\n            json=data\n        )\n\n        response.raise_for_status()\n        result = response.json()\n\n        # Transform into standardized response format\n        return LLMResponse(\n            content=result[\"content\"][0][\"text\"],\n            model=result[\"model\"],\n            usage={\"prompt_tokens\": result.get(\"usage\", {}).get(\"input_tokens\", 0),\n                   \"completion_tokens\": result.get(\"usage\", {}).get(\"output_tokens\", 0)},\n            raw_response=result\n        )\n\n    def get_available_models(self) -&gt; List[str]:\n        \"\"\"Return a list of available Anthropic models\"\"\"\n        # Anthropic doesn't have a models endpoint, so we return a static list\n        return [\n            \"claude-3-opus-20240229\",\n            \"claude-3-sonnet-20240229\",\n            \"claude-3-haiku-20240307\"\n        ]\n\nclass LLMFactory:\n    \"\"\"Factory for creating LLM providers\"\"\"\n\n    @staticmethod\n    def create_provider(provider_name: str, **kwargs) -&gt; LLMProvider:\n        \"\"\"Create and return an LLM provider instance\"\"\"\n        if provider_name.lower() == \"openai\":\n            return OpenAIProvider(**kwargs)\n        elif provider_name.lower() == \"anthropic\":\n            return AnthropicProvider(**kwargs)\n        else:\n            raise ValueError(f\"Unsupported provider: {provider_name}\")\n\n\n\n\nCode\n# @title 1.3.0 --- API Call Function Definitions ---\n\n\"\"\"\nBLOCK PURPOSE: Provides core functions for extracting ArgDown representations from text using LLMs.\n\nThis block implements the main extraction functionality:\n1. extract_argdown_from_text: Sends text to LLM to extract structured ArgDown representation\n2. validate_argdown: Verifies the extracted ArgDown for correctness and completeness\n3. process_source_document: Handles source files (PDF, TXT, MD) and manages extraction\n4. save_argdown_extraction: Saves extraction results with metadata for further processing\n\nThese functions form the first stage of the AMTAIR pipeline, transforming\nunstructured text into structured argument representations.\n\nDEPENDENCIES: LLMFactory from previous cell, re for pattern matching\nOUTPUTS: Functions for ArgDown extraction, validation, and storage\n\"\"\"\n\ndef extract_argdown_from_text(text: str, provider_name: str = \"openai\", model: str = None) -&gt; str:\n    \"\"\"\n    Extract ArgDown representation from text using LLM\n\n    Args:\n        text: The source text to extract arguments from\n        provider_name: The LLM provider to use (openai or anthropic)\n        model: Specific model to use, or None for default\n\n    Returns:\n        Extracted ArgDown representation\n    \"\"\"\n    # Create LLM provider\n    provider = LLMFactory.create_provider(provider_name)\n\n    # Get extraction prompt\n    prompt_template = PromptLibrary.get_template(\"ARGDOWN_EXTRACTION\")\n    prompt = prompt_template.format(text=text)\n\n    # Set model-specific parameters\n    if provider_name.lower() == \"openai\":\n        model = model or \"gpt-4-turbo\"\n        temperature = 0.3  # Lower temperature for more deterministic extraction\n        max_tokens = 4000\n    elif provider_name.lower() == \"anthropic\":\n        model = model or \"claude-3-opus-20240229\"\n        temperature = 0.2\n        max_tokens = 4000\n\n    # Call the LLM\n    system_prompt = \"You are an expert in argument mapping and causal reasoning.\"\n    response = provider.complete(\n        prompt=prompt,\n        system_prompt=system_prompt,\n        model=model,\n        temperature=temperature,\n        max_tokens=max_tokens\n    )\n\n    # Extract the ArgDown content (remove any markdown code blocks if present)\n    argdown_content = response.content\n    if \"```\" in argdown_content:\n        # Extract content between code blocks if present\n        import re\n        matches = re.findall(r\"```(?:argdown)?\\n([\\s\\S]*?)\\n```\", argdown_content)\n        if matches:\n            argdown_content = matches[0]\n\n    return argdown_content\n\ndef validate_argdown(argdown_text: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Validate ArgDown representation to ensure it's well-formed\n\n    Args:\n        argdown_text: ArgDown representation to validate\n\n    Returns:\n        Dictionary with validation results\n    \"\"\"\n    # Initialize validation results\n    results = {\n        \"is_valid\": True,\n        \"errors\": [],\n        \"warnings\": [],\n        \"stats\": {\n            \"node_count\": 0,\n            \"relationship_count\": 0,\n            \"max_depth\": 0\n        }\n    }\n\n    # Basic syntax checks\n    lines = argdown_text.split(\"\\n\")\n    node_pattern = r'\\[(.*?)\\]:'\n    instantiation_pattern = r'{\"instantiations\":'\n\n    # Track nodes and relationships\n    nodes = set()\n    relationships = []\n    current_depth = 0\n    max_depth = 0\n\n    for i, line in enumerate(lines):\n        # Skip empty lines\n        if not line.strip():\n            continue\n\n        # Calculate indentation depth\n        indent = 0\n        if '+' in line:\n            indent = line.find('+') // 2\n\n        current_depth = indent\n        max_depth = max(max_depth, current_depth)\n\n        # Check for node definitions\n        import re\n        node_matches = re.findall(node_pattern, line)\n        if node_matches:\n            node = node_matches[0]\n            nodes.add(node)\n            results[\"stats\"][\"node_count\"] += 1\n\n            # Check for instantiations\n            if instantiation_pattern not in line:\n                results[\"warnings\"].append(f\"Line {i+1}: Node '{node}' is missing instantiations metadata\")\n\n        # Check parent-child relationships\n        if indent &gt; 0 and '+' in line and node_matches:\n            # This is a child node; find its parent\n            parent_indent = indent - 1\n            j = i - 1\n            while j &gt;= 0:\n                if '+' in lines[j] and lines[j].find('+') // 2 == parent_indent:\n                    parent_matches = re.findall(node_pattern, lines[j])\n                    if parent_matches:\n                        parent = parent_matches[0]\n                        relationships.append((parent, node))\n                        results[\"stats\"][\"relationship_count\"] += 1\n                        break\n                j -= 1\n\n    results[\"stats\"][\"max_depth\"] = max_depth\n\n    # If we didn't find any nodes, that's a problem\n    if results[\"stats\"][\"node_count\"] == 0:\n        results[\"is_valid\"] = False\n        results[\"errors\"].append(\"No valid nodes found in ArgDown representation\")\n\n    return results\n\ndef process_source_document(file_path: str, provider_name: str = \"openai\") -&gt; Dict[str, Any]:\n    \"\"\"\n    Process a source document to extract ArgDown representation\n\n    Args:\n        file_path: Path to the source document\n        provider_name: The LLM provider to use\n\n    Returns:\n        Dictionary with extraction results\n    \"\"\"\n    # Load the source document\n    text = \"\"\n    if file_path.endswith(\".pdf\"):\n        # PDF handling requires additional libraries\n        try:\n            import PyPDF2\n            with open(file_path, 'rb') as file:\n                reader = PyPDF2.PdfReader(file)\n                text = \"\"\n                for page in reader.pages:\n                    text += page.extract_text() + \"\\n\"\n        except ImportError:\n            raise ImportError(\"PyPDF2 is required for PDF processing. Install it with: pip install PyPDF2\")\n    elif file_path.endswith(\".txt\"):\n        with open(file_path, 'r') as file:\n            text = file.read()\n    elif file_path.endswith(\".md\"):\n        with open(file_path, 'r') as file:\n            text = file.read()\n    else:\n        raise ValueError(f\"Unsupported file format: {file_path}\")\n\n    # Extract ArgDown\n    argdown_content = extract_argdown_from_text(text, provider_name)\n\n    # Validate the extraction\n    validation_results = validate_argdown(argdown_content)\n\n    # Prepare results\n    results = {\n        \"source_path\": file_path,\n        \"extraction_timestamp\": time.time(),\n        \"argdown_content\": argdown_content,\n        \"validation\": validation_results,\n        \"provider\": provider_name\n    }\n\n    return results\n\ndef save_argdown_extraction(results: Dict[str, Any], output_path: str) -&gt; None:\n    \"\"\"\n    Save ArgDown extraction results\n\n    Args:\n        results: Extraction results dictionary\n        output_path: Path to save the results\n    \"\"\"\n    # Save the ArgDown content\n    with open(output_path, 'w') as file:\n        file.write(results[\"argdown_content\"])\n\n    # Save metadata alongside\n    metadata_path = output_path.replace('.md', '_metadata.json')\n    metadata = {\n        \"source_path\": results[\"source_path\"],\n        \"extraction_timestamp\": results[\"extraction_timestamp\"],\n        \"validation\": results[\"validation\"],\n        \"provider\": results[\"provider\"]\n    }\n\n    with open(metadata_path, 'w') as file:\n        json.dump(metadata, file, indent=2)\n\n\n\n\nCode\n# @title 1.3 --- Prepare LLM API Call ---\n\n\"\"\"\nBLOCK PURPOSE: Prepares parameters for LLM API calls used in ArgDown extraction.\n\nThis function handles the configuration for LLM API calls, including:\n1. Source document path validation\n2. LLM provider selection and validation\n3. Model selection with appropriate defaults\n\nThe function returns a configuration dictionary that can be passed to the\nextraction function in the next step of the pipeline.\n\nDEPENDENCIES: None (uses standard Python functionality)\nOUTPUTS: Dictionary with extraction configuration parameters\n\"\"\"\n\ndef prepare_extraction_call(source_path, provider_name=\"openai\", model=None):\n    \"\"\"\n    Prepare the LLM API call for ArgDown extraction\n\n    Args:\n        source_path (str): Path to the source document to extract from\n        provider_name (str): LLM provider to use ('openai' or 'anthropic')\n        model (str, optional): Specific model to use. Defaults to None (uses provider's default).\n\n    Returns:\n        dict: Configuration parameters for extraction\n\n    Raises:\n        ValueError: If an unsupported provider is specified\n    \"\"\"\n    # Load the source document\n    print(f\"Processing source document: {source_path}\")\n\n    # Determine provider and model\n    provider = provider_name.lower()\n    if provider not in [\"openai\", \"anthropic\"]:\n        raise ValueError(f\"Unsupported provider: {provider}. Use 'openai' or 'anthropic'.\")\n\n    # Set default model if none provided\n    if model is None:\n        if provider == \"openai\":\n            model = \"gpt-4-turbo\"\n        elif provider == \"anthropic\":\n            model = \"claude-3-opus-20240229\"\n\n    # Print configuration\n    print(f\"Using provider: {provider}\")\n    print(f\"Selected model: {model}\")\n\n    return {\n        \"source_path\": source_path,\n        \"provider\": provider,\n        \"model\": model\n    }\n\n# Usage example:\nsource_path = \"example_document.pdf\"  # Replace with actual document path\nextraction_config = prepare_extraction_call(source_path, provider_name=\"openai\")\n\n\nProcessing source document: example_document.pdf\nUsing provider: openai\nSelected model: gpt-4-turbo",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#make-argdown-extraction-llm-api-call",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#make-argdown-extraction-llm-api-call",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.6 1.4 Make ArgDown Extraction LLM API Call",
    "text": "3.6 1.4 Make ArgDown Extraction LLM API Call\n\n\nCode\n# @title 1.4 --- Make ArgDown Extraction LLM API Call ---\n\n\"\"\"\nBLOCK PURPOSE: Executes the ArgDown extraction process using the LLM API.\n\nThis function performs the actual extraction of ArgDown representations from source documents:\n1. Takes the configuration parameters prepared in the previous step\n2. Processes the document using the LLM API\n3. Validates the extraction results\n4. Provides timing and statistics about the extraction\n\nThe extraction process transforms unstructured text into a structured argument\nrepresentation following the ArgDown syntax defined in the AMTAIR project.\n\nDEPENDENCIES: process_source_document function from previous cells\nOUTPUTS: Dictionary with extraction results including ArgDown content and validation info\n\"\"\"\n\ndef execute_extraction(extraction_config):\n    \"\"\"\n    Execute the ArgDown extraction using the LLM API\n\n    Args:\n        extraction_config (dict): Configuration parameters for extraction\n\n    Returns:\n        dict: Extraction results including ArgDown content and validation info\n\n    Raises:\n        Exception: For any errors during extraction\n    \"\"\"\n    print(f\"Starting extraction from {extraction_config['source_path']}\")\n    start_time = time.time()\n\n    try:\n        # Process the document\n        results = process_source_document(\n            extraction_config[\"source_path\"],\n            provider_name=extraction_config[\"provider\"]\n        )\n\n        # Print success message\n        elapsed_time = time.time() - start_time\n        print(f\"Extraction completed in {elapsed_time:.2f} seconds\")\n        print(f\"Extracted {results['validation']['stats']['node_count']} nodes with \"\n              f\"{results['validation']['stats']['relationship_count']} relationships\")\n\n        # Print any warnings\n        if results['validation']['warnings']:\n            print(\"\\nWarnings:\")\n            for warning in results['validation']['warnings']:\n                print(f\"- {warning}\")\n\n        return results\n\n    except Exception as e:\n        print(f\"Error during extraction: {str(e)}\")\n        raise\n\n# Usage example:\nextraction_results = execute_extraction(extraction_config)\n\n\nStarting extraction from example_document.pdf\nError during extraction: PyPDF2 is required for PDF processing. Install it with: pip install PyPDF2\n\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\n&lt;ipython-input-17-fd592eb962ab&gt; in process_source_document(file_path, provider_name)\n    166         try:\n--&gt; 167             import PyPDF2\n    168             with open(file_path, 'rb') as file:\n\nModuleNotFoundError: No module named 'PyPDF2'\n\nDuring handling of the above exception, another exception occurred:\n\nImportError                               Traceback (most recent call last)\n&lt;ipython-input-19-27555067c1d2&gt; in &lt;cell line: 0&gt;()\n     59 \n     60 # Usage example:\n---&gt; 61 extraction_results = execute_extraction(extraction_config)\n\n&lt;ipython-input-19-27555067c1d2&gt; in execute_extraction(extraction_config)\n     35     try:\n     36         # Process the document\n---&gt; 37         results = process_source_document(\n     38             extraction_config[\"source_path\"],\n     39             provider_name=extraction_config[\"provider\"]\n\n&lt;ipython-input-17-fd592eb962ab&gt; in process_source_document(file_path, provider_name)\n    172                     text += page.extract_text() + \"\\n\"\n    173         except ImportError:\n--&gt; 174             raise ImportError(\"PyPDF2 is required for PDF processing. Install it with: pip install PyPDF2\")\n    175     elif file_path.endswith(\".txt\"):\n    176         with open(file_path, 'r') as file:\n\nImportError: PyPDF2 is required for PDF processing. Install it with: pip install PyPDF2\n\n---------------------------------------------------------------------------\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n---------------------------------------------------------------------------",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#save-argdown-extraction-response",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#save-argdown-extraction-response",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.7 1.5 Save ArgDown Extraction Response",
    "text": "3.7 1.5 Save ArgDown Extraction Response\n\nSave and log API return\nSave ArgDown.md file for further Proecessing\n\n\n\nCode\n# @title 1.5 --- Save ArgDown Extraction Response ---\n\n\"\"\"\nBLOCK PURPOSE: Saves the extracted ArgDown content to files for further processing.\n\nThis function handles saving the extraction results:\n1. Creates an output directory if it doesn't exist\n2. Saves the extracted ArgDown content with a timestamp in the filename\n3. Saves accompanying metadata in a JSON file\n4. Saves a copy at a standard location for the next steps in the pipeline\n5. Provides a preview of the extracted content\n\nThe saved files serve as inputs for the next stage of the pipeline where\nprobability information will be added to create BayesDown.\n\nDEPENDENCIES: os module for directory operations\nOUTPUTS: Saved ArgDown files and preview of extracted content\n\"\"\"\n\ndef save_extraction_results(results, output_directory=\"./outputs\"):\n    \"\"\"\n    Save the extraction results to file\n\n    Args:\n        results (dict): Extraction results from execute_extraction\n        output_directory (str): Directory to save results\n\n    Returns:\n        str: Path to the saved ArgDown file\n    \"\"\"\n    # Ensure output directory exists\n    import os\n    os.makedirs(output_directory, exist_ok=True)\n\n    # Create base filename from source\n    import os.path\n    base_name = os.path.basename(results[\"source_path\"]).split('.')[0]\n    timestamp = time.strftime(\"%Y%m%d-%H%M%S\")\n    output_filename = f\"{base_name}_argdown_{timestamp}.md\"\n    output_path = os.path.join(output_directory, output_filename)\n\n    # Save the results\n    save_argdown_extraction(results, output_path)\n\n    print(f\"Saved ArgDown extraction to: {output_path}\")\n    print(f\"Metadata saved to: {output_path.replace('.md', '_metadata.json')}\")\n\n    # Also save to standard location for further processing\n    standard_path = os.path.join(output_directory, \"ArgDown.md\")\n    with open(standard_path, 'w') as f:\n        f.write(results[\"argdown_content\"])\n    print(f\"Also saved to standard location: {standard_path}\")\n\n    return output_path\n\n# Usage example:\noutput_path = save_extraction_results(extraction_results)\n\n# Preview the extracted ArgDown\nfrom IPython.display import Markdown, display\n\n# Display the first 500 characters of the extracted ArgDown\npreview = extraction_results[\"argdown_content\"][:500] + \"...\" if len(extraction_results[\"argdown_content\"]) &gt; 500 else extraction_results[\"argdown_content\"]\ndisplay(Markdown(f\"## Extracted ArgDown Preview\\n\\n```\\n{preview}\\n```\"))\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-20-84ee4ea64739&gt; in &lt;cell line: 0&gt;()\n     55 \n     56 # Usage example:\n---&gt; 57 output_path = save_extraction_results(extraction_results)\n     58 \n     59 # Preview the extracted ArgDown\n\nNameError: name 'extraction_results' is not defined",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#review-and-check-argdown.md-file",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#review-and-check-argdown.md-file",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.8 1.6 Review and Check ArgDown.md File",
    "text": "3.8 1.6 Review and Check ArgDown.md File\n\n\nCode\ndisplay(Markdown(md_content))\n\n\n[Existential_Catastrophe]: The destruction of humanity’s long-term potential due to AI systems we’ve lost control over. {“instantiations”: [“existential_catastrophe_TRUE”, “existential_catastrophe_FALSE”]} - [Human_Disempowerment]: Permanent and collective disempowerment of humanity relative to AI systems. {“instantiations”: [“human_disempowerment_TRUE”, “human_disempowerment_FALSE”]} - [Scale_Of_Power_Seeking]: Power-seeking by AI systems scaling to the point of permanently disempowering all of humanity. {“instantiations”: [“scale_of_power_seeking_TRUE”, “scale_of_power_seeking_FALSE”]} - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {“instantiations”: [“misaligned_power_seeking_TRUE”, “misaligned_power_seeking_FALSE”]} - [APS_Systems]: AI systems with advanced capabilities, agentic planning, and strategic awareness. {“instantiations”: [“aps_systems_TRUE”, “aps_systems_FALSE”]} - [Advanced_AI_Capability]: AI systems that outperform humans on tasks that grant significant power in the world. {“instantiations”: [“advanced_ai_capability_TRUE”, “advanced_ai_capability_FALSE”]} - [Agentic_Planning]: AI systems making and executing plans based on world models to achieve objectives. {“instantiations”: [“agentic_planning_TRUE”, “agentic_planning_FALSE”]} - [Strategic_Awareness]: AI systems with models accurately representing power dynamics with humans. {“instantiations”: [“strategic_awareness_TRUE”, “strategic_awareness_FALSE”]} - [Difficulty_Of_Alignment]: It is harder to build aligned systems than misaligned systems that are attractive to deploy. {“instantiations”: [“difficulty_of_alignment_TRUE”, “difficulty_of_alignment_FALSE”]} - [Instrumental_Convergence]: AI systems with misaligned objectives tend to seek power as an instrumental goal. {“instantiations”: [“instrumental_convergence_TRUE”, “instrumental_convergence_FALSE”]} - [Problems_With_Proxies]: Optimizing for proxy objectives breaks correlations with intended goals. {“instantiations”: [“problems_with_proxies_TRUE”, “problems_with_proxies_FALSE”]} - [Problems_With_Search]: Search processes can yield systems pursuing different objectives than intended. {“instantiations”: [“problems_with_search_TRUE”, “problems_with_search_FALSE”]} - [Deployment_Decisions]: Decisions to deploy potentially misaligned AI systems. {“instantiations”: [“deployment_decisions_DEPLOY”, “deployment_decisions_WITHHOLD”]} - [Incentives_To_Build_APS]: Strong incentives to build and deploy APS systems. {“instantiations”: [“incentives_to_build_aps_STRONG”, “incentives_to_build_aps_WEAK”]} - [Usefulness_Of_APS]: APS systems are very useful for many valuable tasks. {“instantiations”: [“usefulness_of_aps_HIGH”, “usefulness_of_aps_LOW”]} - [Competitive_Dynamics]: Competitive pressures between AI developers. {“instantiations”: [“competitive_dynamics_STRONG”, “competitive_dynamics_WEAK”]} - [Deception_By_AI]: AI systems deceiving humans about their true objectives. {“instantiations”: [“deception_by_ai_TRUE”, “deception_by_ai_FALSE”]} - [Corrective_Feedback]: Human society implementing corrections after observing problems. {“instantiations”: [“corrective_feedback_EFFECTIVE”, “corrective_feedback_INEFFECTIVE”]} - [Warning_Shots]: Observable failures in weaker systems before catastrophic risks. {“instantiations”: [“warning_shots_OBSERVED”, “warning_shots_UNOBSERVED”]} - [Rapid_Capability_Escalation]: AI capabilities escalating very rapidly, allowing little time for correction. {“instantiations”: [“rapid_capability_escalation_TRUE”, “rapid_capability_escalation_FALSE”]} [Barriers_To_Understanding]: Difficulty in understanding the internal workings of advanced AI systems. {“instantiations”: [“barriers_to_understanding_HIGH”, “barriers_to_understanding_LOW”]} - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {“instantiations”: [“misaligned_power_seeking_TRUE”, “misaligned_power_seeking_FALSE”]} [Adversarial_Dynamics]: Potentially adversarial relationships between humans and power-seeking AI. {“instantiations”: [“adversarial_dynamics_TRUE”, “adversarial_dynamics_FALSE”]} - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {“instantiations”: [“misaligned_power_seeking_TRUE”, “misaligned_power_seeking_FALSE”]} [Stakes_Of_Error]: The escalating impact of mistakes with power-seeking AI systems. {“instantiations”: [“stakes_of_error_HIGH”, “stakes_of_error_LOW”]} - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {“instantiations”: [“misaligned_power_seeking_TRUE”, “misaligned_power_seeking_FALSE”]}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#check-the-graph-structure-with-the-argdown-sandbox-online",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#check-the-graph-structure-with-the-argdown-sandbox-online",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.9 1.6.2 Check the Graph Structure with the ArgDown Sandbox Online",
    "text": "3.9 1.6.2 Check the Graph Structure with the ArgDown Sandbox Online\nCopy and paste the BayesDown formatted … in the ArgDown Sandbox below to quickly verify that the network renders correctly.\n\n\nCode\n# @title 1.6.2 --- ArgDown Online Sandbox ---\n\nfrom IPython.display import IFrame\n\nIFrame(src=\"https://argdown.org/sandbox/map/\", width=\"100%\", height=\"600px\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#extract-argdown-graph-information-as-dataframe",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#extract-argdown-graph-information-as-dataframe",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.10 1.7 Extract ArgDown Graph Information as DataFrame",
    "text": "3.10 1.7 Extract ArgDown Graph Information as DataFrame\nExtract:\n\nNodes (Variable_Title)\nEdges (Parents)\nInstantiations\nDescription\n\nImplementation nodes: - One function for ArgDown and BayesDown extraction, but: - IF YOU ONLY WANT ARGDOWN EXTRACTION: USE ARGUMENT IN FUNCTION CALL “parse_markdown_hierarchy(markdown_text, ArgDown = True)” - so if you set ArgDown = True, it gives you only instantiations, no probabilities.\n\n\nCode\n# @title 1.7 --- Parsing ArgDown & BayesDown (.md to .csv) ---\n\n\"\"\"\nBLOCK PURPOSE: Provides the core parsing functionality for transforming ArgDown and BayesDown\ntext representations into structured DataFrame format for further processing.\n\nThis block implements the critical extraction pipeline described in the AMTAIR project\n(see PY_TechnicalImplementation) that converts argument structures into Bayesian networks.\nThe function can handle both basic ArgDown (structure-only) and BayesDown (with probabilities).\n\nKey steps in the parsing process:\n1. Remove comments from the markdown text\n2. Extract titles, descriptions, and indentation levels\n3. Establish parent-child relationships based on indentation\n4. Convert the structured information into a DataFrame\n5. Add derived columns for network analysis\n\nDEPENDENCIES: pandas, re, json libraries\nINPUTS: Markdown text in ArgDown/BayesDown format\nOUTPUTS: Structured DataFrame with node information, relationships, and properties\n\"\"\"\n\ndef parse_markdown_hierarchy_fixed(markdown_text, ArgDown=False):\n    \"\"\"\n    Parse ArgDown or BayesDown format into a structured DataFrame with parent-child relationships.\n\n    Args:\n        markdown_text (str): Text in ArgDown or BayesDown format\n        ArgDown (bool): If True, extracts only structure without probabilities\n                        If False, extracts both structure and probability information\n\n    Returns:\n        pandas.DataFrame: Structured data with node information, relationships, and attributes\n    \"\"\"\n    # PHASE 1: Clean and prepare the text\n    clean_text = remove_comments(markdown_text)\n\n    # PHASE 2: Extract basic information about nodes\n    titles_info = extract_titles_info(clean_text)\n\n    # PHASE 3: Determine the hierarchical relationships\n    titles_with_relations = establish_relationships_fixed(titles_info, clean_text)\n\n    # PHASE 4: Convert to structured DataFrame format\n    df = convert_to_dataframe(titles_with_relations, ArgDown)\n\n    # PHASE 5: Add derived columns for analysis\n    df = add_no_parent_no_child_columns_to_df(df)\n    df = add_parents_instantiation_columns_to_df(df)\n\n    return df\n\ndef remove_comments(markdown_text):\n    \"\"\"\n    Remove comment blocks from markdown text using regex pattern matching.\n\n    Args:\n        markdown_text (str): Text containing potential comment blocks\n\n    Returns:\n        str: Text with comment blocks removed\n    \"\"\"\n    # Remove anything between /* and */ using regex\n    return re.sub(r'/\\*.*?\\*/', '', markdown_text, flags=re.DOTALL)\n\ndef extract_titles_info(text):\n    \"\"\"\n    Extract titles with their descriptions and indentation levels from markdown text.\n\n    Args:\n        text (str): Cleaned markdown text\n\n    Returns:\n        dict: Dictionary with titles as keys and dictionaries of attributes as values\n    \"\"\"\n    lines = text.split('\\n')\n    titles_info = {}\n\n    for line in lines:\n        # Skip empty lines\n        if not line.strip():\n            continue\n\n        # Extract title within square or angle brackets\n        title_match = re.search(r'[&lt;\\[](.+?)[&gt;\\]]', line)\n        if not title_match:\n            continue\n\n        title = title_match.group(1)\n\n        # Extract description and metadata\n        title_pattern_in_line = r'[&lt;\\[]' + re.escape(title) + r'[&gt;\\]]:'\n        description_match = re.search(title_pattern_in_line + r'\\s*(.*)', line)\n\n        if description_match:\n            full_text = description_match.group(1).strip()\n\n            # Split description and metadata at the first \"{\"\n            if \"{\" in full_text:\n                split_index = full_text.find(\"{\")\n                description = full_text[:split_index].strip()\n                metadata = full_text[split_index:].strip()\n            else:\n                # Keep the entire description and no metadata\n                description = full_text\n                metadata = ''  # Initialize as empty string\n        else:\n            description = ''\n            metadata = ''  # Ensure metadata is initialized\n\n        # Calculate indentation level based on spaces before + or - symbol\n        indentation = 0\n        if '+' in line:\n            symbol_index = line.find('+')\n            # Count spaces before the '+' symbol\n            i = symbol_index - 1\n            while i &gt;= 0 and line[i] == ' ':\n                indentation += 1\n                i -= 1\n        elif '-' in line:\n            symbol_index = line.find('-')\n            # Count spaces before the '-' symbol\n            i = symbol_index - 1\n            while i &gt;= 0 and line[i] == ' ':\n                indentation += 1\n                i -= 1\n\n        # If neither symbol exists, indentation remains 0\n\n        if title in titles_info:\n            # Only update description if it's currently empty and we found a new one\n            if not titles_info[title]['description'] and description:\n                titles_info[title]['description'] = description\n\n            # Store all indentation levels for this title\n            titles_info[title]['indentation_levels'].append(indentation)\n\n            # Keep max indentation for backward compatibility\n            if indentation &gt; titles_info[title]['indentation']:\n                titles_info[title]['indentation'] = indentation\n\n            # Do NOT update metadata here - keep the original metadata\n        else:\n            # First time seeing this title, create a new entry\n            titles_info[title] = {\n                'description': description,\n                'indentation': indentation,\n                'indentation_levels': [indentation],  # Initialize with first indentation level\n                'parents': [],\n                'children': [],\n                'line': None,\n                'line_numbers': [],  # Initialize an empty list for all occurrences\n                'metadata': metadata  # Set metadata explicitly from what we found\n            }\n\n    return titles_info\n\ndef establish_relationships_fixed(titles_info, text):\n    \"\"\"\n    Establish parent-child relationships between titles using BayesDown indentation rules.\n\n    In BayesDown syntax:\n    - More indented nodes (with + symbol) are PARENTS of less indented nodes\n    - The relationship reads as \"Effect is caused by Cause\" (Effect + Cause)\n    - This aligns with how Bayesian networks represent causality\n\n    Args:\n        titles_info (dict): Dictionary with information about titles\n        text (str): Original markdown text (for identifying line numbers)\n\n    Returns:\n        dict: Updated dictionary with parent-child relationships\n    \"\"\"\n    lines = text.split('\\n')\n\n    # Dictionary to store line numbers for each title occurrence\n    title_occurrences = {}\n\n    # Record line number for each title (including multiple occurrences)\n    line_number = 0\n    for line in lines:\n        if not line.strip():\n            line_number += 1\n            continue\n\n        title_match = re.search(r'[&lt;\\[](.+?)[&gt;\\]]', line)\n        if not title_match:\n            line_number += 1\n            continue\n\n        title = title_match.group(1)\n\n        # Store all occurrences of each title with their line numbers\n        if title not in title_occurrences:\n            title_occurrences[title] = []\n        title_occurrences[title].append(line_number)\n\n        # Store all line numbers where this title appears\n        if 'line_numbers' not in titles_info[title]:\n            titles_info[title]['line_numbers'] = []\n        titles_info[title]['line_numbers'].append(line_number)\n\n        # For backward compatibility, keep the first occurrence in 'line'\n        if titles_info[title]['line'] is None:\n            titles_info[title]['line'] = line_number\n\n        line_number += 1\n\n    # Create an ordered list of all title occurrences with their line numbers\n    all_occurrences = []\n    for title, occurrences in title_occurrences.items():\n        for line_num in occurrences:\n            all_occurrences.append((title, line_num))\n\n    # Sort occurrences by line number\n    all_occurrences.sort(key=lambda x: x[1])\n\n    # Get indentation for each occurrence\n    occurrence_indents = {}\n    for title, line_num in all_occurrences:\n        for line in lines[line_num:line_num+1]:  # Only check the current line\n            indent = 0\n            if '+' in line:\n                symbol_index = line.find('+')\n                # Count spaces before the '+' symbol\n                j = symbol_index - 1\n                while j &gt;= 0 and line[j] == ' ':\n                    indent += 1\n                    j -= 1\n            elif '-' in line:\n                symbol_index = line.find('-')\n                # Count spaces before the '-' symbol\n                j = symbol_index - 1\n                while j &gt;= 0 and line[j] == ' ':\n                    indent += 1\n                    j -= 1\n            occurrence_indents[(title, line_num)] = indent\n\n    # Enhanced backward pass for correct parent-child relationships\n    for i, (title, line_num) in enumerate(all_occurrences):\n        current_indent = occurrence_indents[(title, line_num)]\n\n        # Skip root nodes (indentation 0) for processing\n        if current_indent == 0:\n            continue\n\n        # Look for the immediately preceding node with lower indentation\n        j = i - 1\n        while j &gt;= 0:\n            prev_title, prev_line = all_occurrences[j]\n            prev_indent = occurrence_indents[(prev_title, prev_line)]\n\n            # If we find a node with less indentation, it's a child of current node\n            if prev_indent &lt; current_indent:\n                # In BayesDown: More indented node is a parent (cause) of less indented node (effect)\n                if title not in titles_info[prev_title]['parents']:\n                    titles_info[prev_title]['parents'].append(title)\n                if prev_title not in titles_info[title]['children']:\n                    titles_info[title]['children'].append(prev_title)\n\n                # Only need to find the immediate child (closest preceding node with lower indentation)\n                break\n\n            j -= 1\n\n    return titles_info\n\ndef convert_to_dataframe(titles_info, ArgDown):\n    \"\"\"\n    Convert the titles information dictionary to a pandas DataFrame.\n\n    Args:\n        titles_info (dict): Dictionary with information about titles\n        ArgDown (bool): If True, extract only structural information without probabilities\n\n    Returns:\n        pandas.DataFrame: Structured data with node information and relationships\n    \"\"\"\n    if ArgDown == True:\n        # For ArgDown, exclude probability columns\n        df = pd.DataFrame(columns=['Title', 'Description', 'line', 'line_numbers', 'indentation',\n                               'indentation_levels', 'Parents', 'Children', 'instantiations'])\n    else:\n        # For BayesDown, include probability columns\n        df = pd.DataFrame(columns=['Title', 'Description', 'line', 'line_numbers', 'indentation',\n                               'indentation_levels', 'Parents', 'Children', 'instantiations',\n                               'priors', 'posteriors'])\n\n    for title, info in titles_info.items():\n        # Parse the metadata JSON string into a Python dictionary\n        if 'metadata' in info and info['metadata']:\n            try:\n                # Only try to parse if metadata is not empty\n                if info['metadata'].strip():\n                    jsonMetadata = json.loads(info['metadata'])\n                    if ArgDown == True:\n                        # Create the row dictionary with instantiations as metadata only, no probabilities yet\n                        row = {\n                            'Title': title,\n                            'Description': info.get('description', ''),\n                            'line': info.get('line',''),\n                            'line_numbers': info.get('line_numbers', []),\n                            'indentation': info.get('indentation',''),\n                            'indentation_levels': info.get('indentation_levels', []),\n                            'Parents': info.get('parents', []),\n                            'Children': info.get('children', []),\n                            # Extract specific metadata fields, defaulting to empty if not present\n                            'instantiations': jsonMetadata.get('instantiations', []),\n                        }\n                    else:\n                        # Create dict with probabilities for BayesDown\n                        row = {\n                            'Title': title,\n                            'Description': info.get('description', ''),\n                            'line': info.get('line',''),\n                            'line_numbers': info.get('line_numbers', []),\n                            'indentation': info.get('indentation',''),\n                            'indentation_levels': info.get('indentation_levels', []),\n                            'Parents': info.get('parents', []),\n                            'Children': info.get('children', []),\n                            # Extract specific metadata fields, defaulting to empty if not present\n                            'instantiations': jsonMetadata.get('instantiations', []),\n                            'priors': jsonMetadata.get('priors', {}),\n                            'posteriors': jsonMetadata.get('posteriors', {})\n                        }\n                else:\n                    # Empty metadata case\n                    row = {\n                        'Title': title,\n                        'Description': info.get('description', ''),\n                        'line': info.get('line',''),\n                        'line_numbers': info.get('line_numbers', []),\n                        'indentation': info.get('indentation',''),\n                        'indentation_levels': info.get('indentation_levels', []),\n                        'Parents': info.get('parents', []),\n                        'Children': info.get('children', []),\n                        'instantiations': [],\n                        'priors': {},\n                        'posteriors': {}\n                    }\n            except json.JSONDecodeError:\n                # Handle case where metadata isn't valid JSON\n                row = {\n                    'Title': title,\n                    'Description': info.get('description', ''),\n                    'line': info.get('line',''),\n                    'line_numbers': info.get('line_numbers', []),\n                    'indentation': info.get('indentation',''),\n                    'indentation_levels': info.get('indentation_levels', []),\n                    'Parents': info.get('parents', []),\n                    'Children': info.get('children', []),\n                    'instantiations': [],\n                    'priors': {},\n                    'posteriors': {}\n                }\n        else:\n            # Handle case where metadata field doesn't exist or is empty\n            row = {\n                'Title': title,\n                'Description': info.get('description', ''),\n                'line': info.get('line',''),\n                'line_numbers': info.get('line_numbers', []),\n                'indentation': info.get('indentation',''),\n                'indentation_levels': info.get('indentation_levels', []),\n                'Parents': info.get('parents', []),\n                'Children': info.get('children', []),\n                'instantiations': [],\n                'priors': {},\n                'posteriors': {}\n            }\n\n        # Add the row to the DataFrame\n        df.loc[len(df)] = row\n\n    return df\n\ndef add_no_parent_no_child_columns_to_df(dataframe):\n    \"\"\"\n    Add No_Parent and No_Children boolean columns to the DataFrame to identify root and leaf nodes.\n\n    Args:\n        dataframe (pandas.DataFrame): The DataFrame to enhance\n\n    Returns:\n        pandas.DataFrame: Enhanced DataFrame with additional boolean columns\n    \"\"\"\n    no_parent = []\n    no_children = []\n\n    for _, row in dataframe.iterrows():\n        no_parent.append(not row['Parents'])  # True if Parents list is empty\n        no_children.append(not row['Children'])  # True if Children list is empty\n\n    dataframe['No_Parent'] = no_parent\n    dataframe['No_Children'] = no_children\n\n    return dataframe\n\ndef add_parents_instantiation_columns_to_df(dataframe):\n    \"\"\"\n    Add all possible instantiations of parents as a list of lists column to the DataFrame.\n    This is crucial for generating conditional probability tables.\n\n    Args:\n        dataframe (pandas.DataFrame): The DataFrame to enhance\n\n    Returns:\n        pandas.DataFrame: Enhanced DataFrame with parent_instantiations column\n    \"\"\"\n    # Create a new column to store parent instantiations\n    parent_instantiations = []\n\n    # Iterate through each row in the dataframe\n    for _, row in dataframe.iterrows():\n        parents = row['Parents']\n        parent_insts = []\n\n        # For each parent, find its instantiations and add to the list\n        for parent in parents:\n            # Find the row where Title matches the parent\n            parent_row = dataframe[dataframe['Title'] == parent]\n\n            # If parent found in the dataframe\n            if not parent_row.empty:\n                # Get the instantiations of this parent\n                parent_instantiation = parent_row['instantiations'].iloc[0]\n                parent_insts.append(parent_instantiation)\n\n        # Add the list of parent instantiations to our new column\n        parent_instantiations.append(parent_insts)\n\n    # Add the new column to the dataframe\n    dataframe['parent_instantiations'] = parent_instantiations\n\n    return dataframe\n\n\n\n\nCode\n# example use case:\nex_csv = parse_markdown_hierarchy_fixed(md_content, ArgDown = True)\nex_csv\n\n\n\n    \n\n\n\n\n\n\nTitle\nDescription\nline\nline_numbers\nindentation\nindentation_levels\nParents\nChildren\ninstantiations\nNo_Parent\nNo_Children\nparent_instantiations\n\n\n\n\n0\nExistential_Catastrophe\nThe destruction of humanity's long-term potent...\n0\n[0]\n0\n[0]\n[]\n[]\n[existential_catastrophe_TRUE, existential_cat...\nTrue\nTrue\n[]\n\n\n1\nHuman_Disempowerment\nPermanent and collective disempowerment of hum...\n1\n[1]\n0\n[0]\n[Scale_Of_Power_Seeking]\n[]\n[human_disempowerment_TRUE, human_disempowerme...\nFalse\nTrue\n[[scale_of_power_seeking_TRUE, scale_of_power_...\n\n\n2\nScale_Of_Power_Seeking\nPower-seeking by AI systems scaling to the poi...\n2\n[2]\n4\n[4]\n[Misaligned_Power_Seeking, Corrective_Feedback]\n[Human_Disempowerment]\n[scale_of_power_seeking_TRUE, scale_of_power_s...\nFalse\nFalse\n[[misaligned_power_seeking_TRUE, misaligned_po...\n\n\n3\nMisaligned_Power_Seeking\nDeployed AI systems seeking power in unintende...\n3\n[3, 21, 23, 25]\n8\n[8, 0, 0, 0]\n[APS_Systems, Difficulty_Of_Alignment, Deploym...\n[Scale_Of_Power_Seeking]\n[misaligned_power_seeking_TRUE, misaligned_pow...\nFalse\nFalse\n[[aps_systems_TRUE, aps_systems_FALSE], [diffi...\n\n\n4\nAPS_Systems\nAI systems with advanced capabilities, agentic...\n4\n[4]\n12\n[12]\n[Advanced_AI_Capability, Agentic_Planning, Str...\n[Misaligned_Power_Seeking]\n[aps_systems_TRUE, aps_systems_FALSE]\nFalse\nFalse\n[[advanced_ai_capability_TRUE, advanced_ai_cap...\n\n\n5\nAdvanced_AI_Capability\nAI systems that outperform humans on tasks tha...\n5\n[5]\n16\n[16]\n[]\n[APS_Systems]\n[advanced_ai_capability_TRUE, advanced_ai_capa...\nTrue\nFalse\n[]\n\n\n6\nAgentic_Planning\nAI systems making and executing plans based on...\n6\n[6]\n16\n[16]\n[]\n[APS_Systems]\n[agentic_planning_TRUE, agentic_planning_FALSE]\nTrue\nFalse\n[]\n\n\n7\nStrategic_Awareness\nAI systems with models accurately representing...\n7\n[7]\n16\n[16]\n[]\n[APS_Systems]\n[strategic_awareness_TRUE, strategic_awareness...\nTrue\nFalse\n[]\n\n\n8\nDifficulty_Of_Alignment\nIt is harder to build aligned systems than mis...\n8\n[8]\n12\n[12]\n[Instrumental_Convergence, Problems_With_Proxi...\n[Misaligned_Power_Seeking]\n[difficulty_of_alignment_TRUE, difficulty_of_a...\nFalse\nFalse\n[[instrumental_convergence_TRUE, instrumental_...\n\n\n9\nInstrumental_Convergence\nAI systems with misaligned objectives tend to ...\n9\n[9]\n16\n[16]\n[]\n[Difficulty_Of_Alignment]\n[instrumental_convergence_TRUE, instrumental_c...\nTrue\nFalse\n[]\n\n\n10\nProblems_With_Proxies\nOptimizing for proxy objectives breaks correla...\n10\n[10]\n16\n[16]\n[]\n[Difficulty_Of_Alignment]\n[problems_with_proxies_TRUE, problems_with_pro...\nTrue\nFalse\n[]\n\n\n11\nProblems_With_Search\nSearch processes can yield systems pursuing di...\n11\n[11]\n16\n[16]\n[]\n[Difficulty_Of_Alignment]\n[problems_with_search_TRUE, problems_with_sear...\nTrue\nFalse\n[]\n\n\n12\nDeployment_Decisions\nDecisions to deploy potentially misaligned AI ...\n12\n[12]\n12\n[12]\n[Incentives_To_Build_APS, Deception_By_AI]\n[Misaligned_Power_Seeking]\n[deployment_decisions_DEPLOY, deployment_decis...\nFalse\nFalse\n[[incentives_to_build_aps_STRONG, incentives_t...\n\n\n13\nIncentives_To_Build_APS\nStrong incentives to build and deploy APS syst...\n13\n[13]\n16\n[16]\n[Usefulness_Of_APS, Competitive_Dynamics]\n[Deployment_Decisions]\n[incentives_to_build_aps_STRONG, incentives_to...\nFalse\nFalse\n[[usefulness_of_aps_HIGH, usefulness_of_aps_LO...\n\n\n14\nUsefulness_Of_APS\nAPS systems are very useful for many valuable ...\n14\n[14]\n20\n[20]\n[]\n[Incentives_To_Build_APS]\n[usefulness_of_aps_HIGH, usefulness_of_aps_LOW]\nTrue\nFalse\n[]\n\n\n15\nCompetitive_Dynamics\nCompetitive pressures between AI developers.\n15\n[15]\n20\n[20]\n[]\n[Incentives_To_Build_APS]\n[competitive_dynamics_STRONG, competitive_dyna...\nTrue\nFalse\n[]\n\n\n16\nDeception_By_AI\nAI systems deceiving humans about their true o...\n16\n[16]\n16\n[16]\n[]\n[Deployment_Decisions]\n[deception_by_ai_TRUE, deception_by_ai_FALSE]\nTrue\nFalse\n[]\n\n\n17\nCorrective_Feedback\nHuman society implementing corrections after o...\n17\n[17]\n8\n[8]\n[Warning_Shots, Rapid_Capability_Escalation]\n[Scale_Of_Power_Seeking]\n[corrective_feedback_EFFECTIVE, corrective_fee...\nFalse\nFalse\n[[warning_shots_OBSERVED, warning_shots_UNOBSE...\n\n\n18\nWarning_Shots\nObservable failures in weaker systems before c...\n18\n[18]\n12\n[12]\n[]\n[Corrective_Feedback]\n[warning_shots_OBSERVED, warning_shots_UNOBSER...\nTrue\nFalse\n[]\n\n\n19\nRapid_Capability_Escalation\nAI capabilities escalating very rapidly, allow...\n19\n[19]\n12\n[12]\n[]\n[Corrective_Feedback]\n[rapid_capability_escalation_TRUE, rapid_capab...\nTrue\nFalse\n[]\n\n\n20\nBarriers_To_Understanding\nDifficulty in understanding the internal worki...\n20\n[20]\n0\n[0]\n[]\n[]\n[barriers_to_understanding_HIGH, barriers_to_u...\nTrue\nTrue\n[]\n\n\n21\nAdversarial_Dynamics\nPotentially adversarial relationships between ...\n22\n[22]\n0\n[0]\n[]\n[]\n[adversarial_dynamics_TRUE, adversarial_dynami...\nTrue\nTrue\n[]\n\n\n22\nStakes_Of_Error\nThe escalating impact of mistakes with power-s...\n24\n[24]\n0\n[0]\n[]\n[]\n[stakes_of_error_HIGH, stakes_of_error_LOW]\nTrue\nTrue\n[]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#store-argdown-information-as-argdown.csv-file",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#store-argdown-information-as-argdown.csv-file",
    "title": "1  ``` {.python .cell-code}",
    "section": "3.11 1.8 Store ArgDown Information as ‘ArgDown.csv’ file",
    "text": "3.11 1.8 Store ArgDown Information as ‘ArgDown.csv’ file\n\n\nCode\n# Assuming 'md_content' holds the markdown text\n# Store the results of running the function parse_markdown_hierarchy(md_content, ArgDown = True) as the file 'ArgDown.csv'\nresult_df = parse_markdown_hierarchy_fixed(md_content, ArgDown = True)\n\n# Save to CSV\nresult_df.to_csv('ArgDown.csv', index=False)\n\n\n\n\nCode\n# Test if 'ArgDown.csv' has been saved correctly with the correct information\n# Load the data from the CSV file\nargdown_df = pd.read_csv('ArgDown.csv')\n\n# Display the DataFrame\nprint(argdown_df)\n\n\n                          Title  \\\n0       Existential_Catastrophe   \n1          Human_Disempowerment   \n2        Scale_Of_Power_Seeking   \n3      Misaligned_Power_Seeking   \n4                   APS_Systems   \n5        Advanced_AI_Capability   \n6              Agentic_Planning   \n7           Strategic_Awareness   \n8       Difficulty_Of_Alignment   \n9      Instrumental_Convergence   \n10        Problems_With_Proxies   \n11         Problems_With_Search   \n12         Deployment_Decisions   \n13      Incentives_To_Build_APS   \n14            Usefulness_Of_APS   \n15         Competitive_Dynamics   \n16              Deception_By_AI   \n17          Corrective_Feedback   \n18                Warning_Shots   \n19  Rapid_Capability_Escalation   \n20    Barriers_To_Understanding   \n21         Adversarial_Dynamics   \n22              Stakes_Of_Error   \n\n                                          Description  line     line_numbers  \\\n0   The destruction of humanity's long-term potent...     0              [0]   \n1   Permanent and collective disempowerment of hum...     1              [1]   \n2   Power-seeking by AI systems scaling to the poi...     2              [2]   \n3   Deployed AI systems seeking power in unintende...     3  [3, 21, 23, 25]   \n4   AI systems with advanced capabilities, agentic...     4              [4]   \n5   AI systems that outperform humans on tasks tha...     5              [5]   \n6   AI systems making and executing plans based on...     6              [6]   \n7   AI systems with models accurately representing...     7              [7]   \n8   It is harder to build aligned systems than mis...     8              [8]   \n9   AI systems with misaligned objectives tend to ...     9              [9]   \n10  Optimizing for proxy objectives breaks correla...    10             [10]   \n11  Search processes can yield systems pursuing di...    11             [11]   \n12  Decisions to deploy potentially misaligned AI ...    12             [12]   \n13  Strong incentives to build and deploy APS syst...    13             [13]   \n14  APS systems are very useful for many valuable ...    14             [14]   \n15       Competitive pressures between AI developers.    15             [15]   \n16  AI systems deceiving humans about their true o...    16             [16]   \n17  Human society implementing corrections after o...    17             [17]   \n18  Observable failures in weaker systems before c...    18             [18]   \n19  AI capabilities escalating very rapidly, allow...    19             [19]   \n20  Difficulty in understanding the internal worki...    20             [20]   \n21  Potentially adversarial relationships between ...    22             [22]   \n22  The escalating impact of mistakes with power-s...    24             [24]   \n\n    indentation indentation_levels  \\\n0             0                [0]   \n1             0                [0]   \n2             4                [4]   \n3             8       [8, 0, 0, 0]   \n4            12               [12]   \n5            16               [16]   \n6            16               [16]   \n7            16               [16]   \n8            12               [12]   \n9            16               [16]   \n10           16               [16]   \n11           16               [16]   \n12           12               [12]   \n13           16               [16]   \n14           20               [20]   \n15           20               [20]   \n16           16               [16]   \n17            8                [8]   \n18           12               [12]   \n19           12               [12]   \n20            0                [0]   \n21            0                [0]   \n22            0                [0]   \n\n                                              Parents  \\\n0                                                  []   \n1                          ['Scale_Of_Power_Seeking']   \n2   ['Misaligned_Power_Seeking', 'Corrective_Feedb...   \n3   ['APS_Systems', 'Difficulty_Of_Alignment', 'De...   \n4   ['Advanced_AI_Capability', 'Agentic_Planning',...   \n5                                                  []   \n6                                                  []   \n7                                                  []   \n8   ['Instrumental_Convergence', 'Problems_With_Pr...   \n9                                                  []   \n10                                                 []   \n11                                                 []   \n12     ['Incentives_To_Build_APS', 'Deception_By_AI']   \n13      ['Usefulness_Of_APS', 'Competitive_Dynamics']   \n14                                                 []   \n15                                                 []   \n16                                                 []   \n17   ['Warning_Shots', 'Rapid_Capability_Escalation']   \n18                                                 []   \n19                                                 []   \n20                                                 []   \n21                                                 []   \n22                                                 []   \n\n                        Children  \\\n0                             []   \n1                             []   \n2       ['Human_Disempowerment']   \n3     ['Scale_Of_Power_Seeking']   \n4   ['Misaligned_Power_Seeking']   \n5                ['APS_Systems']   \n6                ['APS_Systems']   \n7                ['APS_Systems']   \n8   ['Misaligned_Power_Seeking']   \n9    ['Difficulty_Of_Alignment']   \n10   ['Difficulty_Of_Alignment']   \n11   ['Difficulty_Of_Alignment']   \n12  ['Misaligned_Power_Seeking']   \n13      ['Deployment_Decisions']   \n14   ['Incentives_To_Build_APS']   \n15   ['Incentives_To_Build_APS']   \n16      ['Deployment_Decisions']   \n17    ['Scale_Of_Power_Seeking']   \n18       ['Corrective_Feedback']   \n19       ['Corrective_Feedback']   \n20                            []   \n21                            []   \n22                            []   \n\n                                       instantiations  No_Parent  No_Children  \\\n0   ['existential_catastrophe_TRUE', 'existential_...       True         True   \n1   ['human_disempowerment_TRUE', 'human_disempowe...      False         True   \n2   ['scale_of_power_seeking_TRUE', 'scale_of_powe...      False        False   \n3   ['misaligned_power_seeking_TRUE', 'misaligned_...      False        False   \n4           ['aps_systems_TRUE', 'aps_systems_FALSE']      False        False   \n5   ['advanced_ai_capability_TRUE', 'advanced_ai_c...       True        False   \n6   ['agentic_planning_TRUE', 'agentic_planning_FA...       True        False   \n7   ['strategic_awareness_TRUE', 'strategic_awaren...       True        False   \n8   ['difficulty_of_alignment_TRUE', 'difficulty_o...      False        False   \n9   ['instrumental_convergence_TRUE', 'instrumenta...       True        False   \n10  ['problems_with_proxies_TRUE', 'problems_with_...       True        False   \n11  ['problems_with_search_TRUE', 'problems_with_s...       True        False   \n12  ['deployment_decisions_DEPLOY', 'deployment_de...      False        False   \n13  ['incentives_to_build_aps_STRONG', 'incentives...      False        False   \n14  ['usefulness_of_aps_HIGH', 'usefulness_of_aps_...       True        False   \n15  ['competitive_dynamics_STRONG', 'competitive_d...       True        False   \n16  ['deception_by_ai_TRUE', 'deception_by_ai_FALSE']       True        False   \n17  ['corrective_feedback_EFFECTIVE', 'corrective_...      False        False   \n18  ['warning_shots_OBSERVED', 'warning_shots_UNOB...       True        False   \n19  ['rapid_capability_escalation_TRUE', 'rapid_ca...       True        False   \n20  ['barriers_to_understanding_HIGH', 'barriers_t...       True         True   \n21  ['adversarial_dynamics_TRUE', 'adversarial_dyn...       True         True   \n22    ['stakes_of_error_HIGH', 'stakes_of_error_LOW']       True         True   \n\n                                parent_instantiations  \n0                                                  []  \n1   [['scale_of_power_seeking_TRUE', 'scale_of_pow...  \n2   [['misaligned_power_seeking_TRUE', 'misaligned...  \n3   [['aps_systems_TRUE', 'aps_systems_FALSE'], ['...  \n4   [['advanced_ai_capability_TRUE', 'advanced_ai_...  \n5                                                  []  \n6                                                  []  \n7                                                  []  \n8   [['instrumental_convergence_TRUE', 'instrument...  \n9                                                  []  \n10                                                 []  \n11                                                 []  \n12  [['incentives_to_build_aps_STRONG', 'incentive...  \n13  [['usefulness_of_aps_HIGH', 'usefulness_of_aps...  \n14                                                 []  \n15                                                 []  \n16                                                 []  \n17  [['warning_shots_OBSERVED', 'warning_shots_UNO...  \n18                                                 []  \n19                                                 []  \n20                                                 []  \n21                                                 []  \n22                                                 []",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#process-overview-1",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#process-overview-1",
    "title": "1  ``` {.python .cell-code}",
    "section": "5.1 Process Overview",
    "text": "5.1 Process Overview\nThis section implements the second major stage of the AMTAIR pipeline: enhancing the structured argument representation (ArgDown) with probability information to create BayesDown.\nBayesDown extends ArgDown by adding: 1. Prior probabilities for each variable (unconditional beliefs) 2. Conditional probabilities representing the relationships between variables 3. The full parameter specification needed for a Bayesian network\nThe process follows these steps: 1. Generate probability questions for each node and its relationships 2. Create a BayesDown template with placeholders for these probabilities 3. Answer the probability questions (manually or via LLM) 4. Substitute the answers into the BayesDown representation\nThis enhanced representation contains all the information needed to construct a formal Bayesian network, enabling probabilistic reasoning and policy evaluation.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#what-is-bayesdown",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#what-is-bayesdown",
    "title": "1  ``` {.python .cell-code}",
    "section": "5.2 What is BayesDown?",
    "text": "5.2 What is BayesDown?\nBayesDown maintains the ArgDown structure but adds probability metadata:\n[Node]: Description. {\n\"instantiations\": [\"node_TRUE\", \"node_FALSE\"],\n\"priors\": { \"p(node_TRUE)\": \"0.7\", \"p(node_FALSE)\": \"0.3\" },\n\"posteriors\": { \"p(node_TRUE|parent_TRUE)\": \"0.9\", \"p(node_TRUE|parent_FALSE)\": \"0.4\" }\n}\nThe result is a hybrid representation that preserves the narrative structure of arguments while adding the mathematical precision of Bayesian networks.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#probability-extraction-questions-argdown.csv-to-argdown_withquestions.csv",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#probability-extraction-questions-argdown.csv-to-argdown_withquestions.csv",
    "title": "1  ``` {.python .cell-code}",
    "section": "5.3 2.1 Probability Extraction Questions — ‘ArgDown.csv’ to ‘ArgDown_WithQuestions.csv’",
    "text": "5.3 2.1 Probability Extraction Questions — ‘ArgDown.csv’ to ‘ArgDown_WithQuestions.csv’\n\n\nCode\n# @title 2.1 --- Probability Extraction Questions Generation ---\n\n\"\"\"\nBLOCK PURPOSE: Generates probability questions for ArgDown nodes to prepare for BayesDown conversion.\n\nThis block implements a key step in the pipeline where structure (from ArgDown) is prepared\nfor probability integration (to create BayesDown). It:\n\n1. Processes a CSV file containing ArgDown structure\n2. For each node, generates appropriate probability questions:\n   - Prior probability questions for all nodes\n   - Conditional probability questions for nodes with parents\n3. Creates a new CSV file with these questions ready for the next stage\n\nThe generated questions serve as placeholders that will be answered in the\nprobability extraction phase to complete the Bayesian network.\n\nDEPENDENCIES: pandas, json, itertools libraries\nINPUTS: ArgDown CSV file\nOUTPUTS: Enhanced CSV with probability questions for each node\n\"\"\"\n\nimport pandas as pd\nimport re\nimport json\nimport itertools\nfrom IPython.display import Markdown, display\n\n\ndef parse_instantiations(instantiations_str):\n    \"\"\"\n    Parse instantiations from string or list format.\n    Handles various input formats flexibly.\n\n    Args:\n        instantiations_str: Instantiations in string or list format\n\n    Returns:\n        list: Parsed instantiations as a list\n    \"\"\"\n    if pd.isna(instantiations_str) or instantiations_str == '':\n        return []\n\n    if isinstance(instantiations_str, list):\n        return instantiations_str\n\n    try:\n        # Try to parse as JSON\n        return json.loads(instantiations_str)\n    except:\n        # Try to parse as string list\n        if isinstance(instantiations_str, str):\n            # Remove brackets and split by comma\n            clean_str = instantiations_str.strip('[]\"\\'')\n            if not clean_str:\n                return []\n            return [s.strip(' \"\\'') for s in clean_str.split(',') if s.strip()]\n\n    return []\n\ndef parse_parents(parents_str):\n    \"\"\"\n    Parse parents from string or list format.\n    Handles various input formats flexibly.\n\n    Args:\n        parents_str: Parents in string or list format\n\n    Returns:\n        list: Parsed parents as a list\n    \"\"\"\n    if pd.isna(parents_str) or parents_str == '':\n        return []\n\n    if isinstance(parents_str, list):\n        return parents_str\n\n    try:\n        # Try to parse as JSON\n        return json.loads(parents_str)\n    except:\n        # Try to parse as string list\n        if isinstance(parents_str, str):\n            # Remove brackets and split by comma\n            clean_str = parents_str.strip('[]\"\\'')\n            if not clean_str:\n                return []\n            return [s.strip(' \"\\'') for s in clean_str.split(',') if s.strip()]\n\n    return []\n\ndef get_parent_instantiations(parent, df):\n    \"\"\"\n    Get the instantiations for a parent node from the DataFrame.\n    Returns default instantiations if not found.\n\n    Args:\n        parent (str): Parent node name\n        df (DataFrame): DataFrame containing node information\n\n    Returns:\n        list: Instantiations for the parent node\n    \"\"\"\n    parent_row = df[df['Title'] == parent]\n    if parent_row.empty:\n        return [f\"{parent}_TRUE\", f\"{parent}_FALSE\"]\n\n    instantiations = parse_instantiations(parent_row.iloc[0]['instantiations'])\n    if not instantiations:\n        return [f\"{parent}_TRUE\", f\"{parent}_FALSE\"]\n\n    return instantiations\n\ndef generate_instantiation_questions(title, instantiation, parents, df):\n    \"\"\"\n    Generate questions for a specific instantiation of a node.\n\n    Args:\n        title (str): The title of the node\n        instantiation (str): The specific instantiation (e.g., \"title_TRUE\")\n        parents (list): List of parent nodes\n        df (DataFrame): The full DataFrame for looking up parent instantiations\n\n    Returns:\n        dict: Dictionary mapping questions to estimate keys\n    \"\"\"\n    questions = {}\n\n    # Always generate a prior probability question, regardless of parents\n    prior_question = f\"What is the probability for {title}={instantiation}?\"\n    questions[prior_question] = 'prior'  # Question is the key, 'prior' is the value\n\n    # If no parents, return only the prior question\n    if not parents:\n        return questions\n\n    # For nodes with parents, generate conditional probability questions\n    # Get all combinations of parent instantiations\n    parent_instantiations = []\n    for parent in parents:\n        parent_insts = get_parent_instantiations(parent, df)\n        parent_instantiations.append([(parent, inst) for inst in parent_insts])\n\n    # Generate all combinations\n    all_combinations = list(itertools.product(*parent_instantiations))\n\n    # Create conditional probability questions for each combination\n    # and use questions as keys, estimate_i as values\n    for i, combination in enumerate(all_combinations):\n        condition_str = \", \".join([f\"{parent}={inst}\" for parent, inst in combination])\n        question = f\"What is the probability for {title}={instantiation} if {condition_str}?\"\n        questions[question] = f'estimate_{i + 1}'  # Question is the key, estimate_i is the value\n\n    return questions\n\n\ndef generate_argdown_with_questions(argdown_csv_path, output_csv_path):\n    \"\"\"\n    Generate probability questions based on the ArgDown CSV file and save to a new CSV file.\n\n    Args:\n        argdown_csv_path (str): Path to the input ArgDown CSV file\n        output_csv_path (str): Path to save the output CSV file with questions\n\n    Returns:\n        DataFrame: Enhanced DataFrame with probability questions\n\n    Raises:\n        Exception: If CSV loading fails or required columns are missing\n    \"\"\"\n    print(f\"Loading ArgDown CSV from {argdown_csv_path}...\")\n\n    # Load the ArgDown CSV file\n    try:\n        df = pd.read_csv(argdown_csv_path)\n        print(f\"Successfully loaded CSV with {len(df)} rows.\")\n    except Exception as e:\n        raise Exception(f\"Error loading ArgDown CSV: {e}\")\n\n    # Validate required columns\n    required_columns = ['Title', 'Parents', 'instantiations']\n    missing_columns = [col for col in required_columns if col not in df.columns]\n    if missing_columns:\n        raise Exception(f\"Missing required columns: {', '.join(missing_columns)}\")\n\n    # Initialize columns for questions\n    df['Generate_Positive_Instantiation_Questions'] = None\n    df['Generate_Negative_Instantiation_Questions'] = None\n\n    print(\"Generating probability questions for each node...\")\n\n    # Process each row to generate questions\n    for idx, row in df.iterrows():\n        title = row['Title']\n        instantiations = parse_instantiations(row['instantiations'])\n        parents = parse_parents(row['Parents'])\n\n        if len(instantiations) &lt; 2:\n            # Default instantiations if not provided\n            instantiations = [f\"{title}_TRUE\", f\"{title}_FALSE\"]\n\n        # Generate positive instantiation questions\n        positive_questions = generate_instantiation_questions(title, instantiations[0], parents, df)\n\n        # Generate negative instantiation questions\n        negative_questions = generate_instantiation_questions(title, instantiations[1], parents, df)\n\n        # Update the DataFrame\n        df.at[idx, 'Generate_Positive_Instantiation_Questions'] = json.dumps(positive_questions)\n        df.at[idx, 'Generate_Negative_Instantiation_Questions'] = json.dumps(negative_questions)\n\n    # Save the enhanced DataFrame\n    df.to_csv(output_csv_path, index=False)\n    print(f\"Generated questions saved to {output_csv_path}\")\n\n    return df\n\n# Example usage:\ndf_with_questions = generate_argdown_with_questions(\"ArgDown.csv\", \"ArgDown_WithQuestions.csv\")\n\n\nLoading ArgDown CSV from ArgDown.csv...\nSuccessfully loaded CSV with 23 rows.\nGenerating probability questions for each node...\nGenerated questions saved to ArgDown_WithQuestions.csv\n\n\n\n\nCode\n# Load the data from the ArgDown_WithQuestions CSV file\nargdown_with_questions_df = pd.read_csv('ArgDown_WithQuestions.csv')\n\n# Display the DataFrame\nprint(argdown_with_questions_df)\nargdown_with_questions_df\n\n\n                          Title  \\\n0       Existential_Catastrophe   \n1          Human_Disempowerment   \n2        Scale_Of_Power_Seeking   \n3      Misaligned_Power_Seeking   \n4                   APS_Systems   \n5        Advanced_AI_Capability   \n6              Agentic_Planning   \n7           Strategic_Awareness   \n8       Difficulty_Of_Alignment   \n9      Instrumental_Convergence   \n10        Problems_With_Proxies   \n11         Problems_With_Search   \n12         Deployment_Decisions   \n13      Incentives_To_Build_APS   \n14            Usefulness_Of_APS   \n15         Competitive_Dynamics   \n16              Deception_By_AI   \n17          Corrective_Feedback   \n18                Warning_Shots   \n19  Rapid_Capability_Escalation   \n20    Barriers_To_Understanding   \n21         Adversarial_Dynamics   \n22              Stakes_Of_Error   \n\n                                          Description  line     line_numbers  \\\n0   The destruction of humanity's long-term potent...     0              [0]   \n1   Permanent and collective disempowerment of hum...     1              [1]   \n2   Power-seeking by AI systems scaling to the poi...     2              [2]   \n3   Deployed AI systems seeking power in unintende...     3  [3, 21, 23, 25]   \n4   AI systems with advanced capabilities, agentic...     4              [4]   \n5   AI systems that outperform humans on tasks tha...     5              [5]   \n6   AI systems making and executing plans based on...     6              [6]   \n7   AI systems with models accurately representing...     7              [7]   \n8   It is harder to build aligned systems than mis...     8              [8]   \n9   AI systems with misaligned objectives tend to ...     9              [9]   \n10  Optimizing for proxy objectives breaks correla...    10             [10]   \n11  Search processes can yield systems pursuing di...    11             [11]   \n12  Decisions to deploy potentially misaligned AI ...    12             [12]   \n13  Strong incentives to build and deploy APS syst...    13             [13]   \n14  APS systems are very useful for many valuable ...    14             [14]   \n15       Competitive pressures between AI developers.    15             [15]   \n16  AI systems deceiving humans about their true o...    16             [16]   \n17  Human society implementing corrections after o...    17             [17]   \n18  Observable failures in weaker systems before c...    18             [18]   \n19  AI capabilities escalating very rapidly, allow...    19             [19]   \n20  Difficulty in understanding the internal worki...    20             [20]   \n21  Potentially adversarial relationships between ...    22             [22]   \n22  The escalating impact of mistakes with power-s...    24             [24]   \n\n    indentation indentation_levels  \\\n0             0                [0]   \n1             0                [0]   \n2             4                [4]   \n3             8       [8, 0, 0, 0]   \n4            12               [12]   \n5            16               [16]   \n6            16               [16]   \n7            16               [16]   \n8            12               [12]   \n9            16               [16]   \n10           16               [16]   \n11           16               [16]   \n12           12               [12]   \n13           16               [16]   \n14           20               [20]   \n15           20               [20]   \n16           16               [16]   \n17            8                [8]   \n18           12               [12]   \n19           12               [12]   \n20            0                [0]   \n21            0                [0]   \n22            0                [0]   \n\n                                              Parents  \\\n0                                                  []   \n1                          ['Scale_Of_Power_Seeking']   \n2   ['Misaligned_Power_Seeking', 'Corrective_Feedb...   \n3   ['APS_Systems', 'Difficulty_Of_Alignment', 'De...   \n4   ['Advanced_AI_Capability', 'Agentic_Planning',...   \n5                                                  []   \n6                                                  []   \n7                                                  []   \n8   ['Instrumental_Convergence', 'Problems_With_Pr...   \n9                                                  []   \n10                                                 []   \n11                                                 []   \n12     ['Incentives_To_Build_APS', 'Deception_By_AI']   \n13      ['Usefulness_Of_APS', 'Competitive_Dynamics']   \n14                                                 []   \n15                                                 []   \n16                                                 []   \n17   ['Warning_Shots', 'Rapid_Capability_Escalation']   \n18                                                 []   \n19                                                 []   \n20                                                 []   \n21                                                 []   \n22                                                 []   \n\n                        Children  \\\n0                             []   \n1                             []   \n2       ['Human_Disempowerment']   \n3     ['Scale_Of_Power_Seeking']   \n4   ['Misaligned_Power_Seeking']   \n5                ['APS_Systems']   \n6                ['APS_Systems']   \n7                ['APS_Systems']   \n8   ['Misaligned_Power_Seeking']   \n9    ['Difficulty_Of_Alignment']   \n10   ['Difficulty_Of_Alignment']   \n11   ['Difficulty_Of_Alignment']   \n12  ['Misaligned_Power_Seeking']   \n13      ['Deployment_Decisions']   \n14   ['Incentives_To_Build_APS']   \n15   ['Incentives_To_Build_APS']   \n16      ['Deployment_Decisions']   \n17    ['Scale_Of_Power_Seeking']   \n18       ['Corrective_Feedback']   \n19       ['Corrective_Feedback']   \n20                            []   \n21                            []   \n22                            []   \n\n                                       instantiations  No_Parent  No_Children  \\\n0   ['existential_catastrophe_TRUE', 'existential_...       True         True   \n1   ['human_disempowerment_TRUE', 'human_disempowe...      False         True   \n2   ['scale_of_power_seeking_TRUE', 'scale_of_powe...      False        False   \n3   ['misaligned_power_seeking_TRUE', 'misaligned_...      False        False   \n4           ['aps_systems_TRUE', 'aps_systems_FALSE']      False        False   \n5   ['advanced_ai_capability_TRUE', 'advanced_ai_c...       True        False   \n6   ['agentic_planning_TRUE', 'agentic_planning_FA...       True        False   \n7   ['strategic_awareness_TRUE', 'strategic_awaren...       True        False   \n8   ['difficulty_of_alignment_TRUE', 'difficulty_o...      False        False   \n9   ['instrumental_convergence_TRUE', 'instrumenta...       True        False   \n10  ['problems_with_proxies_TRUE', 'problems_with_...       True        False   \n11  ['problems_with_search_TRUE', 'problems_with_s...       True        False   \n12  ['deployment_decisions_DEPLOY', 'deployment_de...      False        False   \n13  ['incentives_to_build_aps_STRONG', 'incentives...      False        False   \n14  ['usefulness_of_aps_HIGH', 'usefulness_of_aps_...       True        False   \n15  ['competitive_dynamics_STRONG', 'competitive_d...       True        False   \n16  ['deception_by_ai_TRUE', 'deception_by_ai_FALSE']       True        False   \n17  ['corrective_feedback_EFFECTIVE', 'corrective_...      False        False   \n18  ['warning_shots_OBSERVED', 'warning_shots_UNOB...       True        False   \n19  ['rapid_capability_escalation_TRUE', 'rapid_ca...       True        False   \n20  ['barriers_to_understanding_HIGH', 'barriers_t...       True         True   \n21  ['adversarial_dynamics_TRUE', 'adversarial_dyn...       True         True   \n22    ['stakes_of_error_HIGH', 'stakes_of_error_LOW']       True         True   \n\n                                parent_instantiations  \\\n0                                                  []   \n1   [['scale_of_power_seeking_TRUE', 'scale_of_pow...   \n2   [['misaligned_power_seeking_TRUE', 'misaligned...   \n3   [['aps_systems_TRUE', 'aps_systems_FALSE'], ['...   \n4   [['advanced_ai_capability_TRUE', 'advanced_ai_...   \n5                                                  []   \n6                                                  []   \n7                                                  []   \n8   [['instrumental_convergence_TRUE', 'instrument...   \n9                                                  []   \n10                                                 []   \n11                                                 []   \n12  [['incentives_to_build_aps_STRONG', 'incentive...   \n13  [['usefulness_of_aps_HIGH', 'usefulness_of_aps...   \n14                                                 []   \n15                                                 []   \n16                                                 []   \n17  [['warning_shots_OBSERVED', 'warning_shots_UNO...   \n18                                                 []   \n19                                                 []   \n20                                                 []   \n21                                                 []   \n22                                                 []   \n\n            Generate_Positive_Instantiation_Questions  \\\n0   {\"What is the probability for Existential_Cata...   \n1   {\"What is the probability for Human_Disempower...   \n2   {\"What is the probability for Scale_Of_Power_S...   \n3   {\"What is the probability for Misaligned_Power...   \n4   {\"What is the probability for APS_Systems=aps_...   \n5   {\"What is the probability for Advanced_AI_Capa...   \n6   {\"What is the probability for Agentic_Planning...   \n7   {\"What is the probability for Strategic_Awaren...   \n8   {\"What is the probability for Difficulty_Of_Al...   \n9   {\"What is the probability for Instrumental_Con...   \n10  {\"What is the probability for Problems_With_Pr...   \n11  {\"What is the probability for Problems_With_Se...   \n12  {\"What is the probability for Deployment_Decis...   \n13  {\"What is the probability for Incentives_To_Bu...   \n14  {\"What is the probability for Usefulness_Of_AP...   \n15  {\"What is the probability for Competitive_Dyna...   \n16  {\"What is the probability for Deception_By_AI=...   \n17  {\"What is the probability for Corrective_Feedb...   \n18  {\"What is the probability for Warning_Shots=wa...   \n19  {\"What is the probability for Rapid_Capability...   \n20  {\"What is the probability for Barriers_To_Unde...   \n21  {\"What is the probability for Adversarial_Dyna...   \n22  {\"What is the probability for Stakes_Of_Error=...   \n\n            Generate_Negative_Instantiation_Questions  \n0   {\"What is the probability for Existential_Cata...  \n1   {\"What is the probability for Human_Disempower...  \n2   {\"What is the probability for Scale_Of_Power_S...  \n3   {\"What is the probability for Misaligned_Power...  \n4   {\"What is the probability for APS_Systems=aps_...  \n5   {\"What is the probability for Advanced_AI_Capa...  \n6   {\"What is the probability for Agentic_Planning...  \n7   {\"What is the probability for Strategic_Awaren...  \n8   {\"What is the probability for Difficulty_Of_Al...  \n9   {\"What is the probability for Instrumental_Con...  \n10  {\"What is the probability for Problems_With_Pr...  \n11  {\"What is the probability for Problems_With_Se...  \n12  {\"What is the probability for Deployment_Decis...  \n13  {\"What is the probability for Incentives_To_Bu...  \n14  {\"What is the probability for Usefulness_Of_AP...  \n15  {\"What is the probability for Competitive_Dyna...  \n16  {\"What is the probability for Deception_By_AI=...  \n17  {\"What is the probability for Corrective_Feedb...  \n18  {\"What is the probability for Warning_Shots=wa...  \n19  {\"What is the probability for Rapid_Capability...  \n20  {\"What is the probability for Barriers_To_Unde...  \n21  {\"What is the probability for Adversarial_Dyna...  \n22  {\"What is the probability for Stakes_Of_Error=...  \n\n\n\n    \n\n\n\n\n\n\nTitle\nDescription\nline\nline_numbers\nindentation\nindentation_levels\nParents\nChildren\ninstantiations\nNo_Parent\nNo_Children\nparent_instantiations\nGenerate_Positive_Instantiation_Questions\nGenerate_Negative_Instantiation_Questions\n\n\n\n\n0\nExistential_Catastrophe\nThe destruction of humanity's long-term potent...\n0\n[0]\n0\n[0]\n[]\n[]\n['existential_catastrophe_TRUE', 'existential_...\nTrue\nTrue\n[]\n{\"What is the probability for Existential_Cata...\n{\"What is the probability for Existential_Cata...\n\n\n1\nHuman_Disempowerment\nPermanent and collective disempowerment of hum...\n1\n[1]\n0\n[0]\n['Scale_Of_Power_Seeking']\n[]\n['human_disempowerment_TRUE', 'human_disempowe...\nFalse\nTrue\n[['scale_of_power_seeking_TRUE', 'scale_of_pow...\n{\"What is the probability for Human_Disempower...\n{\"What is the probability for Human_Disempower...\n\n\n2\nScale_Of_Power_Seeking\nPower-seeking by AI systems scaling to the poi...\n2\n[2]\n4\n[4]\n['Misaligned_Power_Seeking', 'Corrective_Feedb...\n['Human_Disempowerment']\n['scale_of_power_seeking_TRUE', 'scale_of_powe...\nFalse\nFalse\n[['misaligned_power_seeking_TRUE', 'misaligned...\n{\"What is the probability for Scale_Of_Power_S...\n{\"What is the probability for Scale_Of_Power_S...\n\n\n3\nMisaligned_Power_Seeking\nDeployed AI systems seeking power in unintende...\n3\n[3, 21, 23, 25]\n8\n[8, 0, 0, 0]\n['APS_Systems', 'Difficulty_Of_Alignment', 'De...\n['Scale_Of_Power_Seeking']\n['misaligned_power_seeking_TRUE', 'misaligned_...\nFalse\nFalse\n[['aps_systems_TRUE', 'aps_systems_FALSE'], ['...\n{\"What is the probability for Misaligned_Power...\n{\"What is the probability for Misaligned_Power...\n\n\n4\nAPS_Systems\nAI systems with advanced capabilities, agentic...\n4\n[4]\n12\n[12]\n['Advanced_AI_Capability', 'Agentic_Planning',...\n['Misaligned_Power_Seeking']\n['aps_systems_TRUE', 'aps_systems_FALSE']\nFalse\nFalse\n[['advanced_ai_capability_TRUE', 'advanced_ai_...\n{\"What is the probability for APS_Systems=aps_...\n{\"What is the probability for APS_Systems=aps_...\n\n\n5\nAdvanced_AI_Capability\nAI systems that outperform humans on tasks tha...\n5\n[5]\n16\n[16]\n[]\n['APS_Systems']\n['advanced_ai_capability_TRUE', 'advanced_ai_c...\nTrue\nFalse\n[]\n{\"What is the probability for Advanced_AI_Capa...\n{\"What is the probability for Advanced_AI_Capa...\n\n\n6\nAgentic_Planning\nAI systems making and executing plans based on...\n6\n[6]\n16\n[16]\n[]\n['APS_Systems']\n['agentic_planning_TRUE', 'agentic_planning_FA...\nTrue\nFalse\n[]\n{\"What is the probability for Agentic_Planning...\n{\"What is the probability for Agentic_Planning...\n\n\n7\nStrategic_Awareness\nAI systems with models accurately representing...\n7\n[7]\n16\n[16]\n[]\n['APS_Systems']\n['strategic_awareness_TRUE', 'strategic_awaren...\nTrue\nFalse\n[]\n{\"What is the probability for Strategic_Awaren...\n{\"What is the probability for Strategic_Awaren...\n\n\n8\nDifficulty_Of_Alignment\nIt is harder to build aligned systems than mis...\n8\n[8]\n12\n[12]\n['Instrumental_Convergence', 'Problems_With_Pr...\n['Misaligned_Power_Seeking']\n['difficulty_of_alignment_TRUE', 'difficulty_o...\nFalse\nFalse\n[['instrumental_convergence_TRUE', 'instrument...\n{\"What is the probability for Difficulty_Of_Al...\n{\"What is the probability for Difficulty_Of_Al...\n\n\n9\nInstrumental_Convergence\nAI systems with misaligned objectives tend to ...\n9\n[9]\n16\n[16]\n[]\n['Difficulty_Of_Alignment']\n['instrumental_convergence_TRUE', 'instrumenta...\nTrue\nFalse\n[]\n{\"What is the probability for Instrumental_Con...\n{\"What is the probability for Instrumental_Con...\n\n\n10\nProblems_With_Proxies\nOptimizing for proxy objectives breaks correla...\n10\n[10]\n16\n[16]\n[]\n['Difficulty_Of_Alignment']\n['problems_with_proxies_TRUE', 'problems_with_...\nTrue\nFalse\n[]\n{\"What is the probability for Problems_With_Pr...\n{\"What is the probability for Problems_With_Pr...\n\n\n11\nProblems_With_Search\nSearch processes can yield systems pursuing di...\n11\n[11]\n16\n[16]\n[]\n['Difficulty_Of_Alignment']\n['problems_with_search_TRUE', 'problems_with_s...\nTrue\nFalse\n[]\n{\"What is the probability for Problems_With_Se...\n{\"What is the probability for Problems_With_Se...\n\n\n12\nDeployment_Decisions\nDecisions to deploy potentially misaligned AI ...\n12\n[12]\n12\n[12]\n['Incentives_To_Build_APS', 'Deception_By_AI']\n['Misaligned_Power_Seeking']\n['deployment_decisions_DEPLOY', 'deployment_de...\nFalse\nFalse\n[['incentives_to_build_aps_STRONG', 'incentive...\n{\"What is the probability for Deployment_Decis...\n{\"What is the probability for Deployment_Decis...\n\n\n13\nIncentives_To_Build_APS\nStrong incentives to build and deploy APS syst...\n13\n[13]\n16\n[16]\n['Usefulness_Of_APS', 'Competitive_Dynamics']\n['Deployment_Decisions']\n['incentives_to_build_aps_STRONG', 'incentives...\nFalse\nFalse\n[['usefulness_of_aps_HIGH', 'usefulness_of_aps...\n{\"What is the probability for Incentives_To_Bu...\n{\"What is the probability for Incentives_To_Bu...\n\n\n14\nUsefulness_Of_APS\nAPS systems are very useful for many valuable ...\n14\n[14]\n20\n[20]\n[]\n['Incentives_To_Build_APS']\n['usefulness_of_aps_HIGH', 'usefulness_of_aps_...\nTrue\nFalse\n[]\n{\"What is the probability for Usefulness_Of_AP...\n{\"What is the probability for Usefulness_Of_AP...\n\n\n15\nCompetitive_Dynamics\nCompetitive pressures between AI developers.\n15\n[15]\n20\n[20]\n[]\n['Incentives_To_Build_APS']\n['competitive_dynamics_STRONG', 'competitive_d...\nTrue\nFalse\n[]\n{\"What is the probability for Competitive_Dyna...\n{\"What is the probability for Competitive_Dyna...\n\n\n16\nDeception_By_AI\nAI systems deceiving humans about their true o...\n16\n[16]\n16\n[16]\n[]\n['Deployment_Decisions']\n['deception_by_ai_TRUE', 'deception_by_ai_FALSE']\nTrue\nFalse\n[]\n{\"What is the probability for Deception_By_AI=...\n{\"What is the probability for Deception_By_AI=...\n\n\n17\nCorrective_Feedback\nHuman society implementing corrections after o...\n17\n[17]\n8\n[8]\n['Warning_Shots', 'Rapid_Capability_Escalation']\n['Scale_Of_Power_Seeking']\n['corrective_feedback_EFFECTIVE', 'corrective_...\nFalse\nFalse\n[['warning_shots_OBSERVED', 'warning_shots_UNO...\n{\"What is the probability for Corrective_Feedb...\n{\"What is the probability for Corrective_Feedb...\n\n\n18\nWarning_Shots\nObservable failures in weaker systems before c...\n18\n[18]\n12\n[12]\n[]\n['Corrective_Feedback']\n['warning_shots_OBSERVED', 'warning_shots_UNOB...\nTrue\nFalse\n[]\n{\"What is the probability for Warning_Shots=wa...\n{\"What is the probability for Warning_Shots=wa...\n\n\n19\nRapid_Capability_Escalation\nAI capabilities escalating very rapidly, allow...\n19\n[19]\n12\n[12]\n[]\n['Corrective_Feedback']\n['rapid_capability_escalation_TRUE', 'rapid_ca...\nTrue\nFalse\n[]\n{\"What is the probability for Rapid_Capability...\n{\"What is the probability for Rapid_Capability...\n\n\n20\nBarriers_To_Understanding\nDifficulty in understanding the internal worki...\n20\n[20]\n0\n[0]\n[]\n[]\n['barriers_to_understanding_HIGH', 'barriers_t...\nTrue\nTrue\n[]\n{\"What is the probability for Barriers_To_Unde...\n{\"What is the probability for Barriers_To_Unde...\n\n\n21\nAdversarial_Dynamics\nPotentially adversarial relationships between ...\n22\n[22]\n0\n[0]\n[]\n[]\n['adversarial_dynamics_TRUE', 'adversarial_dyn...\nTrue\nTrue\n[]\n{\"What is the probability for Adversarial_Dyna...\n{\"What is the probability for Adversarial_Dyna...\n\n\n22\nStakes_Of_Error\nThe escalating impact of mistakes with power-s...\n24\n[24]\n0\n[0]\n[]\n[]\n['stakes_of_error_HIGH', 'stakes_of_error_LOW']\nTrue\nTrue\n[]\n{\"What is the probability for Stakes_Of_Error=...\n{\"What is the probability for Stakes_Of_Error=...",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#argdown_withquestions.csv-to-bayesdownquestions.md",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#argdown_withquestions.csv-to-bayesdownquestions.md",
    "title": "1  ``` {.python .cell-code}",
    "section": "5.4 2.2 ‘ArgDown_WithQuestions.csv’ to ‘BayesDownQuestions.md’",
    "text": "5.4 2.2 ‘ArgDown_WithQuestions.csv’ to ‘BayesDownQuestions.md’\n2.2 Save BayesDown Extraction Questions as ‘BayesDownQuestions.md’\n\n\nCode\n# @title 2.2 --- BayesDown Questions Generation ---\n\n\"\"\"\nBLOCK PURPOSE: Transforms the ArgDown with questions into a BayesDown template with placeholders.\n\nThis function creates a BayesDown representation with probability placeholders based on the questions generated in the previous step. It:\n\n1. Loads the CSV file with probability questions\n2. Constructs a directed graph to represent the causal structure\n3. Processes each node to create BayesDown syntax with probability placeholders\n4. Optionally includes comments with the specific questions to be answered\n5. Saves the result as a markdown file for the next stage of the pipeline\n\nThe output is a BayesDown template that can be used in the probability extraction phase, where the placeholders will be replaced with actual probability values.\n\nDEPENDENCIES: networkx, pandas, json libraries\nINPUTS: CSV file with ArgDown structure and probability questions\nOUTPUTS: BayesDown markdown file with probability placeholders\n\"\"\"\n\ndef extract_bayesdown_questions_fixed(argdown_with_questions_path, output_md_path, include_questions_as_comments=True):\n  \"\"\"\n  Generate BayesDown syntax from the ArgDown_WithQuestions CSV file with correct parent-child relationships.\n\n  Args:\n      argdown_with_questions_path (str): Path to the CSV file with probability questions\n      output_md_path (str): Path to save the output BayesDown file\n      include_questions_as_comments (bool, optional): Whether to include the original\n                                                    questions as comments. Defaults to True.\n\n  Returns:\n      str: The generated BayesDown content\n\n  Raises:\n      Exception: If CSV loading fails or required columns are missing\n  \"\"\"\n  print(f\"Loading CSV from {argdown_with_questions_path}...\")\n\n  # Load the CSV file\n  try:\n      df = pd.read_csv(argdown_with_questions_path)\n      print(f\"Successfully loaded CSV with {len(df)} rows.\")\n  except Exception as e:\n      raise Exception(f\"Error loading CSV: {e}\")\n\n  # Validate required columns\n  required_columns = ['Title', 'Description', 'Parents', 'Children', 'instantiations']\n  missing_columns = [col for col in required_columns if col not in df.columns]\n  if missing_columns:\n      raise Exception(f\"Missing required columns: {', '.join(missing_columns)}\")\n\n  print(\"Generating BayesDown syntax with placeholder probabilities...\")\n\n  # Build a directed graph of nodes\n  G = nx.DiGraph()\n\n  # Add nodes to the graph\n  for idx, row in df.iterrows():\n      G.add_node(row['Title'], data=row)\n\n  # Add edges to the graph based on parent-child relationships - CORRECTLY\n  for idx, row in df.iterrows():\n      child = row['Title']\n\n      # Parse parents and add edges\n      parents = row['Parents']\n      if isinstance(parents, str):\n          # Handle string representation of list\n          if parents.startswith('[') and parents.endswith(']'):\n              parents = parents.strip('[]')\n              if parents:  # Check if not empty\n                  parent_list = [p.strip().strip('\\'\"') for p in parents.split(',')]\n                  for parent in parent_list:\n                      if parent in G.nodes():\n                          # In BayesDown: Parent (cause) -&gt; Child (effect)\n                          G.add_edge(parent, child)\n      elif isinstance(parents, list):\n          # Handle actual list\n          for parent in parents:\n              if parent in G.nodes():\n                  G.add_edge(parent, child)\n\n  # Function to safely parse JSON strings\n  def safe_parse_json(json_str):\n      if pd.isna(json_str):\n          return {}\n\n      if isinstance(json_str, dict):\n          return json_str\n\n      try:\n          return json.loads(json_str)\n      except:\n          return {}\n\n  # Start building the BayesDown content\n  bayesdown_content = \"\"  # Initialize as empty\n\n  if include_questions_as_comments:\n    bayesdown_content = \"# BayesDown Representation with Placeholder Probabilities\\n\\n\"\n    bayesdown_content += \"/* This file contains BayesDown syntax with placeholder probabilities.\\n\"\n    bayesdown_content += \"   Replace the placeholders with actual probability values based on the \\n\"\n    bayesdown_content += \"   questions in the comments. */\\n\\n\"\n\n  # Get leaf nodes (nodes with no outgoing edges) - these are effects without children\n  leaf_nodes = [n for n in G.nodes() if G.out_degree(n) == 0]\n\n  # Helper function to process a node and its parents recursively\n  def process_node(node, indent_level=0, processed_nodes=None):\n      if processed_nodes is None:\n          processed_nodes = set()\n\n      # Create the indentation string\n      indent = ' ' * (indent_level * 2)\n      prefix = f\"{indent}+ \" if indent_level &gt; 0 else \"\"\n\n      # Get node data\n      node_data = G.nodes[node]['data']\n      title = node_data['Title']\n      description = node_data['Description'] if not pd.isna(node_data['Description']) else \"\"\n\n      # Parse instantiations from the row data\n      instantiations = parse_instantiations_safely(node_data['instantiations'])\n\n      # Build the node string\n      node_output = \"\"\n\n      # Add comments with questions if requested\n      if include_questions_as_comments:\n          # Add positive questions as comments\n          if 'Generate_Positive_Instantiation_Questions' in node_data:\n              positive_questions = safe_parse_json(node_data['Generate_Positive_Instantiation_Questions'])\n              for question in positive_questions.keys():\n                  node_output += f\"{indent}/* {question} */\\n\"\n\n          # Add negative questions as comments\n          if 'Generate_Negative_Instantiation_Questions' in node_data:\n              negative_questions = safe_parse_json(node_data['Generate_Negative_Instantiation_Questions'])\n              for question in negative_questions.keys():\n                  node_output += f\"{indent}/* {question} */\\n\"\n\n      # Check if this node was already fully defined elsewhere\n      if node in processed_nodes:\n          # Just add a reference to the node\n          node_output += f\"{prefix}[{title}]\\n\"\n          return node_output\n\n      # Mark this node as processed\n      processed_nodes.add(node)\n\n      # Prepare the metadata JSON\n      metadata = {\n          \"instantiations\": instantiations\n      }\n\n      # Add priors with full questions as keys\n      priors = {}\n      if 'Generate_Positive_Instantiation_Questions' in node_data:\n          positive_questions = safe_parse_json(node_data['Generate_Positive_Instantiation_Questions'])\n          for question, estimate_key in positive_questions.items():\n              if estimate_key == 'prior':\n                  priors[question] = \"%?\"  # Default placeholder\n\n      if 'Generate_Negative_Instantiation_Questions' in node_data:\n          negative_questions = safe_parse_json(node_data['Generate_Negative_Instantiation_Questions'])\n          for question, estimate_key in negative_questions.items():\n              if estimate_key == 'prior':\n                  priors[question] = \"%?\"  # Default placeholder\n\n      metadata[\"priors\"] = priors\n\n      # Add posteriors with full questions as keys\n      parents = list(G.predecessors(node))\n      if parents:\n          posteriors = {}\n          if 'Generate_Positive_Instantiation_Questions' in node_data:\n              positive_questions = safe_parse_json(node_data['Generate_Positive_Instantiation_Questions'])\n              for question, estimate_key in positive_questions.items():\n                  if estimate_key.startswith('estimate_'):\n                      posteriors[question] = \"?%\"  # Default placeholder\n\n          if 'Generate_Negative_Instantiation_Questions' in node_data:\n              negative_questions = safe_parse_json(node_data['Generate_Negative_Instantiation_Questions'])\n              for question, estimate_key in negative_questions.items():\n                  if estimate_key.startswith('estimate_'):\n                      posteriors[question] = \"?%\"  # Default placeholder\n\n          metadata[\"posteriors\"] = posteriors\n\n      # Format the node with metadata\n      node_output += f\"{prefix}[{title}]: {description} {json.dumps(metadata)}\\n\"\n\n      # Process parent nodes\n      for parent in parents:\n          if parent != node:  # Avoid self-references\n              parent_output = process_node(parent, indent_level + 1, processed_nodes)\n              node_output += parent_output\n\n      return node_output\n\n  # Helper function to parse instantiations safely\n  def parse_instantiations_safely(instantiations_data):\n      if isinstance(instantiations_data, list):\n          return instantiations_data if instantiations_data else [f\"TRUE\", f\"FALSE\"]\n\n      if isinstance(instantiations_data, str):\n          try:\n              parsed = json.loads(instantiations_data)\n              if isinstance(parsed, list):\n                  return parsed if parsed else [f\"TRUE\", f\"FALSE\"]\n          except:\n              if instantiations_data.startswith('[') and instantiations_data.endswith(']'):\n                  items = instantiations_data.strip('[]').split(',')\n                  result = [item.strip(' \"\\'') for item in items if item.strip()]\n                  return result if result else [f\"TRUE\", f\"FALSE\"]\n\n      return [f\"TRUE\", f\"FALSE\"]  # Default\n\n  # Process each leaf node and its ancestors\n  for leaf in leaf_nodes:\n      bayesdown_content += process_node(leaf)\n\n  # Save the BayesDown content\n  with open(output_md_path, 'w') as f:\n      f.write(bayesdown_content)\n\n  print(f\"BayesDown Questions saved to {output_md_path}\")\n  return bayesdown_content\n\n\n\n\nCode\n# Explicitly set the value of include_questions_as_comments\ninclude_questions_as_comments=False  # or False, depending on your needs\n\n# Get the markdown content\nbayesdown_questions = extract_bayesdown_questions_fixed(\n  \"ArgDown_WithQuestions.csv\",\n  \"BayesDownQuestions.md\", include_questions_as_comments=include_questions_as_comments\n)\n\n# Determine the output file path based on include_questions_as_comments\nif include_questions_as_comments: # Assuming include_questions_as_comments is defined somewhere in previous cells\n    output_file_path = \"FULL_BayesDownQuestions.md\"\nelse:\n    output_file_path = \"BayesDownQuestions.md\"\n\n# Save the markdown content to the appropriate file\nwith open(output_file_path, 'w') as f:\n    f.write(md_content)\n\nprint(f\"Markdown content saved to {output_file_path}\")\n\n\nLoading CSV from ArgDown_WithQuestions.csv...\nSuccessfully loaded CSV with 23 rows.\nGenerating BayesDown syntax with placeholder probabilities...\nBayesDown Questions saved to BayesDownQuestions.md\nMarkdown content saved to BayesDownQuestions.md\n\n\n\n\nCode\n# Generate BayesDown format\nbayesdown_questions = extract_bayesdown_questions_fixed(\n    \"ArgDown_WithQuestions.csv\",\n    \"FULL_BayesDownQuestions.md\",\n    include_questions_as_comments=True\n)\n\n# Display a preview of the format\nprint(\"\\nBayesDown Format Preview:\")\nprint(bayesdown_questions[:50000] + \"...\\n\")\n\n\nLoading CSV from ArgDown_WithQuestions.csv...\nSuccessfully loaded CSV with 23 rows.\nGenerating BayesDown syntax with placeholder probabilities...\nBayesDown Questions saved to FULL_BayesDownQuestions.md\n\nBayesDown Format Preview:\n# BayesDown Representation with Placeholder Probabilities\n\n/* This file contains BayesDown syntax with placeholder probabilities.\n   Replace the placeholders with actual probability values based on the \n   questions in the comments. */\n\n/* What is the probability for Existential_Catastrophe=existential_catastrophe_TRUE? */\n/* What is the probability for Existential_Catastrophe=existential_catastrophe_FALSE? */\n[Existential_Catastrophe]: The destruction of humanity's long-term potential due to AI systems we've lost control over. {\"instantiations\": [\"existential_catastrophe_TRUE\", \"existential_catastrophe_FALSE\"], \"priors\": {\"What is the probability for Existential_Catastrophe=existential_catastrophe_TRUE?\": \"%?\", \"What is the probability for Existential_Catastrophe=existential_catastrophe_FALSE?\": \"%?\"}}\n/* What is the probability for Human_Disempowerment=human_disempowerment_TRUE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_FALSE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE? */\n[Human_Disempowerment]: Permanent and collective disempowerment of humanity relative to AI systems. {\"instantiations\": [\"human_disempowerment_TRUE\", \"human_disempowerment_FALSE\"], \"priors\": {\"What is the probability for Human_Disempowerment=human_disempowerment_TRUE?\": \"%?\", \"What is the probability for Human_Disempowerment=human_disempowerment_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE?\": \"?%\", \"What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE?\": \"?%\", \"What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE?\": \"?%\", \"What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE?\": \"?%\"}}\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n  + [Scale_Of_Power_Seeking]: Power-seeking by AI systems scaling to the point of permanently disempowering all of humanity. {\"instantiations\": [\"scale_of_power_seeking_TRUE\", \"scale_of_power_seeking_FALSE\"], \"priors\": {\"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE?\": \"%?\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\"}}\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    + [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"], \"priors\": {\"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE?\": \"%?\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\"}}\n      /* What is the probability for APS_Systems=aps_systems_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE? */\n      + [APS_Systems]: AI systems with advanced capabilities, agentic planning, and strategic awareness. {\"instantiations\": [\"aps_systems_TRUE\", \"aps_systems_FALSE\"], \"priors\": {\"What is the probability for APS_Systems=aps_systems_TRUE?\": \"%?\", \"What is the probability for APS_Systems=aps_systems_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\"}}\n        /* What is the probability for Advanced_AI_Capability=advanced_ai_capability_TRUE? */\n        /* What is the probability for Advanced_AI_Capability=advanced_ai_capability_FALSE? */\n        + [Advanced_AI_Capability]: AI systems that outperform humans on tasks that grant significant power in the world. {\"instantiations\": [\"advanced_ai_capability_TRUE\", \"advanced_ai_capability_FALSE\"], \"priors\": {\"What is the probability for Advanced_AI_Capability=advanced_ai_capability_TRUE?\": \"%?\", \"What is the probability for Advanced_AI_Capability=advanced_ai_capability_FALSE?\": \"%?\"}}\n        /* What is the probability for Agentic_Planning=agentic_planning_TRUE? */\n        /* What is the probability for Agentic_Planning=agentic_planning_FALSE? */\n        + [Agentic_Planning]: AI systems making and executing plans based on world models to achieve objectives. {\"instantiations\": [\"agentic_planning_TRUE\", \"agentic_planning_FALSE\"], \"priors\": {\"What is the probability for Agentic_Planning=agentic_planning_TRUE?\": \"%?\", \"What is the probability for Agentic_Planning=agentic_planning_FALSE?\": \"%?\"}}\n        /* What is the probability for Strategic_Awareness=strategic_awareness_TRUE? */\n        /* What is the probability for Strategic_Awareness=strategic_awareness_FALSE? */\n        + [Strategic_Awareness]: AI systems with models accurately representing power dynamics with humans. {\"instantiations\": [\"strategic_awareness_TRUE\", \"strategic_awareness_FALSE\"], \"priors\": {\"What is the probability for Strategic_Awareness=strategic_awareness_TRUE?\": \"%?\", \"What is the probability for Strategic_Awareness=strategic_awareness_FALSE?\": \"%?\"}}\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE? */\n      + [Difficulty_Of_Alignment]: It is harder to build aligned systems than misaligned systems that are attractive to deploy. {\"instantiations\": [\"difficulty_of_alignment_TRUE\", \"difficulty_of_alignment_FALSE\"], \"priors\": {\"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE?\": \"%?\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\"}}\n        /* What is the probability for Instrumental_Convergence=instrumental_convergence_TRUE? */\n        /* What is the probability for Instrumental_Convergence=instrumental_convergence_FALSE? */\n        + [Instrumental_Convergence]: AI systems with misaligned objectives tend to seek power as an instrumental goal. {\"instantiations\": [\"instrumental_convergence_TRUE\", \"instrumental_convergence_FALSE\"], \"priors\": {\"What is the probability for Instrumental_Convergence=instrumental_convergence_TRUE?\": \"%?\", \"What is the probability for Instrumental_Convergence=instrumental_convergence_FALSE?\": \"%?\"}}\n        /* What is the probability for Problems_With_Proxies=problems_with_proxies_TRUE? */\n        /* What is the probability for Problems_With_Proxies=problems_with_proxies_FALSE? */\n        + [Problems_With_Proxies]: Optimizing for proxy objectives breaks correlations with intended goals. {\"instantiations\": [\"problems_with_proxies_TRUE\", \"problems_with_proxies_FALSE\"], \"priors\": {\"What is the probability for Problems_With_Proxies=problems_with_proxies_TRUE?\": \"%?\", \"What is the probability for Problems_With_Proxies=problems_with_proxies_FALSE?\": \"%?\"}}\n        /* What is the probability for Problems_With_Search=problems_with_search_TRUE? */\n        /* What is the probability for Problems_With_Search=problems_with_search_FALSE? */\n        + [Problems_With_Search]: Search processes can yield systems pursuing different objectives than intended. {\"instantiations\": [\"problems_with_search_TRUE\", \"problems_with_search_FALSE\"], \"priors\": {\"What is the probability for Problems_With_Search=problems_with_search_TRUE?\": \"%?\", \"What is the probability for Problems_With_Search=problems_with_search_FALSE?\": \"%?\"}}\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE? */\n      + [Deployment_Decisions]: Decisions to deploy potentially misaligned AI systems. {\"instantiations\": [\"deployment_decisions_DEPLOY\", \"deployment_decisions_WITHHOLD\"], \"priors\": {\"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY?\": \"%?\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"%?\"}, \"posteriors\": {\"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\"}}\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK? */\n        + [Incentives_To_Build_APS]: Strong incentives to build and deploy APS systems. {\"instantiations\": [\"incentives_to_build_aps_STRONG\", \"incentives_to_build_aps_WEAK\"], \"priors\": {\"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG?\": \"%?\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK?\": \"%?\"}, \"posteriors\": {\"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\"}}\n          /* What is the probability for Usefulness_Of_APS=usefulness_of_aps_HIGH? */\n          /* What is the probability for Usefulness_Of_APS=usefulness_of_aps_LOW? */\n          + [Usefulness_Of_APS]: APS systems are very useful for many valuable tasks. {\"instantiations\": [\"usefulness_of_aps_HIGH\", \"usefulness_of_aps_LOW\"], \"priors\": {\"What is the probability for Usefulness_Of_APS=usefulness_of_aps_HIGH?\": \"%?\", \"What is the probability for Usefulness_Of_APS=usefulness_of_aps_LOW?\": \"%?\"}}\n          /* What is the probability for Competitive_Dynamics=competitive_dynamics_STRONG? */\n          /* What is the probability for Competitive_Dynamics=competitive_dynamics_WEAK? */\n          + [Competitive_Dynamics]: Competitive pressures between AI developers. {\"instantiations\": [\"competitive_dynamics_STRONG\", \"competitive_dynamics_WEAK\"], \"priors\": {\"What is the probability for Competitive_Dynamics=competitive_dynamics_STRONG?\": \"%?\", \"What is the probability for Competitive_Dynamics=competitive_dynamics_WEAK?\": \"%?\"}}\n        /* What is the probability for Deception_By_AI=deception_by_ai_TRUE? */\n        /* What is the probability for Deception_By_AI=deception_by_ai_FALSE? */\n        + [Deception_By_AI]: AI systems deceiving humans about their true objectives. {\"instantiations\": [\"deception_by_ai_TRUE\", \"deception_by_ai_FALSE\"], \"priors\": {\"What is the probability for Deception_By_AI=deception_by_ai_TRUE?\": \"%?\", \"What is the probability for Deception_By_AI=deception_by_ai_FALSE?\": \"%?\"}}\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n    + [Corrective_Feedback]: Human society implementing corrections after observing problems. {\"instantiations\": [\"corrective_feedback_EFFECTIVE\", \"corrective_feedback_INEFFECTIVE\"], \"priors\": {\"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"%?\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\"}}\n      /* What is the probability for Warning_Shots=warning_shots_OBSERVED? */\n      /* What is the probability for Warning_Shots=warning_shots_UNOBSERVED? */\n      + [Warning_Shots]: Observable failures in weaker systems before catastrophic risks. {\"instantiations\": [\"warning_shots_OBSERVED\", \"warning_shots_UNOBSERVED\"], \"priors\": {\"What is the probability for Warning_Shots=warning_shots_OBSERVED?\": \"%?\", \"What is the probability for Warning_Shots=warning_shots_UNOBSERVED?\": \"%?\"}}\n      /* What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n      /* What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n      + [Rapid_Capability_Escalation]: AI capabilities escalating very rapidly, allowing little time for correction. {\"instantiations\": [\"rapid_capability_escalation_TRUE\", \"rapid_capability_escalation_FALSE\"], \"priors\": {\"What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"%?\", \"What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"%?\"}}\n/* What is the probability for Barriers_To_Understanding=barriers_to_understanding_HIGH? */\n/* What is the probability for Barriers_To_Understanding=barriers_to_understanding_LOW? */\n[Barriers_To_Understanding]: Difficulty in understanding the internal workings of advanced AI systems. {\"instantiations\": [\"barriers_to_understanding_HIGH\", \"barriers_to_understanding_LOW\"], \"priors\": {\"What is the probability for Barriers_To_Understanding=barriers_to_understanding_HIGH?\": \"%?\", \"What is the probability for Barriers_To_Understanding=barriers_to_understanding_LOW?\": \"%?\"}}\n/* What is the probability for Adversarial_Dynamics=adversarial_dynamics_TRUE? */\n/* What is the probability for Adversarial_Dynamics=adversarial_dynamics_FALSE? */\n[Adversarial_Dynamics]: Potentially adversarial relationships between humans and power-seeking AI. {\"instantiations\": [\"adversarial_dynamics_TRUE\", \"adversarial_dynamics_FALSE\"], \"priors\": {\"What is the probability for Adversarial_Dynamics=adversarial_dynamics_TRUE?\": \"%?\", \"What is the probability for Adversarial_Dynamics=adversarial_dynamics_FALSE?\": \"%?\"}}\n/* What is the probability for Stakes_Of_Error=stakes_of_error_HIGH? */\n/* What is the probability for Stakes_Of_Error=stakes_of_error_LOW? */\n[Stakes_Of_Error]: The escalating impact of mistakes with power-seeking AI systems. {\"instantiations\": [\"stakes_of_error_HIGH\", \"stakes_of_error_LOW\"], \"priors\": {\"What is the probability for Stakes_Of_Error=stakes_of_error_HIGH?\": \"%?\", \"What is the probability for Stakes_Of_Error=stakes_of_error_LOW?\": \"%?\"}}\n...\n\n\n\n\n\nCode\n# Load and print the content of the 'FULL_BayesDownQuestions.md' file\nwith open(\"FULL_BayesDownQuestions.md\", \"r\") as f:\n    file_content = f.read()\n    print(file_content)\n\n\n# BayesDown Representation with Placeholder Probabilities\n\n/* This file contains BayesDown syntax with placeholder probabilities.\n   Replace the placeholders with actual probability values based on the \n   questions in the comments. */\n\n/* What is the probability for Existential_Catastrophe=existential_catastrophe_TRUE? */\n/* What is the probability for Existential_Catastrophe=existential_catastrophe_FALSE? */\n[Existential_Catastrophe]: The destruction of humanity's long-term potential due to AI systems we've lost control over. {\"instantiations\": [\"existential_catastrophe_TRUE\", \"existential_catastrophe_FALSE\"], \"priors\": {\"What is the probability for Existential_Catastrophe=existential_catastrophe_TRUE?\": \"%?\", \"What is the probability for Existential_Catastrophe=existential_catastrophe_FALSE?\": \"%?\"}}\n/* What is the probability for Human_Disempowerment=human_disempowerment_TRUE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_FALSE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE? */\n/* What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE? */\n[Human_Disempowerment]: Permanent and collective disempowerment of humanity relative to AI systems. {\"instantiations\": [\"human_disempowerment_TRUE\", \"human_disempowerment_FALSE\"], \"priors\": {\"What is the probability for Human_Disempowerment=human_disempowerment_TRUE?\": \"%?\", \"What is the probability for Human_Disempowerment=human_disempowerment_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE?\": \"?%\", \"What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE?\": \"?%\", \"What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE?\": \"?%\", \"What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE?\": \"?%\"}}\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n  /* What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n  + [Scale_Of_Power_Seeking]: Power-seeking by AI systems scaling to the point of permanently disempowering all of humanity. {\"instantiations\": [\"scale_of_power_seeking_TRUE\", \"scale_of_power_seeking_FALSE\"], \"priors\": {\"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE?\": \"%?\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\"}}\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY? */\n    /* What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD? */\n    + [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"], \"priors\": {\"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE?\": \"%?\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\"}}\n      /* What is the probability for APS_Systems=aps_systems_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE? */\n      /* What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE? */\n      + [APS_Systems]: AI systems with advanced capabilities, agentic planning, and strategic awareness. {\"instantiations\": [\"aps_systems_TRUE\", \"aps_systems_FALSE\"], \"priors\": {\"What is the probability for APS_Systems=aps_systems_TRUE?\": \"%?\", \"What is the probability for APS_Systems=aps_systems_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\"}}\n        /* What is the probability for Advanced_AI_Capability=advanced_ai_capability_TRUE? */\n        /* What is the probability for Advanced_AI_Capability=advanced_ai_capability_FALSE? */\n        + [Advanced_AI_Capability]: AI systems that outperform humans on tasks that grant significant power in the world. {\"instantiations\": [\"advanced_ai_capability_TRUE\", \"advanced_ai_capability_FALSE\"], \"priors\": {\"What is the probability for Advanced_AI_Capability=advanced_ai_capability_TRUE?\": \"%?\", \"What is the probability for Advanced_AI_Capability=advanced_ai_capability_FALSE?\": \"%?\"}}\n        /* What is the probability for Agentic_Planning=agentic_planning_TRUE? */\n        /* What is the probability for Agentic_Planning=agentic_planning_FALSE? */\n        + [Agentic_Planning]: AI systems making and executing plans based on world models to achieve objectives. {\"instantiations\": [\"agentic_planning_TRUE\", \"agentic_planning_FALSE\"], \"priors\": {\"What is the probability for Agentic_Planning=agentic_planning_TRUE?\": \"%?\", \"What is the probability for Agentic_Planning=agentic_planning_FALSE?\": \"%?\"}}\n        /* What is the probability for Strategic_Awareness=strategic_awareness_TRUE? */\n        /* What is the probability for Strategic_Awareness=strategic_awareness_FALSE? */\n        + [Strategic_Awareness]: AI systems with models accurately representing power dynamics with humans. {\"instantiations\": [\"strategic_awareness_TRUE\", \"strategic_awareness_FALSE\"], \"priors\": {\"What is the probability for Strategic_Awareness=strategic_awareness_TRUE?\": \"%?\", \"What is the probability for Strategic_Awareness=strategic_awareness_FALSE?\": \"%?\"}}\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE? */\n      /* What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE? */\n      + [Difficulty_Of_Alignment]: It is harder to build aligned systems than misaligned systems that are attractive to deploy. {\"instantiations\": [\"difficulty_of_alignment_TRUE\", \"difficulty_of_alignment_FALSE\"], \"priors\": {\"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE?\": \"%?\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\"}}\n        /* What is the probability for Instrumental_Convergence=instrumental_convergence_TRUE? */\n        /* What is the probability for Instrumental_Convergence=instrumental_convergence_FALSE? */\n        + [Instrumental_Convergence]: AI systems with misaligned objectives tend to seek power as an instrumental goal. {\"instantiations\": [\"instrumental_convergence_TRUE\", \"instrumental_convergence_FALSE\"], \"priors\": {\"What is the probability for Instrumental_Convergence=instrumental_convergence_TRUE?\": \"%?\", \"What is the probability for Instrumental_Convergence=instrumental_convergence_FALSE?\": \"%?\"}}\n        /* What is the probability for Problems_With_Proxies=problems_with_proxies_TRUE? */\n        /* What is the probability for Problems_With_Proxies=problems_with_proxies_FALSE? */\n        + [Problems_With_Proxies]: Optimizing for proxy objectives breaks correlations with intended goals. {\"instantiations\": [\"problems_with_proxies_TRUE\", \"problems_with_proxies_FALSE\"], \"priors\": {\"What is the probability for Problems_With_Proxies=problems_with_proxies_TRUE?\": \"%?\", \"What is the probability for Problems_With_Proxies=problems_with_proxies_FALSE?\": \"%?\"}}\n        /* What is the probability for Problems_With_Search=problems_with_search_TRUE? */\n        /* What is the probability for Problems_With_Search=problems_with_search_FALSE? */\n        + [Problems_With_Search]: Search processes can yield systems pursuing different objectives than intended. {\"instantiations\": [\"problems_with_search_TRUE\", \"problems_with_search_FALSE\"], \"priors\": {\"What is the probability for Problems_With_Search=problems_with_search_TRUE?\": \"%?\", \"What is the probability for Problems_With_Search=problems_with_search_FALSE?\": \"%?\"}}\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE? */\n      /* What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE? */\n      + [Deployment_Decisions]: Decisions to deploy potentially misaligned AI systems. {\"instantiations\": [\"deployment_decisions_DEPLOY\", \"deployment_decisions_WITHHOLD\"], \"priors\": {\"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY?\": \"%?\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"%?\"}, \"posteriors\": {\"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\"}}\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG? */\n        /* What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK? */\n        + [Incentives_To_Build_APS]: Strong incentives to build and deploy APS systems. {\"instantiations\": [\"incentives_to_build_aps_STRONG\", \"incentives_to_build_aps_WEAK\"], \"priors\": {\"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG?\": \"%?\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK?\": \"%?\"}, \"posteriors\": {\"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\"}}\n          /* What is the probability for Usefulness_Of_APS=usefulness_of_aps_HIGH? */\n          /* What is the probability for Usefulness_Of_APS=usefulness_of_aps_LOW? */\n          + [Usefulness_Of_APS]: APS systems are very useful for many valuable tasks. {\"instantiations\": [\"usefulness_of_aps_HIGH\", \"usefulness_of_aps_LOW\"], \"priors\": {\"What is the probability for Usefulness_Of_APS=usefulness_of_aps_HIGH?\": \"%?\", \"What is the probability for Usefulness_Of_APS=usefulness_of_aps_LOW?\": \"%?\"}}\n          /* What is the probability for Competitive_Dynamics=competitive_dynamics_STRONG? */\n          /* What is the probability for Competitive_Dynamics=competitive_dynamics_WEAK? */\n          + [Competitive_Dynamics]: Competitive pressures between AI developers. {\"instantiations\": [\"competitive_dynamics_STRONG\", \"competitive_dynamics_WEAK\"], \"priors\": {\"What is the probability for Competitive_Dynamics=competitive_dynamics_STRONG?\": \"%?\", \"What is the probability for Competitive_Dynamics=competitive_dynamics_WEAK?\": \"%?\"}}\n        /* What is the probability for Deception_By_AI=deception_by_ai_TRUE? */\n        /* What is the probability for Deception_By_AI=deception_by_ai_FALSE? */\n        + [Deception_By_AI]: AI systems deceiving humans about their true objectives. {\"instantiations\": [\"deception_by_ai_TRUE\", \"deception_by_ai_FALSE\"], \"priors\": {\"What is the probability for Deception_By_AI=deception_by_ai_TRUE?\": \"%?\", \"What is the probability for Deception_By_AI=deception_by_ai_FALSE?\": \"%?\"}}\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n    /* What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n    + [Corrective_Feedback]: Human society implementing corrections after observing problems. {\"instantiations\": [\"corrective_feedback_EFFECTIVE\", \"corrective_feedback_INEFFECTIVE\"], \"priors\": {\"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"%?\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\"}}\n      /* What is the probability for Warning_Shots=warning_shots_OBSERVED? */\n      /* What is the probability for Warning_Shots=warning_shots_UNOBSERVED? */\n      + [Warning_Shots]: Observable failures in weaker systems before catastrophic risks. {\"instantiations\": [\"warning_shots_OBSERVED\", \"warning_shots_UNOBSERVED\"], \"priors\": {\"What is the probability for Warning_Shots=warning_shots_OBSERVED?\": \"%?\", \"What is the probability for Warning_Shots=warning_shots_UNOBSERVED?\": \"%?\"}}\n      /* What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_TRUE? */\n      /* What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_FALSE? */\n      + [Rapid_Capability_Escalation]: AI capabilities escalating very rapidly, allowing little time for correction. {\"instantiations\": [\"rapid_capability_escalation_TRUE\", \"rapid_capability_escalation_FALSE\"], \"priors\": {\"What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"%?\", \"What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"%?\"}}\n/* What is the probability for Barriers_To_Understanding=barriers_to_understanding_HIGH? */\n/* What is the probability for Barriers_To_Understanding=barriers_to_understanding_LOW? */\n[Barriers_To_Understanding]: Difficulty in understanding the internal workings of advanced AI systems. {\"instantiations\": [\"barriers_to_understanding_HIGH\", \"barriers_to_understanding_LOW\"], \"priors\": {\"What is the probability for Barriers_To_Understanding=barriers_to_understanding_HIGH?\": \"%?\", \"What is the probability for Barriers_To_Understanding=barriers_to_understanding_LOW?\": \"%?\"}}\n/* What is the probability for Adversarial_Dynamics=adversarial_dynamics_TRUE? */\n/* What is the probability for Adversarial_Dynamics=adversarial_dynamics_FALSE? */\n[Adversarial_Dynamics]: Potentially adversarial relationships between humans and power-seeking AI. {\"instantiations\": [\"adversarial_dynamics_TRUE\", \"adversarial_dynamics_FALSE\"], \"priors\": {\"What is the probability for Adversarial_Dynamics=adversarial_dynamics_TRUE?\": \"%?\", \"What is the probability for Adversarial_Dynamics=adversarial_dynamics_FALSE?\": \"%?\"}}\n/* What is the probability for Stakes_Of_Error=stakes_of_error_HIGH? */\n/* What is the probability for Stakes_Of_Error=stakes_of_error_LOW? */\n[Stakes_Of_Error]: The escalating impact of mistakes with power-seeking AI systems. {\"instantiations\": [\"stakes_of_error_HIGH\", \"stakes_of_error_LOW\"], \"priors\": {\"What is the probability for Stakes_Of_Error=stakes_of_error_HIGH?\": \"%?\", \"What is the probability for Stakes_Of_Error=stakes_of_error_LOW?\": \"%?\"}}\n\n\n\n\n\nCode\n# Generate BayesDown format\nbayesdown_questions = extract_bayesdown_questions_fixed(\n    \"ArgDown_WithQuestions.csv\",\n    \"BayesDownQuestions.md\",\n    include_questions_as_comments=False\n)\n\n# Display a preview of the format\nprint(\n\n)\nprint(bayesdown_questions[:50000] + \"...\\n\")\n\n\nLoading CSV from ArgDown_WithQuestions.csv...\nSuccessfully loaded CSV with 23 rows.\nGenerating BayesDown syntax with placeholder probabilities...\nBayesDown Questions saved to BayesDownQuestions.md\n\n[Existential_Catastrophe]: The destruction of humanity's long-term potential due to AI systems we've lost control over. {\"instantiations\": [\"existential_catastrophe_TRUE\", \"existential_catastrophe_FALSE\"], \"priors\": {\"What is the probability for Existential_Catastrophe=existential_catastrophe_TRUE?\": \"%?\", \"What is the probability for Existential_Catastrophe=existential_catastrophe_FALSE?\": \"%?\"}}\n[Human_Disempowerment]: Permanent and collective disempowerment of humanity relative to AI systems. {\"instantiations\": [\"human_disempowerment_TRUE\", \"human_disempowerment_FALSE\"], \"priors\": {\"What is the probability for Human_Disempowerment=human_disempowerment_TRUE?\": \"%?\", \"What is the probability for Human_Disempowerment=human_disempowerment_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE?\": \"?%\", \"What is the probability for Human_Disempowerment=human_disempowerment_TRUE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE?\": \"?%\", \"What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE?\": \"?%\", \"What is the probability for Human_Disempowerment=human_disempowerment_FALSE if Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE?\": \"?%\"}}\n  + [Scale_Of_Power_Seeking]: Power-seeking by AI systems scaling to the point of permanently disempowering all of humanity. {\"instantiations\": [\"scale_of_power_seeking_TRUE\", \"scale_of_power_seeking_FALSE\"], \"priors\": {\"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE?\": \"%?\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_TRUE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_TRUE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"?%\", \"What is the probability for Scale_Of_Power_Seeking=scale_of_power_seeking_FALSE if Misaligned_Power_Seeking=misaligned_power_seeking_FALSE, Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"?%\"}}\n    + [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"], \"priors\": {\"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE?\": \"%?\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_TRUE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_TRUE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_TRUE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_DEPLOY?\": \"?%\", \"What is the probability for Misaligned_Power_Seeking=misaligned_power_seeking_FALSE if APS_Systems=aps_systems_FALSE, Difficulty_Of_Alignment=difficulty_of_alignment_FALSE, Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"?%\"}}\n      + [APS_Systems]: AI systems with advanced capabilities, agentic planning, and strategic awareness. {\"instantiations\": [\"aps_systems_TRUE\", \"aps_systems_FALSE\"], \"priors\": {\"What is the probability for APS_Systems=aps_systems_TRUE?\": \"%?\", \"What is the probability for APS_Systems=aps_systems_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_TRUE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_TRUE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_TRUE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_TRUE?\": \"?%\", \"What is the probability for APS_Systems=aps_systems_FALSE if Advanced_AI_Capability=advanced_ai_capability_FALSE, Agentic_Planning=agentic_planning_FALSE, Strategic_Awareness=strategic_awareness_FALSE?\": \"?%\"}}\n        + [Advanced_AI_Capability]: AI systems that outperform humans on tasks that grant significant power in the world. {\"instantiations\": [\"advanced_ai_capability_TRUE\", \"advanced_ai_capability_FALSE\"], \"priors\": {\"What is the probability for Advanced_AI_Capability=advanced_ai_capability_TRUE?\": \"%?\", \"What is the probability for Advanced_AI_Capability=advanced_ai_capability_FALSE?\": \"%?\"}}\n        + [Agentic_Planning]: AI systems making and executing plans based on world models to achieve objectives. {\"instantiations\": [\"agentic_planning_TRUE\", \"agentic_planning_FALSE\"], \"priors\": {\"What is the probability for Agentic_Planning=agentic_planning_TRUE?\": \"%?\", \"What is the probability for Agentic_Planning=agentic_planning_FALSE?\": \"%?\"}}\n        + [Strategic_Awareness]: AI systems with models accurately representing power dynamics with humans. {\"instantiations\": [\"strategic_awareness_TRUE\", \"strategic_awareness_FALSE\"], \"priors\": {\"What is the probability for Strategic_Awareness=strategic_awareness_TRUE?\": \"%?\", \"What is the probability for Strategic_Awareness=strategic_awareness_FALSE?\": \"%?\"}}\n      + [Difficulty_Of_Alignment]: It is harder to build aligned systems than misaligned systems that are attractive to deploy. {\"instantiations\": [\"difficulty_of_alignment_TRUE\", \"difficulty_of_alignment_FALSE\"], \"priors\": {\"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE?\": \"%?\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_TRUE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_TRUE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_TRUE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_TRUE?\": \"?%\", \"What is the probability for Difficulty_Of_Alignment=difficulty_of_alignment_FALSE if Instrumental_Convergence=instrumental_convergence_FALSE, Problems_With_Proxies=problems_with_proxies_FALSE, Problems_With_Search=problems_with_search_FALSE?\": \"?%\"}}\n        + [Instrumental_Convergence]: AI systems with misaligned objectives tend to seek power as an instrumental goal. {\"instantiations\": [\"instrumental_convergence_TRUE\", \"instrumental_convergence_FALSE\"], \"priors\": {\"What is the probability for Instrumental_Convergence=instrumental_convergence_TRUE?\": \"%?\", \"What is the probability for Instrumental_Convergence=instrumental_convergence_FALSE?\": \"%?\"}}\n        + [Problems_With_Proxies]: Optimizing for proxy objectives breaks correlations with intended goals. {\"instantiations\": [\"problems_with_proxies_TRUE\", \"problems_with_proxies_FALSE\"], \"priors\": {\"What is the probability for Problems_With_Proxies=problems_with_proxies_TRUE?\": \"%?\", \"What is the probability for Problems_With_Proxies=problems_with_proxies_FALSE?\": \"%?\"}}\n        + [Problems_With_Search]: Search processes can yield systems pursuing different objectives than intended. {\"instantiations\": [\"problems_with_search_TRUE\", \"problems_with_search_FALSE\"], \"priors\": {\"What is the probability for Problems_With_Search=problems_with_search_TRUE?\": \"%?\", \"What is the probability for Problems_With_Search=problems_with_search_FALSE?\": \"%?\"}}\n      + [Deployment_Decisions]: Decisions to deploy potentially misaligned AI systems. {\"instantiations\": [\"deployment_decisions_DEPLOY\", \"deployment_decisions_WITHHOLD\"], \"priors\": {\"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY?\": \"%?\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD?\": \"%?\"}, \"posteriors\": {\"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_DEPLOY if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_STRONG, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_TRUE?\": \"?%\", \"What is the probability for Deployment_Decisions=deployment_decisions_WITHHOLD if Incentives_To_Build_APS=incentives_to_build_aps_WEAK, Deception_By_AI=deception_by_ai_FALSE?\": \"?%\"}}\n        + [Incentives_To_Build_APS]: Strong incentives to build and deploy APS systems. {\"instantiations\": [\"incentives_to_build_aps_STRONG\", \"incentives_to_build_aps_WEAK\"], \"priors\": {\"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG?\": \"%?\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK?\": \"%?\"}, \"posteriors\": {\"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_STRONG if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_HIGH, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_STRONG?\": \"?%\", \"What is the probability for Incentives_To_Build_APS=incentives_to_build_aps_WEAK if Usefulness_Of_APS=usefulness_of_aps_LOW, Competitive_Dynamics=competitive_dynamics_WEAK?\": \"?%\"}}\n          + [Usefulness_Of_APS]: APS systems are very useful for many valuable tasks. {\"instantiations\": [\"usefulness_of_aps_HIGH\", \"usefulness_of_aps_LOW\"], \"priors\": {\"What is the probability for Usefulness_Of_APS=usefulness_of_aps_HIGH?\": \"%?\", \"What is the probability for Usefulness_Of_APS=usefulness_of_aps_LOW?\": \"%?\"}}\n          + [Competitive_Dynamics]: Competitive pressures between AI developers. {\"instantiations\": [\"competitive_dynamics_STRONG\", \"competitive_dynamics_WEAK\"], \"priors\": {\"What is the probability for Competitive_Dynamics=competitive_dynamics_STRONG?\": \"%?\", \"What is the probability for Competitive_Dynamics=competitive_dynamics_WEAK?\": \"%?\"}}\n        + [Deception_By_AI]: AI systems deceiving humans about their true objectives. {\"instantiations\": [\"deception_by_ai_TRUE\", \"deception_by_ai_FALSE\"], \"priors\": {\"What is the probability for Deception_By_AI=deception_by_ai_TRUE?\": \"%?\", \"What is the probability for Deception_By_AI=deception_by_ai_FALSE?\": \"%?\"}}\n    + [Corrective_Feedback]: Human society implementing corrections after observing problems. {\"instantiations\": [\"corrective_feedback_EFFECTIVE\", \"corrective_feedback_INEFFECTIVE\"], \"priors\": {\"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE?\": \"%?\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE?\": \"%?\"}, \"posteriors\": {\"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_EFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_OBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"?%\", \"What is the probability for Corrective_Feedback=corrective_feedback_INEFFECTIVE if Warning_Shots=warning_shots_UNOBSERVED, Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"?%\"}}\n      + [Warning_Shots]: Observable failures in weaker systems before catastrophic risks. {\"instantiations\": [\"warning_shots_OBSERVED\", \"warning_shots_UNOBSERVED\"], \"priors\": {\"What is the probability for Warning_Shots=warning_shots_OBSERVED?\": \"%?\", \"What is the probability for Warning_Shots=warning_shots_UNOBSERVED?\": \"%?\"}}\n      + [Rapid_Capability_Escalation]: AI capabilities escalating very rapidly, allowing little time for correction. {\"instantiations\": [\"rapid_capability_escalation_TRUE\", \"rapid_capability_escalation_FALSE\"], \"priors\": {\"What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_TRUE?\": \"%?\", \"What is the probability for Rapid_Capability_Escalation=rapid_capability_escalation_FALSE?\": \"%?\"}}\n[Barriers_To_Understanding]: Difficulty in understanding the internal workings of advanced AI systems. {\"instantiations\": [\"barriers_to_understanding_HIGH\", \"barriers_to_understanding_LOW\"], \"priors\": {\"What is the probability for Barriers_To_Understanding=barriers_to_understanding_HIGH?\": \"%?\", \"What is the probability for Barriers_To_Understanding=barriers_to_understanding_LOW?\": \"%?\"}}\n[Adversarial_Dynamics]: Potentially adversarial relationships between humans and power-seeking AI. {\"instantiations\": [\"adversarial_dynamics_TRUE\", \"adversarial_dynamics_FALSE\"], \"priors\": {\"What is the probability for Adversarial_Dynamics=adversarial_dynamics_TRUE?\": \"%?\", \"What is the probability for Adversarial_Dynamics=adversarial_dynamics_FALSE?\": \"%?\"}}\n[Stakes_Of_Error]: The escalating impact of mistakes with power-seeking AI systems. {\"instantiations\": [\"stakes_of_error_HIGH\", \"stakes_of_error_LOW\"], \"priors\": {\"What is the probability for Stakes_Of_Error=stakes_of_error_HIGH?\": \"%?\", \"What is the probability for Stakes_Of_Error=stakes_of_error_LOW?\": \"%?\"}}\n...",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#generate-bayesdown-probability-extraction-prompt",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#generate-bayesdown-probability-extraction-prompt",
    "title": "1  ``` {.python .cell-code}",
    "section": "5.5 2.3 Generate BayesDown Probability Extraction Prompt",
    "text": "5.5 2.3 Generate BayesDown Probability Extraction Prompt\nGenerate 2nd Extraction Prompt for Probabilities based on the questions generated from the ‘ArgDown.csv’ extraction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#bayesdown-format-specification",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#bayesdown-format-specification",
    "title": "1  ``` {.python .cell-code}",
    "section": "5.6 2.3.1 BayesDown Format Specification",
    "text": "5.6 2.3.1 BayesDown Format Specification\nBayesDown extends ArgDown with probability data in a structured JSON format to represent Bayesian networks. This intermediate representation bridges the gap between natural language arguments and formal probabilistic models, preserving both narrative structure and quantitative relationships.\n\n5.6.1 Core Structure\nA BayesDown representation consists of:\n\nNodes: Variables or statements in brackets [Node_Name] with descriptive text\nRelationships: Hierarchical structure with indentation and + symbols\nMetadata: JSON objects containing probability information:\n\n{\n  \"instantiations\": [\"state_TRUE\", \"state_FALSE\"],  // Possible states of variable\n  \"priors\": {\n    \"p(state_TRUE)\": \"0.7\",   // Unconditional probability of state_TRUE\n    \"p(state_FALSE)\": \"0.3\"   // Unconditional probability of state_FALSE\n  },\n  \"posteriors\": {\n    \"p(state_TRUE|condition1_TRUE,condition2_FALSE)\": \"0.9\",  // Conditional on parent states\n    \"p(state_TRUE|condition1_FALSE,condition2_TRUE)\": \"0.4\"   // Different parent configuration\n  }\n}\n\n##### Rain-Sprinkler-Lawn Example\n[Grass_Wet]: Concentrated moisture on grass. {\"instantiations\": [\"grass_wet_TRUE\", \"grass_wet_FALSE\"],\n\"priors\": {\"p(grass_wet_TRUE)\": \"0.322\", \"p(grass_wet_FALSE)\": \"0.678\"},\n\"posteriors\": {\"p(grass_wet_TRUE|sprinkler_TRUE,rain_TRUE)\": \"0.99\",\n\"p(grass_wet_TRUE|sprinkler_TRUE,rain_FALSE)\": \"0.9\",\n\"p(grass_wet_TRUE|sprinkler_FALSE,rain_TRUE)\": \"0.8\",\n\"p(grass_wet_TRUE|sprinkler_FALSE,rain_FALSE)\": \"0.0\"}}\n + [Rain]: Water falling from the sky. {\"instantiations\": [\"rain_TRUE\", \"rain_FALSE\"],\n \"priors\": {\"p(rain_TRUE)\": \"0.2\", \"p(rain_FALSE)\": \"0.8\"}}\n + [Sprinkler]: Artificial watering system. {\"instantiations\": [\"sprinkler_TRUE\", \"sprinkler_FALSE\"],\n \"priors\": {\"p(sprinkler_TRUE)\": \"0.44838\", \"p(sprinkler_FALSE)\": \"0.55162\"},\n \"posteriors\": {\"p(sprinkler_TRUE|rain_TRUE)\": \"0.01\", \"p(sprinkler_TRUE|rain_FALSE)\": \"0.4\"}}\n   + [Rain]\n\n\nIn this example:\n\n+ Grass_Wet is the effect/outcome node\n+ Rain and Sprinkler are parent nodes (causes)\n+ Rain also influences Sprinkler (people tend not to use sprinklers when it's raining)\n\nRole in AMTAIR\nBayesDown serves as the critical intermediate representation in the AMTAIR extraction pipeline, bridging between qualitative arguments in AI safety literature and formal Bayesian networks that can be used for probabilistic reasoning and policy evaluation. By preserving both narrative explanation and probabilistic information, it enables the automated extraction of world models while maintaining traceability to the original arguments.\nFor full syntax details, see the BayesDownSyntax.md file in the repository.\n\n2.3.2 Probability Extraction Process\nThe probability extraction pipeline follows these steps:\n\n\nIdentify variables and their possible states\nExtract prior probability statements\nIdentify conditional relationships\nExtract conditional probability statements\nFormat the data in BayesDown syntax\n\n2.3.3 Implementation Steps\nTo extract probabilities and create BayesDown format:\n\nRun the extract_probabilities function on ArgDown text\nProcess the results into a structured format\nValidate the probability distributions (ensure they sum to 1)\nGenerate the enhanced BayesDown representation\n\n2.3.4 Validation and Quality Control\nThe probability extraction process includes validation steps:\n\nEnsuring coherent probability distributions\nChecking for logical consistency in conditional relationships\nVerifying that all required probability statements are present\nHandling missing data with appropriate default values\n\n## 2.4 Prepare 2nd API call\n\n## 2.5 Make BayesDown Probability Extraction API Call\n\n## 2.6 Save BayesDown with Probability Estimates (.csv)\n\n## 2.7 Review & Verify BayesDown Probability Estimates\n\n## 2.7.2 Check the Graph Structure with the ArgDown Sandbox Online\nCopy and paste the BayesDown formatted ... in the ArgDown Sandbox below to quickly verify that the network renders correctly.\n\n## 2.8 Extract BayesDown with Probability Estimates as Dataframe\n\n# 3.0 Data Extraction: BayesDown (.md) to Database (.csv)\n\n# 3. BayesDown to Structured Data: Network Construction\n\n## Extraction Pipeline Overview\n\nThis section implements the core extraction pipeline described in the AMTAIR project documentation (see `PY_TechnicalImplementation.md`), which transforms structured argument representations into formal Bayesian networks through a series of processing steps:\n\n1. **Input**: Text in BayesDown format (see Section 2.3.1)\n2. **Parsing**: Extract nodes, relationships, and probability information\n3. **Structuring**: Organize into a DataFrame with formal relationships\n4. **Enhancement**: Add derived properties and network metrics\n5. **Output**: Structured data ready for Bayesian network construction\n\n### Theoretical Foundation\n\nThis implementation follows the extraction algorithm outlined in the AMTAIR project description:\n\n1. Get nodes: All premises and conclusions from the argument structure\n2. Get edges: Parent-child relationships between nodes\n3. Extract probability distributions: Prior and conditional probabilities\n4. Calculate derived metrics: Network statistics and node classifications\n\nThe resulting structured data maintains the complete information needed to reconstruct the Bayesian network while enabling additional analysis and visualization.\n\n### Role in Thesis Research\n\nThis extraction pipeline represents a key contribution of the Master's thesis, demonstrating how argument structures from AI safety literature can be automatically transformed into formal probabilistic models. While the current implementation focuses on pre-formatted BayesDown, the architecture is designed to be extended with LLM-powered extraction directly from natural language in future work.\n\nThe rain-sprinkler-lawn example serves as a simple but complete test case, demonstrating every step in the pipeline from structured text to interactive Bayesian network visualization.\n\n### 3.1 ExtractBayesDown-Data_v1\nBuild data frame with extractable information from BayesDown\n\n::: {#cell-64 .cell quarto-private-1='{\"key\":\"colab\",\"value\":{\"base_uri\":\"https://localhost:8080/\",\"height\":122}}' outputId='e0bc7224-c20b-4662-ba80-898e88b06523'}\n``` {.python .cell-code}\n# read sprinkler example -- Occam Colab Online\nfile_path_ex_rain = \"https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_carlsmith/BayesDown.md\"\n\n# Use requests.get to fetch content from URL\nresponse = requests.get(file_path_ex_rain)\nresponse.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)\n\n# Read content from the response\nmd_content_ex_rain = response.text\n\nmd_content_ex_rain\n\n'[Existential_Catastrophe]: The destruction of humanity\\'s long-term potential due to AI systems we\\'ve lost control over. {\"instantiations\": [\"existential_catastrophe_TRUE\", \"existential_catastrophe_FALSE\"], \"priors\": {\"p(existential_catastrophe_TRUE)\": \"0.05\", \"p(existential_catastrophe_FALSE)\": \"0.95\"}, \"posteriors\": {\"p(existential_catastrophe_TRUE|human_disempowerment_TRUE)\": \"0.95\", \"p(existential_catastrophe_TRUE|human_disempowerment_FALSE)\": \"0.0\", \"p(existential_catastrophe_FALSE|human_disempowerment_TRUE)\": \"0.05\", \"p(existential_catastrophe_FALSE|human_disempowerment_FALSE)\": \"1.0\"}}\\n- [Human_Disempowerment]: Permanent and collective disempowerment of humanity relative to AI systems. {\"instantiations\": [\"human_disempowerment_TRUE\", \"human_disempowerment_FALSE\"], \"priors\": {\"p(human_disempowerment_TRUE)\": \"0.208\", \"p(human_disempowerment_FALSE)\": \"0.792\"}, \"posteriors\": {\"p(human_disempowerment_TRUE|scale_of_power_seeking_TRUE)\": \"1.0\", \"p(human_disempowerment_TRUE|scale_of_power_seeking_FALSE)\": \"0.0\", \"p(human_disempowerment_FALSE|scale_of_power_seeking_TRUE)\": \"0.0\", \"p(human_disempowerment_FALSE|scale_of_power_seeking_FALSE)\": \"1.0\"}}\\n    - [Scale_Of_Power_Seeking]: Power-seeking by AI systems scaling to the point of permanently disempowering all of humanity. {\"instantiations\": [\"scale_of_power_seeking_TRUE\", \"scale_of_power_seeking_FALSE\"], \"priors\": {\"p(scale_of_power_seeking_TRUE)\": \"0.208\", \"p(scale_of_power_seeking_FALSE)\": \"0.792\"}, \"posteriors\": {\"p(scale_of_power_seeking_TRUE|misaligned_power_seeking_TRUE, corrective_feedback_EFFECTIVE)\": \"0.25\", \"p(scale_of_power_seeking_TRUE|misaligned_power_seeking_TRUE, corrective_feedback_INEFFECTIVE)\": \"0.60\", \"p(scale_of_power_seeking_TRUE|misaligned_power_seeking_FALSE, corrective_feedback_EFFECTIVE)\": \"0.0\", \"p(scale_of_power_seeking_TRUE|misaligned_power_seeking_FALSE, corrective_feedback_INEFFECTIVE)\": \"0.0\", \"p(scale_of_power_seeking_FALSE|misaligned_power_seeking_TRUE, corrective_feedback_EFFECTIVE)\": \"0.75\", \"p(scale_of_power_seeking_FALSE|misaligned_power_seeking_TRUE, corrective_feedback_INEFFECTIVE)\": \"0.40\", \"p(scale_of_power_seeking_FALSE|misaligned_power_seeking_FALSE, corrective_feedback_EFFECTIVE)\": \"1.0\", \"p(scale_of_power_seeking_FALSE|misaligned_power_seeking_FALSE, corrective_feedback_INEFFECTIVE)\": \"1.0\"}}\\n        - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"], \"priors\": {\"p(misaligned_power_seeking_TRUE)\": \"0.338\", \"p(misaligned_power_seeking_FALSE)\": \"0.662\"}, \"posteriors\": {\"p(misaligned_power_seeking_TRUE|aps_systems_TRUE, difficulty_of_alignment_TRUE, deployment_decisions_DEPLOY)\": \"0.90\", \"p(misaligned_power_seeking_TRUE|aps_systems_TRUE, difficulty_of_alignment_TRUE, deployment_decisions_WITHHOLD)\": \"0.10\", \"p(misaligned_power_seeking_TRUE|aps_systems_TRUE, difficulty_of_alignment_FALSE, deployment_decisions_DEPLOY)\": \"0.25\", \"p(misaligned_power_seeking_TRUE|aps_systems_TRUE, difficulty_of_alignment_FALSE, deployment_decisions_WITHHOLD)\": \"0.05\", \"p(misaligned_power_seeking_TRUE|aps_systems_FALSE, difficulty_of_alignment_TRUE, deployment_decisions_DEPLOY)\": \"0.0\", \"p(misaligned_power_seeking_TRUE|aps_systems_FALSE, difficulty_of_alignment_TRUE, deployment_decisions_WITHHOLD)\": \"0.0\", \"p(misaligned_power_seeking_TRUE|aps_systems_FALSE, difficulty_of_alignment_FALSE, deployment_decisions_DEPLOY)\": \"0.0\", \"p(misaligned_power_seeking_TRUE|aps_systems_FALSE, difficulty_of_alignment_FALSE, deployment_decisions_WITHHOLD)\": \"0.0\", \"p(misaligned_power_seeking_FALSE|aps_systems_TRUE, difficulty_of_alignment_TRUE, deployment_decisions_DEPLOY)\": \"0.10\", \"p(misaligned_power_seeking_FALSE|aps_systems_TRUE, difficulty_of_alignment_TRUE, deployment_decisions_WITHHOLD)\": \"0.90\", \"p(misaligned_power_seeking_FALSE|aps_systems_TRUE, difficulty_of_alignment_FALSE, deployment_decisions_DEPLOY)\": \"0.75\", \"p(misaligned_power_seeking_FALSE|aps_systems_TRUE, difficulty_of_alignment_FALSE, deployment_decisions_WITHHOLD)\": \"0.95\", \"p(misaligned_power_seeking_FALSE|aps_systems_FALSE, difficulty_of_alignment_TRUE, deployment_decisions_DEPLOY)\": \"1.0\", \"p(misaligned_power_seeking_FALSE|aps_systems_FALSE, difficulty_of_alignment_TRUE, deployment_decisions_WITHHOLD)\": \"1.0\", \"p(misaligned_power_seeking_FALSE|aps_systems_FALSE, difficulty_of_alignment_FALSE, deployment_decisions_DEPLOY)\": \"1.0\", \"p(misaligned_power_seeking_FALSE|aps_systems_FALSE, difficulty_of_alignment_FALSE, deployment_decisions_WITHHOLD)\": \"1.0\"}}\\n            - [APS_Systems]: AI systems with advanced capabilities, agentic planning, and strategic awareness. {\"instantiations\": [\"aps_systems_TRUE\", \"aps_systems_FALSE\"], \"priors\": {\"p(aps_systems_TRUE)\": \"0.65\", \"p(aps_systems_FALSE)\": \"0.35\"}, \"posteriors\": {\"p(aps_systems_TRUE|advanced_ai_capability_TRUE, agentic_planning_TRUE, strategic_awareness_TRUE)\": \"1.0\", \"p(aps_systems_TRUE|advanced_ai_capability_TRUE, agentic_planning_TRUE, strategic_awareness_FALSE)\": \"0.0\", \"p(aps_systems_TRUE|advanced_ai_capability_TRUE, agentic_planning_FALSE, strategic_awareness_TRUE)\": \"0.0\", \"p(aps_systems_TRUE|advanced_ai_capability_TRUE, agentic_planning_FALSE, strategic_awareness_FALSE)\": \"0.0\", \"p(aps_systems_TRUE|advanced_ai_capability_FALSE, agentic_planning_TRUE, strategic_awareness_TRUE)\": \"0.0\", \"p(aps_systems_TRUE|advanced_ai_capability_FALSE, agentic_planning_TRUE, strategic_awareness_FALSE)\": \"0.0\", \"p(aps_systems_TRUE|advanced_ai_capability_FALSE, agentic_planning_FALSE, strategic_awareness_TRUE)\": \"0.0\", \"p(aps_systems_TRUE|advanced_ai_capability_FALSE, agentic_planning_FALSE, strategic_awareness_FALSE)\": \"0.0\", \"p(aps_systems_FALSE|advanced_ai_capability_TRUE, agentic_planning_TRUE, strategic_awareness_TRUE)\": \"0.0\", \"p(aps_systems_FALSE|advanced_ai_capability_TRUE, agentic_planning_TRUE, strategic_awareness_FALSE)\": \"1.0\", \"p(aps_systems_FALSE|advanced_ai_capability_TRUE, agentic_planning_FALSE, strategic_awareness_TRUE)\": \"1.0\", \"p(aps_systems_FALSE|advanced_ai_capability_TRUE, agentic_planning_FALSE, strategic_awareness_FALSE)\": \"1.0\", \"p(aps_systems_FALSE|advanced_ai_capability_FALSE, agentic_planning_TRUE, strategic_awareness_TRUE)\": \"1.0\", \"p(aps_systems_FALSE|advanced_ai_capability_FALSE, agentic_planning_TRUE, strategic_awareness_FALSE)\": \"1.0\", \"p(aps_systems_FALSE|advanced_ai_capability_FALSE, agentic_planning_FALSE, strategic_awareness_TRUE)\": \"1.0\", \"p(aps_systems_FALSE|advanced_ai_capability_FALSE, agentic_planning_FALSE, strategic_awareness_FALSE)\": \"1.0\"}}\\n                - [Advanced_AI_Capability]: AI systems that outperform humans on tasks that grant significant power in the world. {\"instantiations\": [\"advanced_ai_capability_TRUE\", \"advanced_ai_capability_FALSE\"], \"priors\": {\"p(advanced_ai_capability_TRUE)\": \"0.80\", \"p(advanced_ai_capability_FALSE)\": \"0.20\"}}\\n                - [Agentic_Planning]: AI systems making and executing plans based on world models to achieve objectives. {\"instantiations\": [\"agentic_planning_TRUE\", \"agentic_planning_FALSE\"], \"priors\": {\"p(agentic_planning_TRUE)\": \"0.85\", \"p(agentic_planning_FALSE)\": \"0.15\"}}\\n                - [Strategic_Awareness]: AI systems with models accurately representing power dynamics with humans. {\"instantiations\": [\"strategic_awareness_TRUE\", \"strategic_awareness_FALSE\"], \"priors\": {\"p(strategic_awareness_TRUE)\": \"0.75\", \"p(strategic_awareness_FALSE)\": \"0.25\"}}\\n            - [Difficulty_Of_Alignment]: It is harder to build aligned systems than misaligned systems that are attractive to deploy. {\"instantiations\": [\"difficulty_of_alignment_TRUE\", \"difficulty_of_alignment_FALSE\"], \"priors\": {\"p(difficulty_of_alignment_TRUE)\": \"0.40\", \"p(difficulty_of_alignment_FALSE)\": \"0.60\"}, \"posteriors\": {\"p(difficulty_of_alignment_TRUE|instrumental_convergence_TRUE, problems_with_proxies_TRUE, problems_with_search_TRUE)\": \"0.85\", \"p(difficulty_of_alignment_TRUE|instrumental_convergence_TRUE, problems_with_proxies_TRUE, problems_with_search_FALSE)\": \"0.70\", \"p(difficulty_of_alignment_TRUE|instrumental_convergence_TRUE, problems_with_proxies_FALSE, problems_with_search_TRUE)\": \"0.60\", \"p(difficulty_of_alignment_TRUE|instrumental_convergence_TRUE, problems_with_proxies_FALSE, problems_with_search_FALSE)\": \"0.40\", \"p(difficulty_of_alignment_TRUE|instrumental_convergence_FALSE, problems_with_proxies_TRUE, problems_with_search_TRUE)\": \"0.55\", \"p(difficulty_of_alignment_TRUE|instrumental_convergence_FALSE, problems_with_proxies_TRUE, problems_with_search_FALSE)\": \"0.40\", \"p(difficulty_of_alignment_TRUE|instrumental_convergence_FALSE, problems_with_proxies_FALSE, problems_with_search_TRUE)\": \"0.30\", \"p(difficulty_of_alignment_TRUE|instrumental_convergence_FALSE, problems_with_proxies_FALSE, problems_with_search_FALSE)\": \"0.10\", \"p(difficulty_of_alignment_FALSE|instrumental_convergence_TRUE, problems_with_proxies_TRUE, problems_with_search_TRUE)\": \"0.15\", \"p(difficulty_of_alignment_FALSE|instrumental_convergence_TRUE, problems_with_proxies_TRUE, problems_with_search_FALSE)\": \"0.30\", \"p(difficulty_of_alignment_FALSE|instrumental_convergence_TRUE, problems_with_proxies_FALSE, problems_with_search_TRUE)\": \"0.40\", \"p(difficulty_of_alignment_FALSE|instrumental_convergence_TRUE, problems_with_proxies_FALSE, problems_with_search_FALSE)\": \"0.60\", \"p(difficulty_of_alignment_FALSE|instrumental_convergence_FALSE, problems_with_proxies_TRUE, problems_with_search_TRUE)\": \"0.45\", \"p(difficulty_of_alignment_FALSE|instrumental_convergence_FALSE, problems_with_proxies_TRUE, problems_with_search_FALSE)\": \"0.60\", \"p(difficulty_of_alignment_FALSE|instrumental_convergence_FALSE, problems_with_proxies_FALSE, problems_with_search_TRUE)\": \"0.70\", \"p(difficulty_of_alignment_FALSE|instrumental_convergence_FALSE, problems_with_proxies_FALSE, problems_with_search_FALSE)\": \"0.90\"}}\\n                - [Instrumental_Convergence]: AI systems with misaligned objectives tend to seek power as an instrumental goal. {\"instantiations\": [\"instrumental_convergence_TRUE\", \"instrumental_convergence_FALSE\"], \"priors\": {\"p(instrumental_convergence_TRUE)\": \"0.75\", \"p(instrumental_convergence_FALSE)\": \"0.25\"}}\\n                - [Problems_With_Proxies]: Optimizing for proxy objectives breaks correlations with intended goals. {\"instantiations\": [\"problems_with_proxies_TRUE\", \"problems_with_proxies_FALSE\"], \"priors\": {\"p(problems_with_proxies_TRUE)\": \"0.80\", \"p(problems_with_proxies_FALSE)\": \"0.20\"}}\\n                - [Problems_With_Search]: Search processes can yield systems pursuing different objectives than intended. {\"instantiations\": [\"problems_with_search_TRUE\", \"problems_with_search_FALSE\"], \"priors\": {\"p(problems_with_search_TRUE)\": \"0.70\", \"p(problems_with_search_FALSE)\": \"0.30\"}}\\n            - [Deployment_Decisions]: Decisions to deploy potentially misaligned AI systems. {\"instantiations\": [\"deployment_decisions_DEPLOY\", \"deployment_decisions_WITHHOLD\"], \"priors\": {\"p(deployment_decisions_DEPLOY)\": \"0.70\", \"p(deployment_decisions_WITHHOLD)\": \"0.30\"}, \"posteriors\": {\"p(deployment_decisions_DEPLOY|incentives_to_build_aps_STRONG, deception_by_ai_TRUE)\": \"0.90\", \"p(deployment_decisions_DEPLOY|incentives_to_build_aps_STRONG, deception_by_ai_FALSE)\": \"0.75\", \"p(deployment_decisions_DEPLOY|incentives_to_build_aps_WEAK, deception_by_ai_TRUE)\": \"0.60\", \"p(deployment_decisions_DEPLOY|incentives_to_build_aps_WEAK, deception_by_ai_FALSE)\": \"0.30\", \"p(deployment_decisions_WITHHOLD|incentives_to_build_aps_STRONG, deception_by_ai_TRUE)\": \"0.10\", \"p(deployment_decisions_WITHHOLD|incentives_to_build_aps_STRONG, deception_by_ai_FALSE)\": \"0.25\", \"p(deployment_decisions_WITHHOLD|incentives_to_build_aps_WEAK, deception_by_ai_TRUE)\": \"0.40\", \"p(deployment_decisions_WITHHOLD|incentives_to_build_aps_WEAK, deception_by_ai_FALSE)\": \"0.70\"}}\\n                - [Incentives_To_Build_APS]: Strong incentives to build and deploy APS systems. {\"instantiations\": [\"incentives_to_build_aps_STRONG\", \"incentives_to_build_aps_WEAK\"], \"priors\": {\"p(incentives_to_build_aps_STRONG)\": \"0.80\", \"p(incentives_to_build_aps_WEAK)\": \"0.20\"}, \"posteriors\": {\"p(incentives_to_build_aps_STRONG|usefulness_of_aps_HIGH, competitive_dynamics_STRONG)\": \"0.95\", \"p(incentives_to_build_aps_STRONG|usefulness_of_aps_HIGH, competitive_dynamics_WEAK)\": \"0.80\", \"p(incentives_to_build_aps_STRONG|usefulness_of_aps_LOW, competitive_dynamics_STRONG)\": \"0.70\", \"p(incentives_to_build_aps_STRONG|usefulness_of_aps_LOW, competitive_dynamics_WEAK)\": \"0.30\", \"p(incentives_to_build_aps_WEAK|usefulness_of_aps_HIGH, competitive_dynamics_STRONG)\": \"0.05\", \"p(incentives_to_build_aps_WEAK|usefulness_of_aps_HIGH, competitive_dynamics_WEAK)\": \"0.20\", \"p(incentives_to_build_aps_WEAK|usefulness_of_aps_LOW, competitive_dynamics_STRONG)\": \"0.30\", \"p(incentives_to_build_aps_WEAK|usefulness_of_aps_LOW, competitive_dynamics_WEAK)\": \"0.70\"}}\\n                    - [Usefulness_Of_APS]: APS systems are very useful for many valuable tasks. {\"instantiations\": [\"usefulness_of_aps_HIGH\", \"usefulness_of_aps_LOW\"], \"priors\": {\"p(usefulness_of_aps_HIGH)\": \"0.85\", \"p(usefulness_of_aps_LOW)\": \"0.15\"}}\\n                    - [Competitive_Dynamics]: Competitive pressures between AI developers. {\"instantiations\": [\"competitive_dynamics_STRONG\", \"competitive_dynamics_WEAK\"], \"priors\": {\"p(competitive_dynamics_STRONG)\": \"0.75\", \"p(competitive_dynamics_WEAK)\": \"0.25\"}}\\n                - [Deception_By_AI]: AI systems deceiving humans about their true objectives. {\"instantiations\": [\"deception_by_ai_TRUE\", \"deception_by_ai_FALSE\"], \"priors\": {\"p(deception_by_ai_TRUE)\": \"0.50\", \"p(deception_by_ai_FALSE)\": \"0.50\"}}\\n        - [Corrective_Feedback]: Human society implementing corrections after observing problems. {\"instantiations\": [\"corrective_feedback_EFFECTIVE\", \"corrective_feedback_INEFFECTIVE\"], \"priors\": {\"p(corrective_feedback_EFFECTIVE)\": \"0.60\", \"p(corrective_feedback_INEFFECTIVE)\": \"0.40\"}, \"posteriors\": {\"p(corrective_feedback_EFFECTIVE|warning_shots_OBSERVED, rapid_capability_escalation_TRUE)\": \"0.40\", \"p(corrective_feedback_EFFECTIVE|warning_shots_OBSERVED, rapid_capability_escalation_FALSE)\": \"0.80\", \"p(corrective_feedback_EFFECTIVE|warning_shots_UNOBSERVED, rapid_capability_escalation_TRUE)\": \"0.15\", \"p(corrective_feedback_EFFECTIVE|warning_shots_UNOBSERVED, rapid_capability_escalation_FALSE)\": \"0.50\", \"p(corrective_feedback_INEFFECTIVE|warning_shots_OBSERVED, rapid_capability_escalation_TRUE)\": \"0.60\", \"p(corrective_feedback_INEFFECTIVE|warning_shots_OBSERVED, rapid_capability_escalation_FALSE)\": \"0.20\", \"p(corrective_feedback_INEFFECTIVE|warning_shots_UNOBSERVED, rapid_capability_escalation_TRUE)\": \"0.85\", \"p(corrective_feedback_INEFFECTIVE|warning_shots_UNOBSERVED, rapid_capability_escalation_FALSE)\": \"0.50\"}}\\n            - [Warning_Shots]: Observable failures in weaker systems before catastrophic risks. {\"instantiations\": [\"warning_shots_OBSERVED\", \"warning_shots_UNOBSERVED\"], \"priors\": {\"p(warning_shots_OBSERVED)\": \"0.70\", \"p(warning_shots_UNOBSERVED)\": \"0.30\"}}\\n            - [Rapid_Capability_Escalation]: AI capabilities escalating very rapidly, allowing little time for correction. {\"instantiations\": [\"rapid_capability_escalation_TRUE\", \"rapid_capability_escalation_FALSE\"], \"priors\": {\"p(rapid_capability_escalation_TRUE)\": \"0.45\", \"p(rapid_capability_escalation_FALSE)\": \"0.55\"}}\\n[Barriers_To_Understanding]: Difficulty in understanding the internal workings of advanced AI systems. {\"instantiations\": [\"barriers_to_understanding_HIGH\", \"barriers_to_understanding_LOW\"], \"priors\": {\"p(barriers_to_understanding_HIGH)\": \"0.70\", \"p(barriers_to_understanding_LOW)\": \"0.30\"}, \"posteriors\": {\"p(barriers_to_understanding_HIGH|misaligned_power_seeking_TRUE)\": \"0.85\", \"p(barriers_to_understanding_HIGH|misaligned_power_seeking_FALSE)\": \"0.60\", \"p(barriers_to_understanding_LOW|misaligned_power_seeking_TRUE)\": \"0.15\", \"p(barriers_to_understanding_LOW|misaligned_power_seeking_FALSE)\": \"0.40\"}}\\n- [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"], \"priors\": {\"p(misaligned_power_seeking_TRUE)\": \"0.338\", \"p(misaligned_power_seeking_FALSE)\": \"0.662\"}}\\n[Adversarial_Dynamics]: Potentially adversarial relationships between humans and power-seeking AI. {\"instantiations\": [\"adversarial_dynamics_TRUE\", \"adversarial_dynamics_FALSE\"], \"priors\": {\"p(adversarial_dynamics_TRUE)\": \"0.60\", \"p(adversarial_dynamics_FALSE)\": \"0.40\"}, \"posteriors\": {\"p(adversarial_dynamics_TRUE|misaligned_power_seeking_TRUE)\": \"0.95\", \"p(adversarial_dynamics_TRUE|misaligned_power_seeking_FALSE)\": \"0.10\", \"p(adversarial_dynamics_FALSE|misaligned_power_seeking_TRUE)\": \"0.05\", \"p(adversarial_dynamics_FALSE|misaligned_power_seeking_FALSE)\": \"0.90\"}}\\n- [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"], \"priors\": {\"p(misaligned_power_seeking_TRUE)\": \"0.338\", \"p(misaligned_power_seeking_FALSE)\": \"0.662\"}}\\n[Stakes_Of_Error]: The escalating impact of mistakes with power-seeking AI systems. {\"instantiations\": [\"stakes_of_error_HIGH\", \"stakes_of_error_LOW\"], \"priors\": {\"p(stakes_of_error_HIGH)\": \"0.85\", \"p(stakes_of_error_LOW)\": \"0.15\"}, \"posteriors\": {\"p(stakes_of_error_HIGH|misaligned_power_seeking_TRUE)\": \"0.95\", \"p(stakes_of_error_HIGH|misaligned_power_seeking_FALSE)\": \"0.50\", \"p(stakes_of_error_LOW|misaligned_power_seeking_TRUE)\": \"0.05\", \"p(stakes_of_error_LOW|misaligned_power_seeking_FALSE)\": \"0.50\"}}\\n- [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {\"instantiations\": [\"misaligned_power_seeking_TRUE\", \"misaligned_power_seeking_FALSE\"], \"priors\": {\"p(misaligned_power_seeking_TRUE)\": \"0.338\", \"p(misaligned_power_seeking_FALSE)\": \"0.662\"}}\\n'\n\n:::",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#test-bayesdown-extraction",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#test-bayesdown-extraction",
    "title": "1  ``` {.python .cell-code}",
    "section": "5.7 3.1.2 Test BayesDown Extraction",
    "text": "5.7 3.1.2 Test BayesDown Extraction\n\n\nCode\ndisplay(Markdown(md_content_ex_rain)) # view BayesDown file formatted as MarkDown\n\n\n[Existential_Catastrophe]: The destruction of humanity’s long-term potential due to AI systems we’ve lost control over. {“instantiations”: [“existential_catastrophe_TRUE”, “existential_catastrophe_FALSE”], “priors”: {“p(existential_catastrophe_TRUE)”: “0.05”, “p(existential_catastrophe_FALSE)”: “0.95”}, “posteriors”: {“p(existential_catastrophe_TRUE|human_disempowerment_TRUE)”: “0.95”, “p(existential_catastrophe_TRUE|human_disempowerment_FALSE)”: “0.0”, “p(existential_catastrophe_FALSE|human_disempowerment_TRUE)”: “0.05”, “p(existential_catastrophe_FALSE|human_disempowerment_FALSE)”: “1.0”}} - [Human_Disempowerment]: Permanent and collective disempowerment of humanity relative to AI systems. {“instantiations”: [“human_disempowerment_TRUE”, “human_disempowerment_FALSE”], “priors”: {“p(human_disempowerment_TRUE)”: “0.208”, “p(human_disempowerment_FALSE)”: “0.792”}, “posteriors”: {“p(human_disempowerment_TRUE|scale_of_power_seeking_TRUE)”: “1.0”, “p(human_disempowerment_TRUE|scale_of_power_seeking_FALSE)”: “0.0”, “p(human_disempowerment_FALSE|scale_of_power_seeking_TRUE)”: “0.0”, “p(human_disempowerment_FALSE|scale_of_power_seeking_FALSE)”: “1.0”}} - [Scale_Of_Power_Seeking]: Power-seeking by AI systems scaling to the point of permanently disempowering all of humanity. {“instantiations”: [“scale_of_power_seeking_TRUE”, “scale_of_power_seeking_FALSE”], “priors”: {“p(scale_of_power_seeking_TRUE)”: “0.208”, “p(scale_of_power_seeking_FALSE)”: “0.792”}, “posteriors”: {“p(scale_of_power_seeking_TRUE|misaligned_power_seeking_TRUE, corrective_feedback_EFFECTIVE)”: “0.25”, “p(scale_of_power_seeking_TRUE|misaligned_power_seeking_TRUE, corrective_feedback_INEFFECTIVE)”: “0.60”, “p(scale_of_power_seeking_TRUE|misaligned_power_seeking_FALSE, corrective_feedback_EFFECTIVE)”: “0.0”, “p(scale_of_power_seeking_TRUE|misaligned_power_seeking_FALSE, corrective_feedback_INEFFECTIVE)”: “0.0”, “p(scale_of_power_seeking_FALSE|misaligned_power_seeking_TRUE, corrective_feedback_EFFECTIVE)”: “0.75”, “p(scale_of_power_seeking_FALSE|misaligned_power_seeking_TRUE, corrective_feedback_INEFFECTIVE)”: “0.40”, “p(scale_of_power_seeking_FALSE|misaligned_power_seeking_FALSE, corrective_feedback_EFFECTIVE)”: “1.0”, “p(scale_of_power_seeking_FALSE|misaligned_power_seeking_FALSE, corrective_feedback_INEFFECTIVE)”: “1.0”}} - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {“instantiations”: [“misaligned_power_seeking_TRUE”, “misaligned_power_seeking_FALSE”], “priors”: {“p(misaligned_power_seeking_TRUE)”: “0.338”, “p(misaligned_power_seeking_FALSE)”: “0.662”}, “posteriors”: {“p(misaligned_power_seeking_TRUE|aps_systems_TRUE, difficulty_of_alignment_TRUE, deployment_decisions_DEPLOY)”: “0.90”, “p(misaligned_power_seeking_TRUE|aps_systems_TRUE, difficulty_of_alignment_TRUE, deployment_decisions_WITHHOLD)”: “0.10”, “p(misaligned_power_seeking_TRUE|aps_systems_TRUE, difficulty_of_alignment_FALSE, deployment_decisions_DEPLOY)”: “0.25”, “p(misaligned_power_seeking_TRUE|aps_systems_TRUE, difficulty_of_alignment_FALSE, deployment_decisions_WITHHOLD)”: “0.05”, “p(misaligned_power_seeking_TRUE|aps_systems_FALSE, difficulty_of_alignment_TRUE, deployment_decisions_DEPLOY)”: “0.0”, “p(misaligned_power_seeking_TRUE|aps_systems_FALSE, difficulty_of_alignment_TRUE, deployment_decisions_WITHHOLD)”: “0.0”, “p(misaligned_power_seeking_TRUE|aps_systems_FALSE, difficulty_of_alignment_FALSE, deployment_decisions_DEPLOY)”: “0.0”, “p(misaligned_power_seeking_TRUE|aps_systems_FALSE, difficulty_of_alignment_FALSE, deployment_decisions_WITHHOLD)”: “0.0”, “p(misaligned_power_seeking_FALSE|aps_systems_TRUE, difficulty_of_alignment_TRUE, deployment_decisions_DEPLOY)”: “0.10”, “p(misaligned_power_seeking_FALSE|aps_systems_TRUE, difficulty_of_alignment_TRUE, deployment_decisions_WITHHOLD)”: “0.90”, “p(misaligned_power_seeking_FALSE|aps_systems_TRUE, difficulty_of_alignment_FALSE, deployment_decisions_DEPLOY)”: “0.75”, “p(misaligned_power_seeking_FALSE|aps_systems_TRUE, difficulty_of_alignment_FALSE, deployment_decisions_WITHHOLD)”: “0.95”, “p(misaligned_power_seeking_FALSE|aps_systems_FALSE, difficulty_of_alignment_TRUE, deployment_decisions_DEPLOY)”: “1.0”, “p(misaligned_power_seeking_FALSE|aps_systems_FALSE, difficulty_of_alignment_TRUE, deployment_decisions_WITHHOLD)”: “1.0”, “p(misaligned_power_seeking_FALSE|aps_systems_FALSE, difficulty_of_alignment_FALSE, deployment_decisions_DEPLOY)”: “1.0”, “p(misaligned_power_seeking_FALSE|aps_systems_FALSE, difficulty_of_alignment_FALSE, deployment_decisions_WITHHOLD)”: “1.0”}} - [APS_Systems]: AI systems with advanced capabilities, agentic planning, and strategic awareness. {“instantiations”: [“aps_systems_TRUE”, “aps_systems_FALSE”], “priors”: {“p(aps_systems_TRUE)”: “0.65”, “p(aps_systems_FALSE)”: “0.35”}, “posteriors”: {“p(aps_systems_TRUE|advanced_ai_capability_TRUE, agentic_planning_TRUE, strategic_awareness_TRUE)”: “1.0”, “p(aps_systems_TRUE|advanced_ai_capability_TRUE, agentic_planning_TRUE, strategic_awareness_FALSE)”: “0.0”, “p(aps_systems_TRUE|advanced_ai_capability_TRUE, agentic_planning_FALSE, strategic_awareness_TRUE)”: “0.0”, “p(aps_systems_TRUE|advanced_ai_capability_TRUE, agentic_planning_FALSE, strategic_awareness_FALSE)”: “0.0”, “p(aps_systems_TRUE|advanced_ai_capability_FALSE, agentic_planning_TRUE, strategic_awareness_TRUE)”: “0.0”, “p(aps_systems_TRUE|advanced_ai_capability_FALSE, agentic_planning_TRUE, strategic_awareness_FALSE)”: “0.0”, “p(aps_systems_TRUE|advanced_ai_capability_FALSE, agentic_planning_FALSE, strategic_awareness_TRUE)”: “0.0”, “p(aps_systems_TRUE|advanced_ai_capability_FALSE, agentic_planning_FALSE, strategic_awareness_FALSE)”: “0.0”, “p(aps_systems_FALSE|advanced_ai_capability_TRUE, agentic_planning_TRUE, strategic_awareness_TRUE)”: “0.0”, “p(aps_systems_FALSE|advanced_ai_capability_TRUE, agentic_planning_TRUE, strategic_awareness_FALSE)”: “1.0”, “p(aps_systems_FALSE|advanced_ai_capability_TRUE, agentic_planning_FALSE, strategic_awareness_TRUE)”: “1.0”, “p(aps_systems_FALSE|advanced_ai_capability_TRUE, agentic_planning_FALSE, strategic_awareness_FALSE)”: “1.0”, “p(aps_systems_FALSE|advanced_ai_capability_FALSE, agentic_planning_TRUE, strategic_awareness_TRUE)”: “1.0”, “p(aps_systems_FALSE|advanced_ai_capability_FALSE, agentic_planning_TRUE, strategic_awareness_FALSE)”: “1.0”, “p(aps_systems_FALSE|advanced_ai_capability_FALSE, agentic_planning_FALSE, strategic_awareness_TRUE)”: “1.0”, “p(aps_systems_FALSE|advanced_ai_capability_FALSE, agentic_planning_FALSE, strategic_awareness_FALSE)”: “1.0”}} - [Advanced_AI_Capability]: AI systems that outperform humans on tasks that grant significant power in the world. {“instantiations”: [“advanced_ai_capability_TRUE”, “advanced_ai_capability_FALSE”], “priors”: {“p(advanced_ai_capability_TRUE)”: “0.80”, “p(advanced_ai_capability_FALSE)”: “0.20”}} - [Agentic_Planning]: AI systems making and executing plans based on world models to achieve objectives. {“instantiations”: [“agentic_planning_TRUE”, “agentic_planning_FALSE”], “priors”: {“p(agentic_planning_TRUE)”: “0.85”, “p(agentic_planning_FALSE)”: “0.15”}} - [Strategic_Awareness]: AI systems with models accurately representing power dynamics with humans. {“instantiations”: [“strategic_awareness_TRUE”, “strategic_awareness_FALSE”], “priors”: {“p(strategic_awareness_TRUE)”: “0.75”, “p(strategic_awareness_FALSE)”: “0.25”}} - [Difficulty_Of_Alignment]: It is harder to build aligned systems than misaligned systems that are attractive to deploy. {“instantiations”: [“difficulty_of_alignment_TRUE”, “difficulty_of_alignment_FALSE”], “priors”: {“p(difficulty_of_alignment_TRUE)”: “0.40”, “p(difficulty_of_alignment_FALSE)”: “0.60”}, “posteriors”: {“p(difficulty_of_alignment_TRUE|instrumental_convergence_TRUE, problems_with_proxies_TRUE, problems_with_search_TRUE)”: “0.85”, “p(difficulty_of_alignment_TRUE|instrumental_convergence_TRUE, problems_with_proxies_TRUE, problems_with_search_FALSE)”: “0.70”, “p(difficulty_of_alignment_TRUE|instrumental_convergence_TRUE, problems_with_proxies_FALSE, problems_with_search_TRUE)”: “0.60”, “p(difficulty_of_alignment_TRUE|instrumental_convergence_TRUE, problems_with_proxies_FALSE, problems_with_search_FALSE)”: “0.40”, “p(difficulty_of_alignment_TRUE|instrumental_convergence_FALSE, problems_with_proxies_TRUE, problems_with_search_TRUE)”: “0.55”, “p(difficulty_of_alignment_TRUE|instrumental_convergence_FALSE, problems_with_proxies_TRUE, problems_with_search_FALSE)”: “0.40”, “p(difficulty_of_alignment_TRUE|instrumental_convergence_FALSE, problems_with_proxies_FALSE, problems_with_search_TRUE)”: “0.30”, “p(difficulty_of_alignment_TRUE|instrumental_convergence_FALSE, problems_with_proxies_FALSE, problems_with_search_FALSE)”: “0.10”, “p(difficulty_of_alignment_FALSE|instrumental_convergence_TRUE, problems_with_proxies_TRUE, problems_with_search_TRUE)”: “0.15”, “p(difficulty_of_alignment_FALSE|instrumental_convergence_TRUE, problems_with_proxies_TRUE, problems_with_search_FALSE)”: “0.30”, “p(difficulty_of_alignment_FALSE|instrumental_convergence_TRUE, problems_with_proxies_FALSE, problems_with_search_TRUE)”: “0.40”, “p(difficulty_of_alignment_FALSE|instrumental_convergence_TRUE, problems_with_proxies_FALSE, problems_with_search_FALSE)”: “0.60”, “p(difficulty_of_alignment_FALSE|instrumental_convergence_FALSE, problems_with_proxies_TRUE, problems_with_search_TRUE)”: “0.45”, “p(difficulty_of_alignment_FALSE|instrumental_convergence_FALSE, problems_with_proxies_TRUE, problems_with_search_FALSE)”: “0.60”, “p(difficulty_of_alignment_FALSE|instrumental_convergence_FALSE, problems_with_proxies_FALSE, problems_with_search_TRUE)”: “0.70”, “p(difficulty_of_alignment_FALSE|instrumental_convergence_FALSE, problems_with_proxies_FALSE, problems_with_search_FALSE)”: “0.90”}} - [Instrumental_Convergence]: AI systems with misaligned objectives tend to seek power as an instrumental goal. {“instantiations”: [“instrumental_convergence_TRUE”, “instrumental_convergence_FALSE”], “priors”: {“p(instrumental_convergence_TRUE)”: “0.75”, “p(instrumental_convergence_FALSE)”: “0.25”}} - [Problems_With_Proxies]: Optimizing for proxy objectives breaks correlations with intended goals. {“instantiations”: [“problems_with_proxies_TRUE”, “problems_with_proxies_FALSE”], “priors”: {“p(problems_with_proxies_TRUE)”: “0.80”, “p(problems_with_proxies_FALSE)”: “0.20”}} - [Problems_With_Search]: Search processes can yield systems pursuing different objectives than intended. {“instantiations”: [“problems_with_search_TRUE”, “problems_with_search_FALSE”], “priors”: {“p(problems_with_search_TRUE)”: “0.70”, “p(problems_with_search_FALSE)”: “0.30”}} - [Deployment_Decisions]: Decisions to deploy potentially misaligned AI systems. {“instantiations”: [“deployment_decisions_DEPLOY”, “deployment_decisions_WITHHOLD”], “priors”: {“p(deployment_decisions_DEPLOY)”: “0.70”, “p(deployment_decisions_WITHHOLD)”: “0.30”}, “posteriors”: {“p(deployment_decisions_DEPLOY|incentives_to_build_aps_STRONG, deception_by_ai_TRUE)”: “0.90”, “p(deployment_decisions_DEPLOY|incentives_to_build_aps_STRONG, deception_by_ai_FALSE)”: “0.75”, “p(deployment_decisions_DEPLOY|incentives_to_build_aps_WEAK, deception_by_ai_TRUE)”: “0.60”, “p(deployment_decisions_DEPLOY|incentives_to_build_aps_WEAK, deception_by_ai_FALSE)”: “0.30”, “p(deployment_decisions_WITHHOLD|incentives_to_build_aps_STRONG, deception_by_ai_TRUE)”: “0.10”, “p(deployment_decisions_WITHHOLD|incentives_to_build_aps_STRONG, deception_by_ai_FALSE)”: “0.25”, “p(deployment_decisions_WITHHOLD|incentives_to_build_aps_WEAK, deception_by_ai_TRUE)”: “0.40”, “p(deployment_decisions_WITHHOLD|incentives_to_build_aps_WEAK, deception_by_ai_FALSE)”: “0.70”}} - [Incentives_To_Build_APS]: Strong incentives to build and deploy APS systems. {“instantiations”: [“incentives_to_build_aps_STRONG”, “incentives_to_build_aps_WEAK”], “priors”: {“p(incentives_to_build_aps_STRONG)”: “0.80”, “p(incentives_to_build_aps_WEAK)”: “0.20”}, “posteriors”: {“p(incentives_to_build_aps_STRONG|usefulness_of_aps_HIGH, competitive_dynamics_STRONG)”: “0.95”, “p(incentives_to_build_aps_STRONG|usefulness_of_aps_HIGH, competitive_dynamics_WEAK)”: “0.80”, “p(incentives_to_build_aps_STRONG|usefulness_of_aps_LOW, competitive_dynamics_STRONG)”: “0.70”, “p(incentives_to_build_aps_STRONG|usefulness_of_aps_LOW, competitive_dynamics_WEAK)”: “0.30”, “p(incentives_to_build_aps_WEAK|usefulness_of_aps_HIGH, competitive_dynamics_STRONG)”: “0.05”, “p(incentives_to_build_aps_WEAK|usefulness_of_aps_HIGH, competitive_dynamics_WEAK)”: “0.20”, “p(incentives_to_build_aps_WEAK|usefulness_of_aps_LOW, competitive_dynamics_STRONG)”: “0.30”, “p(incentives_to_build_aps_WEAK|usefulness_of_aps_LOW, competitive_dynamics_WEAK)”: “0.70”}} - [Usefulness_Of_APS]: APS systems are very useful for many valuable tasks. {“instantiations”: [“usefulness_of_aps_HIGH”, “usefulness_of_aps_LOW”], “priors”: {“p(usefulness_of_aps_HIGH)”: “0.85”, “p(usefulness_of_aps_LOW)”: “0.15”}} - [Competitive_Dynamics]: Competitive pressures between AI developers. {“instantiations”: [“competitive_dynamics_STRONG”, “competitive_dynamics_WEAK”], “priors”: {“p(competitive_dynamics_STRONG)”: “0.75”, “p(competitive_dynamics_WEAK)”: “0.25”}} - [Deception_By_AI]: AI systems deceiving humans about their true objectives. {“instantiations”: [“deception_by_ai_TRUE”, “deception_by_ai_FALSE”], “priors”: {“p(deception_by_ai_TRUE)”: “0.50”, “p(deception_by_ai_FALSE)”: “0.50”}} - [Corrective_Feedback]: Human society implementing corrections after observing problems. {“instantiations”: [“corrective_feedback_EFFECTIVE”, “corrective_feedback_INEFFECTIVE”], “priors”: {“p(corrective_feedback_EFFECTIVE)”: “0.60”, “p(corrective_feedback_INEFFECTIVE)”: “0.40”}, “posteriors”: {“p(corrective_feedback_EFFECTIVE|warning_shots_OBSERVED, rapid_capability_escalation_TRUE)”: “0.40”, “p(corrective_feedback_EFFECTIVE|warning_shots_OBSERVED, rapid_capability_escalation_FALSE)”: “0.80”, “p(corrective_feedback_EFFECTIVE|warning_shots_UNOBSERVED, rapid_capability_escalation_TRUE)”: “0.15”, “p(corrective_feedback_EFFECTIVE|warning_shots_UNOBSERVED, rapid_capability_escalation_FALSE)”: “0.50”, “p(corrective_feedback_INEFFECTIVE|warning_shots_OBSERVED, rapid_capability_escalation_TRUE)”: “0.60”, “p(corrective_feedback_INEFFECTIVE|warning_shots_OBSERVED, rapid_capability_escalation_FALSE)”: “0.20”, “p(corrective_feedback_INEFFECTIVE|warning_shots_UNOBSERVED, rapid_capability_escalation_TRUE)”: “0.85”, “p(corrective_feedback_INEFFECTIVE|warning_shots_UNOBSERVED, rapid_capability_escalation_FALSE)”: “0.50”}} - [Warning_Shots]: Observable failures in weaker systems before catastrophic risks. {“instantiations”: [“warning_shots_OBSERVED”, “warning_shots_UNOBSERVED”], “priors”: {“p(warning_shots_OBSERVED)”: “0.70”, “p(warning_shots_UNOBSERVED)”: “0.30”}} - [Rapid_Capability_Escalation]: AI capabilities escalating very rapidly, allowing little time for correction. {“instantiations”: [“rapid_capability_escalation_TRUE”, “rapid_capability_escalation_FALSE”], “priors”: {“p(rapid_capability_escalation_TRUE)”: “0.45”, “p(rapid_capability_escalation_FALSE)”: “0.55”}} [Barriers_To_Understanding]: Difficulty in understanding the internal workings of advanced AI systems. {“instantiations”: [“barriers_to_understanding_HIGH”, “barriers_to_understanding_LOW”], “priors”: {“p(barriers_to_understanding_HIGH)”: “0.70”, “p(barriers_to_understanding_LOW)”: “0.30”}, “posteriors”: {“p(barriers_to_understanding_HIGH|misaligned_power_seeking_TRUE)”: “0.85”, “p(barriers_to_understanding_HIGH|misaligned_power_seeking_FALSE)”: “0.60”, “p(barriers_to_understanding_LOW|misaligned_power_seeking_TRUE)”: “0.15”, “p(barriers_to_understanding_LOW|misaligned_power_seeking_FALSE)”: “0.40”}} - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {“instantiations”: [“misaligned_power_seeking_TRUE”, “misaligned_power_seeking_FALSE”], “priors”: {“p(misaligned_power_seeking_TRUE)”: “0.338”, “p(misaligned_power_seeking_FALSE)”: “0.662”}} [Adversarial_Dynamics]: Potentially adversarial relationships between humans and power-seeking AI. {“instantiations”: [“adversarial_dynamics_TRUE”, “adversarial_dynamics_FALSE”], “priors”: {“p(adversarial_dynamics_TRUE)”: “0.60”, “p(adversarial_dynamics_FALSE)”: “0.40”}, “posteriors”: {“p(adversarial_dynamics_TRUE|misaligned_power_seeking_TRUE)”: “0.95”, “p(adversarial_dynamics_TRUE|misaligned_power_seeking_FALSE)”: “0.10”, “p(adversarial_dynamics_FALSE|misaligned_power_seeking_TRUE)”: “0.05”, “p(adversarial_dynamics_FALSE|misaligned_power_seeking_FALSE)”: “0.90”}} - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {“instantiations”: [“misaligned_power_seeking_TRUE”, “misaligned_power_seeking_FALSE”], “priors”: {“p(misaligned_power_seeking_TRUE)”: “0.338”, “p(misaligned_power_seeking_FALSE)”: “0.662”}} [Stakes_Of_Error]: The escalating impact of mistakes with power-seeking AI systems. {“instantiations”: [“stakes_of_error_HIGH”, “stakes_of_error_LOW”], “priors”: {“p(stakes_of_error_HIGH)”: “0.85”, “p(stakes_of_error_LOW)”: “0.15”}, “posteriors”: {“p(stakes_of_error_HIGH|misaligned_power_seeking_TRUE)”: “0.95”, “p(stakes_of_error_HIGH|misaligned_power_seeking_FALSE)”: “0.50”, “p(stakes_of_error_LOW|misaligned_power_seeking_TRUE)”: “0.05”, “p(stakes_of_error_LOW|misaligned_power_seeking_FALSE)”: “0.50”}} - [Misaligned_Power_Seeking]: Deployed AI systems seeking power in unintended and high-impact ways due to problems with their objectives. {“instantiations”: [“misaligned_power_seeking_TRUE”, “misaligned_power_seeking_FALSE”], “priors”: {“p(misaligned_power_seeking_TRUE)”: “0.338”, “p(misaligned_power_seeking_FALSE)”: “0.662”}}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#check-the-graph-structure-with-the-argdown-sandbox-online-1",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#check-the-graph-structure-with-the-argdown-sandbox-online-1",
    "title": "1  ``` {.python .cell-code}",
    "section": "5.8 3.1.2.2 Check the Graph Structure with the ArgDown Sandbox Online",
    "text": "5.8 3.1.2.2 Check the Graph Structure with the ArgDown Sandbox Online\nCopy and paste the BayesDown formatted … in the ArgDown Sandbox below to quickly verify that the network renders correctly.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#extraction",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#extraction",
    "title": "1  ``` {.python .cell-code}",
    "section": "5.9 3.3 Extraction",
    "text": "5.9 3.3 Extraction\nBayesDown Extraction Code already part of ArgDown extraction code, therefore just use same function “parse_markdown_hierarchy(markdown_data)” and ignore the extra argument (“ArgDown”) because it is automatically set to false amd will by default extract BayesDown.\n\n\nCode\nresult_df = parse_markdown_hierarchy_fixed(md_content_ex_rain)\nresult_df\n\n\n\n    \n\n\n\n\n\n\nTitle\nDescription\nline\nline_numbers\nindentation\nindentation_levels\nParents\nChildren\ninstantiations\npriors\nposteriors\nNo_Parent\nNo_Children\nparent_instantiations\n\n\n\n\n0\nExistential_Catastrophe\nThe destruction of humanity's long-term potent...\n0\n[0]\n0\n[0]\n[]\n[]\n[existential_catastrophe_TRUE, existential_cat...\n{'p(existential_catastrophe_TRUE)': '0.05', 'p...\n{'p(existential_catastrophe_TRUE|human_disempo...\nTrue\nTrue\n[]\n\n\n1\nHuman_Disempowerment\nPermanent and collective disempowerment of hum...\n1\n[1]\n0\n[0]\n[Scale_Of_Power_Seeking]\n[]\n[human_disempowerment_TRUE, human_disempowerme...\n{'p(human_disempowerment_TRUE)': '0.208', 'p(h...\n{'p(human_disempowerment_TRUE|scale_of_power_s...\nFalse\nTrue\n[[scale_of_power_seeking_TRUE, scale_of_power_...\n\n\n2\nScale_Of_Power_Seeking\nPower-seeking by AI systems scaling to the poi...\n2\n[2]\n4\n[4]\n[Misaligned_Power_Seeking, Corrective_Feedback]\n[Human_Disempowerment]\n[scale_of_power_seeking_TRUE, scale_of_power_s...\n{'p(scale_of_power_seeking_TRUE)': '0.208', 'p...\n{'p(scale_of_power_seeking_TRUE|misaligned_pow...\nFalse\nFalse\n[[misaligned_power_seeking_TRUE, misaligned_po...\n\n\n3\nMisaligned_Power_Seeking\nDeployed AI systems seeking power in unintende...\n3\n[3, 21, 23, 25]\n8\n[8, 0, 0, 0]\n[APS_Systems, Difficulty_Of_Alignment, Deploym...\n[Scale_Of_Power_Seeking]\n[misaligned_power_seeking_TRUE, misaligned_pow...\n{'p(misaligned_power_seeking_TRUE)': '0.338', ...\n{'p(misaligned_power_seeking_TRUE|aps_systems_...\nFalse\nFalse\n[[aps_systems_TRUE, aps_systems_FALSE], [diffi...\n\n\n4\nAPS_Systems\nAI systems with advanced capabilities, agentic...\n4\n[4]\n12\n[12]\n[Advanced_AI_Capability, Agentic_Planning, Str...\n[Misaligned_Power_Seeking]\n[aps_systems_TRUE, aps_systems_FALSE]\n{'p(aps_systems_TRUE)': '0.65', 'p(aps_systems...\n{'p(aps_systems_TRUE|advanced_ai_capability_TR...\nFalse\nFalse\n[[advanced_ai_capability_TRUE, advanced_ai_cap...\n\n\n5\nAdvanced_AI_Capability\nAI systems that outperform humans on tasks tha...\n5\n[5]\n16\n[16]\n[]\n[APS_Systems]\n[advanced_ai_capability_TRUE, advanced_ai_capa...\n{'p(advanced_ai_capability_TRUE)': '0.80', 'p(...\n{}\nTrue\nFalse\n[]\n\n\n6\nAgentic_Planning\nAI systems making and executing plans based on...\n6\n[6]\n16\n[16]\n[]\n[APS_Systems]\n[agentic_planning_TRUE, agentic_planning_FALSE]\n{'p(agentic_planning_TRUE)': '0.85', 'p(agenti...\n{}\nTrue\nFalse\n[]\n\n\n7\nStrategic_Awareness\nAI systems with models accurately representing...\n7\n[7]\n16\n[16]\n[]\n[APS_Systems]\n[strategic_awareness_TRUE, strategic_awareness...\n{'p(strategic_awareness_TRUE)': '0.75', 'p(str...\n{}\nTrue\nFalse\n[]\n\n\n8\nDifficulty_Of_Alignment\nIt is harder to build aligned systems than mis...\n8\n[8]\n12\n[12]\n[Instrumental_Convergence, Problems_With_Proxi...\n[Misaligned_Power_Seeking]\n[difficulty_of_alignment_TRUE, difficulty_of_a...\n{'p(difficulty_of_alignment_TRUE)': '0.40', 'p...\n{'p(difficulty_of_alignment_TRUE|instrumental_...\nFalse\nFalse\n[[instrumental_convergence_TRUE, instrumental_...\n\n\n9\nInstrumental_Convergence\nAI systems with misaligned objectives tend to ...\n9\n[9]\n16\n[16]\n[]\n[Difficulty_Of_Alignment]\n[instrumental_convergence_TRUE, instrumental_c...\n{'p(instrumental_convergence_TRUE)': '0.75', '...\n{}\nTrue\nFalse\n[]\n\n\n10\nProblems_With_Proxies\nOptimizing for proxy objectives breaks correla...\n10\n[10]\n16\n[16]\n[]\n[Difficulty_Of_Alignment]\n[problems_with_proxies_TRUE, problems_with_pro...\n{'p(problems_with_proxies_TRUE)': '0.80', 'p(p...\n{}\nTrue\nFalse\n[]\n\n\n11\nProblems_With_Search\nSearch processes can yield systems pursuing di...\n11\n[11]\n16\n[16]\n[]\n[Difficulty_Of_Alignment]\n[problems_with_search_TRUE, problems_with_sear...\n{'p(problems_with_search_TRUE)': '0.70', 'p(pr...\n{}\nTrue\nFalse\n[]\n\n\n12\nDeployment_Decisions\nDecisions to deploy potentially misaligned AI ...\n12\n[12]\n12\n[12]\n[Incentives_To_Build_APS, Deception_By_AI]\n[Misaligned_Power_Seeking]\n[deployment_decisions_DEPLOY, deployment_decis...\n{'p(deployment_decisions_DEPLOY)': '0.70', 'p(...\n{'p(deployment_decisions_DEPLOY|incentives_to_...\nFalse\nFalse\n[[incentives_to_build_aps_STRONG, incentives_t...\n\n\n13\nIncentives_To_Build_APS\nStrong incentives to build and deploy APS syst...\n13\n[13]\n16\n[16]\n[Usefulness_Of_APS, Competitive_Dynamics]\n[Deployment_Decisions]\n[incentives_to_build_aps_STRONG, incentives_to...\n{'p(incentives_to_build_aps_STRONG)': '0.80', ...\n{'p(incentives_to_build_aps_STRONG|usefulness_...\nFalse\nFalse\n[[usefulness_of_aps_HIGH, usefulness_of_aps_LO...\n\n\n14\nUsefulness_Of_APS\nAPS systems are very useful for many valuable ...\n14\n[14]\n20\n[20]\n[]\n[Incentives_To_Build_APS]\n[usefulness_of_aps_HIGH, usefulness_of_aps_LOW]\n{'p(usefulness_of_aps_HIGH)': '0.85', 'p(usefu...\n{}\nTrue\nFalse\n[]\n\n\n15\nCompetitive_Dynamics\nCompetitive pressures between AI developers.\n15\n[15]\n20\n[20]\n[]\n[Incentives_To_Build_APS]\n[competitive_dynamics_STRONG, competitive_dyna...\n{'p(competitive_dynamics_STRONG)': '0.75', 'p(...\n{}\nTrue\nFalse\n[]\n\n\n16\nDeception_By_AI\nAI systems deceiving humans about their true o...\n16\n[16]\n16\n[16]\n[]\n[Deployment_Decisions]\n[deception_by_ai_TRUE, deception_by_ai_FALSE]\n{'p(deception_by_ai_TRUE)': '0.50', 'p(decepti...\n{}\nTrue\nFalse\n[]\n\n\n17\nCorrective_Feedback\nHuman society implementing corrections after o...\n17\n[17]\n8\n[8]\n[Warning_Shots, Rapid_Capability_Escalation]\n[Scale_Of_Power_Seeking]\n[corrective_feedback_EFFECTIVE, corrective_fee...\n{'p(corrective_feedback_EFFECTIVE)': '0.60', '...\n{'p(corrective_feedback_EFFECTIVE|warning_shot...\nFalse\nFalse\n[[warning_shots_OBSERVED, warning_shots_UNOBSE...\n\n\n18\nWarning_Shots\nObservable failures in weaker systems before c...\n18\n[18]\n12\n[12]\n[]\n[Corrective_Feedback]\n[warning_shots_OBSERVED, warning_shots_UNOBSER...\n{'p(warning_shots_OBSERVED)': '0.70', 'p(warni...\n{}\nTrue\nFalse\n[]\n\n\n19\nRapid_Capability_Escalation\nAI capabilities escalating very rapidly, allow...\n19\n[19]\n12\n[12]\n[]\n[Corrective_Feedback]\n[rapid_capability_escalation_TRUE, rapid_capab...\n{'p(rapid_capability_escalation_TRUE)': '0.45'...\n{}\nTrue\nFalse\n[]\n\n\n20\nBarriers_To_Understanding\nDifficulty in understanding the internal worki...\n20\n[20]\n0\n[0]\n[]\n[]\n[barriers_to_understanding_HIGH, barriers_to_u...\n{'p(barriers_to_understanding_HIGH)': '0.70', ...\n{'p(barriers_to_understanding_HIGH|misaligned_...\nTrue\nTrue\n[]\n\n\n21\nAdversarial_Dynamics\nPotentially adversarial relationships between ...\n22\n[22]\n0\n[0]\n[]\n[]\n[adversarial_dynamics_TRUE, adversarial_dynami...\n{'p(adversarial_dynamics_TRUE)': '0.60', 'p(ad...\n{'p(adversarial_dynamics_TRUE|misaligned_power...\nTrue\nTrue\n[]\n\n\n22\nStakes_Of_Error\nThe escalating impact of mistakes with power-s...\n24\n[24]\n0\n[0]\n[]\n[]\n[stakes_of_error_HIGH, stakes_of_error_LOW]\n{'p(stakes_of_error_HIGH)': '0.85', 'p(stakes_...\n{'p(stakes_of_error_HIGH|misaligned_power_seek...\nTrue\nTrue\n[]\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n5.9.1 3.3 Data-Post-Processing\nAdd rows to data frame that can be calculated from the extracted rows\n\n\nCode\n# @title 3.3.1 Data Post-Processing Functions ---\n\n\"\"\"\nBLOCK PURPOSE: Enhances the extracted BayesDown data with calculated metrics and network properties.\n\nThis block provides functions to enrich the basic extracted data with additional\ncalculated columns that are useful for analysis and visualization:\n\n1. Joint probabilities - Calculating P(A,B) from conditional and prior probabilities\n2. Network metrics - Centrality measures that indicate importance of nodes in the network\n3. Markov blanket - Identifying the minimal set of nodes that shield a node from the rest\n\nThese enhancements provide valuable context for understanding the network structure\nand the relationships between variables, enabling more advanced analysis and\nimproving visualization.\n\nDEPENDENCIES: networkx for graph calculations\nINPUTS: DataFrame with basic extracted BayesDown data\nOUTPUTS: Enhanced DataFrame with additional calculated columns\n\"\"\"\n\ndef enhance_extracted_data(df):\n    \"\"\"\n    Enhance the extracted data with calculated columns\n\n    Args:\n        df: DataFrame with extracted BayesDown data\n\n    Returns:\n        Enhanced DataFrame with additional columns\n    \"\"\"\n    # Create a copy to avoid modifying the original\n    enhanced_df = df.copy()\n\n    # 1. Calculate joint probabilities - P(A,B) = P(A|B) * P(B)\n    enhanced_df['joint_probabilities'] = None\n\n    for idx, row in enhanced_df.iterrows():\n        title = row['Title']\n        priors = row['priors'] if isinstance(row['priors'], dict) else {}\n        posteriors = row['posteriors'] if isinstance(row['posteriors'], dict) else {}\n        parents = row['Parents'] if isinstance(row['Parents'], list) else []\n\n        # Skip if no parents or no priors\n        if not parents or not priors:\n            continue\n\n        # Initialize joint probabilities dictionary\n        joint_probs = {}\n\n        # Get instantiations\n        instantiations = row['instantiations']\n        if not isinstance(instantiations, list) or not instantiations:\n            continue\n\n        # For each parent and child instantiation combination, calculate joint probability\n        for inst in instantiations:\n            # Get this instantiation's prior probability\n            inst_prior_key = f\"p({inst})\"\n            if inst_prior_key not in priors:\n                continue\n\n            try:\n                inst_prior = float(priors[inst_prior_key])\n            except (ValueError, TypeError):\n                continue\n\n            # For each parent\n            for parent in parents:\n                parent_row = enhanced_df[enhanced_df['Title'] == parent]\n                if parent_row.empty:\n                    continue\n\n                parent_insts = parent_row.iloc[0]['instantiations']\n                if not isinstance(parent_insts, list) or not parent_insts:\n                    continue\n\n                for parent_inst in parent_insts:\n                    # Get conditional probability\n                    cond_key = f\"p({inst}|{parent}={parent_inst})\"\n                    if cond_key in posteriors:\n                        try:\n                            cond_prob = float(posteriors[cond_key])\n\n                            # Get parent's prior\n                            parent_priors = parent_row.iloc[0]['priors']\n                            if not isinstance(parent_priors, dict):\n                                continue\n\n                            parent_prior_key = f\"p({parent_inst})\"\n                            if parent_prior_key not in parent_priors:\n                                continue\n\n                            try:\n                                parent_prior = float(parent_priors[parent_prior_key])\n\n                                # Calculate joint probability: P(A,B) = P(A|B) * P(B)\n                                joint_prob = cond_prob * parent_prior\n                                joint_key = f\"p({inst},{parent}={parent_inst})\"\n                                joint_probs[joint_key] = str(round(joint_prob, 4))\n                            except (ValueError, TypeError):\n                                joint_prob = cond_prob * parent_prior\n                                joint_key = f\"p({inst},{parent}={parent_inst})\"\n                                joint_probs[joint_key] = str(round(joint_prob, 4))\n                            except (ValueError, TypeError):\n                                continue\n                        except (ValueError, TypeError):\n                            continue\n\n        # Store joint probabilities in dataframe\n        enhanced_df.at[idx, 'joint_probabilities'] = joint_probs\n\n    # 2. Calculate network metrics\n    # Create a directed graph\n    import networkx as nx\n    G = nx.DiGraph()\n\n    # Add nodes\n    for idx, row in enhanced_df.iterrows():\n        G.add_node(row['Title'])\n\n    # Add edges\n    for idx, row in enhanced_df.iterrows():\n        child = row['Title']\n        parents = row['Parents'] if isinstance(row['Parents'], list) else []\n\n        for parent in parents:\n            if parent in G.nodes():\n                G.add_edge(parent, child)\n\n    # Calculate centrality measures\n    degree_centrality = nx.degree_centrality(G)  # Overall connectedness\n    in_degree_centrality = nx.in_degree_centrality(G)  # How many nodes affect this one\n    out_degree_centrality = nx.out_degree_centrality(G)  # How many nodes this one affects\n\n    try:\n        betweenness_centrality = nx.betweenness_centrality(G)  # Node's role as a connector\n    except:\n        betweenness_centrality = {node: 0 for node in G.nodes()}\n\n    # Add metrics to dataframe\n    enhanced_df['degree_centrality'] = None\n    enhanced_df['in_degree_centrality'] = None\n    enhanced_df['out_degree_centrality'] = None\n    enhanced_df['betweenness_centrality'] = None\n\n    for idx, row in enhanced_df.iterrows():\n        title = row['Title']\n        enhanced_df.at[idx, 'degree_centrality'] = degree_centrality.get(title, 0)\n        enhanced_df.at[idx, 'in_degree_centrality'] = in_degree_centrality.get(title, 0)\n        enhanced_df.at[idx, 'out_degree_centrality'] = out_degree_centrality.get(title, 0)\n        enhanced_df.at[idx, 'betweenness_centrality'] = betweenness_centrality.get(title, 0)\n\n    # 3. Add Markov blanket information (parents, children, and children's parents)\n    enhanced_df['markov_blanket'] = None\n\n    for idx, row in enhanced_df.iterrows():\n        title = row['Title']\n        parents = row['Parents'] if isinstance(row['Parents'], list) else []\n        children = row['Children'] if isinstance(row['Children'], list) else []\n\n        # Get children's parents (excluding this node)\n        childrens_parents = []\n        for child in children:\n            child_row = enhanced_df[enhanced_df['Title'] == child]\n            if not child_row.empty:\n                child_parents = child_row.iloc[0]['Parents']\n                if isinstance(child_parents, list):\n                    childrens_parents.extend([p for p in child_parents if p != title])\n\n        # Remove duplicates\n        childrens_parents = list(set(childrens_parents))\n\n        # Combine to get Markov blanket\n        markov_blanket = list(set(parents + children + childrens_parents))\n        enhanced_df.at[idx, 'markov_blanket'] = markov_blanket\n\n    return enhanced_df\n\n\n\n\nCode\n# @title 3.3 --- Enhance Extracted Data with Network Metrics ---\n\n\"\"\"\nBLOCK PURPOSE: Applies the post-processing functions to enhance the extracted data.\n\nThis block takes the basic extracted DataFrame from the BayesDown parsing step\nand enriches it with calculated metrics that provide deeper insight into the\nnetwork structure and relationships. It:\n\n1. Applies the enhancement functions defined previously\n2. Displays summary information about key calculated metrics\n3. Saves the enhanced data for further analysis and visualization\n\nThe enhanced DataFrame provides a richer representation of the Bayesian network,\nincluding measures of node importance and conditional relationships that are\nessential for effective analysis and visualization.\n\nDEPENDENCIES: enhance_extracted_data function\nINPUTS: DataFrame with basic extracted BayesDown data\nOUTPUTS: Enhanced DataFrame with additional calculated columns, saved to CSV\n\"\"\"\n\n# Enhance the extracted dataframe with calculated columns\nenhanced_df = enhance_extracted_data(result_df)\n\n# Display the enhanced dataframe\nprint(\"Enhanced DataFrame with additional calculated columns:\")\nenhanced_df.head()\n\n# Check some calculated metrics\nprint(\"\\nJoint Probabilities Example:\")\nexample_node = enhanced_df.loc[0, 'Title']\njoint_probs = enhanced_df.loc[0, 'joint_probabilities']\nprint(f\"Joint probabilities for {example_node}:\")\nprint(joint_probs)\n\nprint(\"\\nNetwork Metrics:\")\nfor idx, row in enhanced_df.iterrows():\n    print(f\"{row['Title']}:\")\n    print(f\"  Degree Centrality: {row['degree_centrality']:.3f}\")\n    print(f\"  Betweenness Centrality: {row['betweenness_centrality']:.3f}\")\n\n# Save the enhanced dataframe\nenhanced_df.to_csv('enhanced_extracted_data.csv', index=False)\nprint(\"\\nEnhanced data saved to 'enhanced_extracted_data.csv'\")\n\n\nEnhanced DataFrame with additional calculated columns:\n\nJoint Probabilities Example:\nJoint probabilities for Existential_Catastrophe:\nNone\n\nNetwork Metrics:\nExistential_Catastrophe:\n  Degree Centrality: 0.000\n  Betweenness Centrality: 0.000\nHuman_Disempowerment:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nScale_Of_Power_Seeking:\n  Degree Centrality: 0.136\n  Betweenness Centrality: 0.037\nMisaligned_Power_Seeking:\n  Degree Centrality: 0.182\n  Betweenness Centrality: 0.056\nAPS_Systems:\n  Degree Centrality: 0.182\n  Betweenness Centrality: 0.019\nAdvanced_AI_Capability:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nAgentic_Planning:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nStrategic_Awareness:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nDifficulty_Of_Alignment:\n  Degree Centrality: 0.182\n  Betweenness Centrality: 0.019\nInstrumental_Convergence:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nProblems_With_Proxies:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nProblems_With_Search:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nDeployment_Decisions:\n  Degree Centrality: 0.136\n  Betweenness Centrality: 0.026\nIncentives_To_Build_APS:\n  Degree Centrality: 0.136\n  Betweenness Centrality: 0.017\nUsefulness_Of_APS:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nCompetitive_Dynamics:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nDeception_By_AI:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nCorrective_Feedback:\n  Degree Centrality: 0.136\n  Betweenness Centrality: 0.009\nWarning_Shots:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nRapid_Capability_Escalation:\n  Degree Centrality: 0.045\n  Betweenness Centrality: 0.000\nBarriers_To_Understanding:\n  Degree Centrality: 0.000\n  Betweenness Centrality: 0.000\nAdversarial_Dynamics:\n  Degree Centrality: 0.000\n  Betweenness Centrality: 0.000\nStakes_Of_Error:\n  Degree Centrality: 0.000\n  Betweenness Centrality: 0.000\n\nEnhanced data saved to 'enhanced_extracted_data.csv'\n\n\n\n\n5.9.2 3.4 Download and save finished data frame as .csv file\n\n\nCode\n# @title 3.4 --- Save Extracted Data for Further Processing ---\n\n\"\"\"\nBLOCK PURPOSE: Saves the extracted data to a CSV file for further processing.\n\nThis step is essential for:\n1. Persisting the structured representation of the Bayesian network\n2. Enabling further analysis in other tools or notebook sections\n3. Creating a permanent record of the extraction results\n4. Making the data available for the visualization pipeline\n\nThe CSV format provides a standardized, tabular representation of the network\nthat can be easily loaded and processed in subsequent analysis steps.\n\nDEPENDENCIES: pandas DataFrame operations\nINPUTS: Extracted DataFrame from the parsing step\nOUTPUTS: CSV file containing the structured network data\n\"\"\"\n\n# Save the extracted data as a CSV file\nresult_df.to_csv('extracted_data.csv', index=False)\n\nprint(\"✅ Extracted data saved successfully to 'extracted_data.csv'\")\nprint(\"Note: If using updated data in future steps, the file must be pushed to the GitHub repository\")\n\n\n✅ Extracted data saved successfully to 'extracted_data.csv'\nNote: If using updated data in future steps, the file must be pushed to the GitHub repository",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#bayesian-network-visualization-approach",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#bayesian-network-visualization-approach",
    "title": "1  ``` {.python .cell-code}",
    "section": "6.1 Bayesian Network Visualization Approach",
    "text": "6.1 Bayesian Network Visualization Approach\nThis section implements the visualization component of the AMTAIR project, transforming the structured data extracted from BayesDown into an interactive network visualization that makes complex probabilistic relationships accessible to human understanding.\n\n6.1.1 Visualization Philosophy\nA key challenge in AI governance is making complex probabilistic relationships understandable to diverse stakeholders. This visualization system addresses this challenge through:\n\nVisual Encoding of Probability: Node colors reflect probability values (green for high probability, red for low)\nStructural Classification: Border colors indicate node types (blue for root causes, purple for intermediate nodes, magenta for leaf nodes)\nProgressive Disclosure: Basic information in tooltips, detailed probability tables in modal popups\nInteractive Exploration: Draggable nodes, configurable physics, click interactions\n\n\n\n6.1.2 Connection to AMTAIR Goals\nThis visualization approach directly supports the AMTAIR project’s goal of improving coordination in AI governance by:\n\nMaking implicit models explicit through visual representation\nProviding a common language for discussing probabilistic relationships\nEnabling non-technical stakeholders to engage with formal models\nCreating shareable artifacts that facilitate collaboration\n\n\n\n6.1.3 Implementation Structure\nThe visualization system is implemented in four phases:\n\nNetwork Construction: Creating a directed graph representation using NetworkX\nNode Classification: Identifying node types based on network position\nVisual Enhancement: Adding color coding, tooltips, and interactive elements\nInteractive Features: Implementing click handling for detailed exploration\n\nThe resulting visualization serves as both an analytical tool for experts and a communication tool for broader audiences, bridging the gap between technical and policy domains in AI governance discussions.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#phase-1-dependenciesfunctions",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#phase-1-dependenciesfunctions",
    "title": "1  ``` {.python .cell-code}",
    "section": "6.2 Phase 1: Dependencies/Functions",
    "text": "6.2 Phase 1: Dependencies/Functions\n\n\nCode\n# @title 4.0 --- Bayesian Network Visualization Functions ---\n\n\"\"\"\nBLOCK PURPOSE: Provides functions to create interactive Bayesian network visualizations\nfrom DataFrame representations of ArgDown/BayesDown data.\n\nThis block implements the visualization pipeline described in the AMTAIR project, transforming\nthe structured DataFrame extracted from ArgDown/BayesDown into an interactive network graph\nthat displays nodes, relationships, and probability information. The visualization leverages\nNetworkX for graph representation and PyVis for interactive display.\n\nKey visualization features:\n1. Color-coding of nodes based on probability values\n2. Border styling to indicate node types (root, intermediate, leaf)\n3. Interactive tooltips with probability information\n4. Modal popups with detailed conditional probability tables\n5. Physics-based layout for intuitive exploration\n\nDEPENDENCIES: networkx, pyvis, HTML display from IPython\nINPUTS: DataFrame with node information, relationships, and probabilities\nOUTPUTS: Interactive HTML visualization of the Bayesian network\n\"\"\"\n\nfrom pyvis.network import Network\nimport networkx as nx\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport io\nimport base64\nimport colorsys\nimport json\n\ndef create_bayesian_network_with_probabilities(df):\n    \"\"\"\n    Create an interactive Bayesian network visualization with enhanced probability visualization\n    and node classification based on network structure.\n\n    Args:\n        df (pandas.DataFrame): DataFrame containing node information, relationships, and probabilities\n\n    Returns:\n        IPython.display.HTML: Interactive HTML visualization of the Bayesian network\n    \"\"\"\n    # PHASE 1: Create a directed graph representation\n    G = nx.DiGraph()\n\n    # Add nodes with proper attributes\n    for idx, row in df.iterrows():\n        title = row['Title']\n        description = row['Description']\n\n        # Process probability information\n        priors = get_priors(row)\n        instantiations = get_instantiations(row)\n\n        # Add node with base information\n        G.add_node(\n            title,\n            description=description,\n            priors=priors,\n            instantiations=instantiations,\n            posteriors=get_posteriors(row)\n        )\n\n    # Add edges based on parent-child relationships\n    for idx, row in df.iterrows():\n        child = row['Title']\n        parents = get_parents(row)\n\n        # Add edges from each parent to this child\n        for parent in parents:\n            if parent in G.nodes():\n                G.add_edge(parent, child)\n\n    # PHASE 2: Classify nodes based on network structure\n    classify_nodes(G)\n\n    # PHASE 3: Create interactive network visualization\n    net = Network(notebook=True, directed=True, cdn_resources=\"in_line\", height=\"600px\", width=\"100%\")\n\n    # Configure physics for better layout\n    net.force_atlas_2based(gravity=-50, spring_length=100, spring_strength=0.02)\n    net.show_buttons(filter_=['physics'])  # Allow user to adjust physics settings\n\n    # Add the graph to the network\n    net.from_nx(G)\n\n    # PHASE 4: Enhance node appearance with probability information\n    for node in net.nodes:\n        node_id = node['id']\n        node_data = G.nodes[node_id]\n\n        # Get node type and set border color\n        node_type = node_data.get('node_type', 'unknown')\n        border_color = get_border_color(node_type)\n\n        # Get probability information\n        priors = node_data.get('priors', {})\n        true_prob = priors.get('true_prob', 0.5) if priors else 0.5\n\n        # Get proper state names\n        instantiations = node_data.get('instantiations', [\"TRUE\", \"FALSE\"])\n        true_state = instantiations[0] if len(instantiations) &gt; 0 else \"TRUE\"\n        false_state = instantiations[1] if len(instantiations) &gt; 1 else \"FALSE\"\n\n        # Create background color based on probability\n        background_color = get_probability_color(priors)\n\n        # Create tooltip with probability information\n        tooltip = create_tooltip(node_id, node_data)\n\n        # Create a simpler node label with probability\n        simple_label = f\"{node_id}\\np={true_prob:.2f}\"\n\n        # Store expanded content as a node attribute for use in click handler\n        node_data['expanded_content'] = create_expanded_content(node_id, node_data)\n\n        # Set node attributes\n        node['title'] = tooltip  # Tooltip HTML\n        node['label'] = simple_label  # Simple text label\n        node['shape'] = 'box'\n        node['color'] = {\n            'background': background_color,\n            'border': border_color,\n            'highlight': {\n                'background': background_color,\n                'border': border_color\n            }\n        }\n\n    # PHASE 5: Setup interactive click handling\n    # Prepare data for click handler\n    setup_data = {\n        'nodes_data': {node_id: {\n            'expanded_content': json.dumps(G.nodes[node_id].get('expanded_content', '')),\n            'description': G.nodes[node_id].get('description', ''),\n            'priors': G.nodes[node_id].get('priors', {}),\n            'posteriors': G.nodes[node_id].get('posteriors', {})\n        } for node_id in G.nodes()}\n    }\n\n    # JavaScript code for handling node clicks\n    click_js = \"\"\"\n    // Store node data for click handling\n    var nodesData = %s;\n\n    // Add event listener for node clicks\n    network.on(\"click\", function(params) {\n        if (params.nodes.length &gt; 0) {\n            var nodeId = params.nodes[0];\n            var nodeInfo = nodesData[nodeId];\n\n            if (nodeInfo) {\n                // Create a modal popup for expanded content\n                var modal = document.createElement('div');\n                modal.style.position = 'fixed';\n                modal.style.left = '50%%';\n                modal.style.top = '50%%';\n                modal.style.transform = 'translate(-50%%, -50%%)';\n                modal.style.backgroundColor = 'white';\n                modal.style.padding = '20px';\n                modal.style.borderRadius = '5px';\n                modal.style.boxShadow = '0 0 10px rgba(0,0,0,0.5)';\n                modal.style.zIndex = '1000';\n                modal.style.maxWidth = '80%%';\n                modal.style.maxHeight = '80%%';\n                modal.style.overflow = 'auto';\n\n                // Add expanded content\n                modal.innerHTML = nodeInfo.expanded_content || 'No detailed information available';\n\n                // Add close button\n                var closeBtn = document.createElement('button');\n                closeBtn.innerHTML = 'Close';\n                closeBtn.style.marginTop = '10px';\n                closeBtn.style.padding = '5px 10px';\n                closeBtn.style.cursor = 'pointer';\n                closeBtn.onclick = function() {\n                    document.body.removeChild(modal);\n                };\n                modal.appendChild(closeBtn);\n\n                // Add modal to body\n                document.body.appendChild(modal);\n            }\n        }\n    });\n    \"\"\" % json.dumps(setup_data['nodes_data'])\n\n    # PHASE 6: Save the graph to HTML and inject custom click handling\n    html_file = \"bayesian_network.html\"\n    net.save_graph(html_file)\n\n    # Inject custom click handling into HTML\n    try:\n        with open(html_file, \"r\") as f:\n            html_content = f.read()\n\n        # Insert click handling script before the closing body tag\n        html_content = html_content.replace('&lt;/body&gt;', f'&lt;script&gt;{click_js}&lt;/script&gt;&lt;/body&gt;')\n\n        # Write back the modified HTML\n        with open(html_file, \"w\") as f:\n            f.write(html_content)\n\n        return HTML(html_content)\n    except Exception as e:\n        return HTML(f\"&lt;p&gt;Error rendering HTML: {str(e)}&lt;/p&gt;&lt;p&gt;The network visualization has been saved to '{html_file}'&lt;/p&gt;\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#phase-2-node-classification-and-styling-module",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#phase-2-node-classification-and-styling-module",
    "title": "1  ``` {.python .cell-code}",
    "section": "6.3 Phase 2: Node Classification and Styling Module",
    "text": "6.3 Phase 2: Node Classification and Styling Module\n\n\nCode\n# @title 4.1 --- Node Classification and Styling Functions ---\n\n\"\"\"\nBLOCK PURPOSE: Implements the visual classification and styling of nodes in the Bayesian network.\n\nThis module handles the identification of node types based on their position in the network\nand provides appropriate visual styling for each type. The functions:\n\n1. Classify nodes as parents (causes), children (intermediate effects), or leaves (final effects)\n2. Assign appropriate border colors to visually distinguish node types\n3. Calculate background colors based on probability values\n4. Extract relevant information from DataFrame rows in a robust manner\n\nThe visual encoding helps users understand both the structure of the network\nand the probability distributions at a glance.\n\nDEPENDENCIES: colorsys for color manipulation\nINPUTS: Graph structure and node data\nOUTPUTS: Classification and styling information for visualization\n\"\"\"\n\ndef classify_nodes(G):\n    \"\"\"\n    Classify nodes as parent, child, or leaf based on network structure\n\n    Args:\n        G (networkx.DiGraph): Directed graph representation of the Bayesian network\n\n    Effects:\n        Adds 'node_type' attribute to each node in the graph:\n        - 'parent': Root node with no parents but has children (causal source)\n        - 'child': Node with both parents and children (intermediate)\n        - 'leaf': Node with parents but no children (final effect)\n        - 'isolated': Node with no connections (rare in Bayesian networks)\n    \"\"\"\n    for node in G.nodes():\n        predecessors = list(G.predecessors(node))  # Nodes pointing to this one (causes)\n        successors = list(G.successors(node))      # Nodes this one points to (effects)\n\n        if not predecessors:  # No parents\n            if successors:  # Has children\n                G.nodes[node]['node_type'] = 'parent'  # Root cause\n            else:  # No children either\n                G.nodes[node]['node_type'] = 'isolated'  # Disconnected node\n        else:  # Has parents\n            if not successors:  # No children\n                G.nodes[node]['node_type'] = 'leaf'  # Final effect\n            else:  # Has both parents and children\n                G.nodes[node]['node_type'] = 'child'  # Intermediate node\n\ndef get_border_color(node_type):\n    \"\"\"\n    Return border color based on node type\n\n    Args:\n        node_type (str): Type of node ('parent', 'child', 'leaf', or 'isolated')\n\n    Returns:\n        str: Hex color code for node border\n    \"\"\"\n    if node_type == 'parent':\n        return '#0000FF'  # Blue for root causes\n    elif node_type == 'child':\n        return '#800080'  # Purple for intermediate nodes\n    elif node_type == 'leaf':\n        return '#FF00FF'  # Magenta for final effects\n    else:\n        return '#000000'  # Default black for any other type\n\ndef get_probability_color(priors):\n    \"\"\"\n    Create background color based on probability (red to green gradient)\n\n    Args:\n        priors (dict): Dictionary containing probability information\n\n    Returns:\n        str: Hex color code for node background, ranging from red (low probability)\n             to green (high probability)\n    \"\"\"\n    # Default to neutral color if no probability\n    if not priors or 'true_prob' not in priors:\n        return '#F8F8F8'  # Light grey\n\n    # Get probability value\n    prob = priors['true_prob']\n\n    # Create color gradient from red (0.0) to green (1.0)\n    hue = 120 * prob  # 0 = red, 120 = green (in HSL color space)\n    saturation = 0.75\n    lightness = 0.8  # Lighter color for better text visibility\n\n    # Convert HSL to RGB\n    r, g, b = colorsys.hls_to_rgb(hue/360, lightness, saturation)\n\n    # Convert to hex format\n    hex_color = \"#{:02x}{:02x}{:02x}\".format(int(r*255), int(g*255), int(b*255))\n\n    return hex_color\n\ndef get_parents(row):\n    \"\"\"\n    Extract parent nodes from row data, with safe handling for different data types\n\n    Args:\n        row (pandas.Series): Row from DataFrame containing node information\n\n    Returns:\n        list: List of parent node names\n    \"\"\"\n    if 'Parents' not in row:\n        return []\n\n    parents_data = row['Parents']\n\n    # Handle NaN, None, or empty list\n    if isinstance(parents_data, float) and pd.isna(parents_data):\n        return []\n\n    if parents_data is None:\n        return []\n\n    # Handle different data types\n    if isinstance(parents_data, list):\n        # Return a list with NaN and empty strings removed\n        return [p for p in parents_data if not (isinstance(p, float) and pd.isna(p)) and p != '']\n\n    if isinstance(parents_data, str):\n        if not parents_data.strip():\n            return []\n\n        # Remove brackets and split by comma, removing empty strings and NaN\n        cleaned = parents_data.strip('[]\"\\'')\n        if not cleaned:\n            return []\n\n        return [p.strip(' \"\\'') for p in cleaned.split(',') if p.strip()]\n\n    # Default: empty list\n    return []\n\ndef get_instantiations(row):\n    \"\"\"\n    Extract instantiations with safe handling for different data types\n\n    Args:\n        row (pandas.Series): Row from DataFrame containing node information\n\n    Returns:\n        list: List of possible instantiations (states) for the node\n    \"\"\"\n    if 'instantiations' not in row:\n        return [\"TRUE\", \"FALSE\"]\n\n    inst_data = row['instantiations']\n\n    # Handle NaN or None\n    if isinstance(inst_data, float) and pd.isna(inst_data):\n        return [\"TRUE\", \"FALSE\"]\n\n    if inst_data is None:\n        return [\"TRUE\", \"FALSE\"]\n\n    # Handle different data types\n    if isinstance(inst_data, list):\n        return inst_data if inst_data else [\"TRUE\", \"FALSE\"]\n\n    if isinstance(inst_data, str):\n        if not inst_data.strip():\n            return [\"TRUE\", \"FALSE\"]\n\n        # Remove brackets and split by comma\n        cleaned = inst_data.strip('[]\"\\'')\n        if not cleaned:\n            return [\"TRUE\", \"FALSE\"]\n\n        return [i.strip(' \"\\'') for i in cleaned.split(',') if i.strip()]\n\n    # Default\n    return [\"TRUE\", \"FALSE\"]\n\ndef get_priors(row):\n    \"\"\"\n    Extract prior probabilities with safe handling for different data types\n\n    Args:\n        row (pandas.Series): Row from DataFrame containing node information\n\n    Returns:\n        dict: Dictionary of prior probabilities with 'true_prob' added for convenience\n    \"\"\"\n    if 'priors' not in row:\n        return {}\n\n    priors_data = row['priors']\n\n    # Handle NaN or None\n    if isinstance(priors_data, float) and pd.isna(priors_data):\n        return {}\n\n    if priors_data is None:\n        return {}\n\n    result = {}\n\n    # Handle dictionary\n    if isinstance(priors_data, dict):\n        result = priors_data\n    # Handle string representation of dictionary\n    elif isinstance(priors_data, str):\n        if not priors_data.strip() or priors_data == '{}':\n            return {}\n\n        try:\n            # Try to evaluate as Python literal\n            import ast\n            result = ast.literal_eval(priors_data)\n        except:\n            # Simple parsing for items like {'p(TRUE)': '0.2', 'p(FALSE)': '0.8'}\n            if '{' in priors_data and '}' in priors_data:\n                content = priors_data[priors_data.find('{')+1:priors_data.rfind('}')]\n                items = [item.strip() for item in content.split(',')]\n\n                for item in items:\n                    if ':' in item:\n                        key, value = item.split(':', 1)\n                        key = key.strip(' \\'\\\"')\n                        value = value.strip(' \\'\\\"')\n                        result[key] = value\n\n    # Extract main probability for TRUE state\n    instantiations = get_instantiations(row)\n    true_state = instantiations[0] if instantiations else \"TRUE\"\n    true_key = f\"p({true_state})\"\n\n    if true_key in result:\n        try:\n            result['true_prob'] = float(result[true_key])\n        except:\n            pass\n\n    return result\n\ndef get_posteriors(row):\n    \"\"\"\n    Extract posterior probabilities with safe handling for different data types\n\n    Args:\n        row (pandas.Series): Row from DataFrame containing node information\n\n    Returns:\n        dict: Dictionary of conditional probabilities\n    \"\"\"\n    if 'posteriors' not in row:\n        return {}\n\n    posteriors_data = row['posteriors']\n\n    # Handle NaN or None\n    if isinstance(posteriors_data, float) and pd.isna(posteriors_data):\n        return {}\n\n    if posteriors_data is None:\n        return {}\n\n    result = {}\n\n    # Handle dictionary\n    if isinstance(posteriors_data, dict):\n        result = posteriors_data\n    # Handle string representation of dictionary\n    elif isinstance(posteriors_data, str):\n        if not posteriors_data.strip() or posteriors_data == '{}':\n            return {}\n\n        try:\n            # Try to evaluate as Python literal\n            import ast\n            result = ast.literal_eval(posteriors_data)\n        except:\n            # Simple parsing\n            if '{' in posteriors_data and '}' in posteriors_data:\n                content = posteriors_data[posteriors_data.find('{')+1:posteriors_data.rfind('}')]\n                items = [item.strip() for item in content.split(',')]\n\n                for item in items:\n                    if ':' in item:\n                        key, value = item.split(':', 1)\n                        key = key.strip(' \\'\\\"')\n                        value = value.strip(' \\'\\\"')\n                        result[key] = value\n\n    return result",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#phase-3-html-content-generation-module",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#phase-3-html-content-generation-module",
    "title": "1  ``` {.python .cell-code}",
    "section": "6.4 Phase 3: HTML Content Generation Module",
    "text": "6.4 Phase 3: HTML Content Generation Module\n\n\nCode\n# @title 4.2 --- HTML Content Generation Functions ---\n\n\"\"\"\nBLOCK PURPOSE: Creates rich HTML content for the interactive Bayesian network visualization.\n\nThis module generates the HTML components that enhance the Bayesian network visualization:\n1. Probability bars - Visual representation of probability distributions\n2. Node tooltips - Rich information displayed on hover\n3. Expanded content - Detailed probability information shown when clicking nodes\n\nThese HTML components make the mathematical concepts of Bayesian networks more\nintuitive and accessible to users without requiring deep statistical knowledge.\nThe visual encoding of probabilities (colors, bars) and the progressive disclosure\nof information (hover, click) help users build understanding at their own pace.\n\nDEPENDENCIES: HTML generation capabilities\nINPUTS: Node data from the Bayesian network\nOUTPUTS: HTML content for visualization components\n\"\"\"\n\ndef create_probability_bar(true_prob, false_prob, height=\"15px\", show_values=True, value_prefix=\"\"):\n    \"\"\"\n    Creates a reusable HTML component to visualize probability distribution\n\n    Args:\n        true_prob (float): Probability of the true state (0.0-1.0)\n        false_prob (float): Probability of the false state (0.0-1.0)\n        height (str): CSS height of the bar\n        show_values (bool): Whether to display numerical values\n        value_prefix (str): Prefix to add before values (e.g., \"p=\")\n\n    Returns:\n        str: HTML for a horizontal bar showing probabilities\n    \"\"\"\n    # Prepare display labels if showing values\n    true_label = f\"{value_prefix}{true_prob:.3f}\" if show_values else \"\"\n    false_label = f\"{value_prefix}{false_prob:.3f}\" if show_values else \"\"\n\n    # Create the HTML for a horizontal stacked bar\n    html = f\"\"\"\n    &lt;div style=\"width:100%; height:{height}; display:flex; border:1px solid #ccc; overflow:hidden; border-radius:3px; margin-top:3px; margin-bottom:3px;\"&gt;\n        &lt;div style=\"flex-basis:{true_prob*100}%; background:linear-gradient(to bottom, rgba(0,180,0,0.9), rgba(0,140,0,0.7)); border-right:2px solid #008800; display:flex; align-items:center; justify-content:center; overflow:hidden; min-width:{2 if true_prob &gt; 0 else 0}px;\"&gt;\n            &lt;span style=\"font-size:10px; color:white; text-shadow:0px 0px 2px #000;\"&gt;{true_label}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div style=\"flex-basis:{false_prob*100}%; background:linear-gradient(to bottom, rgba(220,0,0,0.9), rgba(180,0,0,0.7)); border-left:2px solid #880000; display:flex; align-items:center; justify-content:center; overflow:hidden; min-width:{2 if false_prob &gt; 0 else 0}px;\"&gt;\n            &lt;span style=\"font-size:10px; color:white; text-shadow:0px 0px 2px #000;\"&gt;{false_label}&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    \"\"\"\n    return html\n\ndef create_tooltip(node_id, node_data):\n    \"\"\"\n    Create rich HTML tooltip with probability information\n\n    Args:\n        node_id (str): Identifier of the node\n        node_data (dict): Node attributes including probabilities\n\n    Returns:\n        str: HTML content for tooltip displayed on hover\n    \"\"\"\n    # Extract node information\n    description = node_data.get('description', '')\n    priors = node_data.get('priors', {})\n    instantiations = node_data.get('instantiations', [\"TRUE\", \"FALSE\"])\n\n    # Start building the HTML tooltip\n    html = f\"\"\"\n    &lt;div style=\"max-width:350px; padding:10px; background-color:#f8f9fa; border-radius:5px; font-family:Arial, sans-serif;\"&gt;\n        &lt;h3 style=\"margin-top:0; color:#202124;\"&gt;{node_id}&lt;/h3&gt;\n        &lt;p style=\"font-style:italic;\"&gt;{description}&lt;/p&gt;\n    \"\"\"\n\n    # Add prior probabilities section\n    if priors and 'true_prob' in priors:\n        true_prob = priors['true_prob']\n        false_prob = 1.0 - true_prob\n\n        # Get proper state names\n        true_state = instantiations[0] if len(instantiations) &gt; 0 else \"TRUE\"\n        false_state = instantiations[1] if len(instantiations) &gt; 1 else \"FALSE\"\n\n        html += f\"\"\"\n        &lt;div style=\"margin-top:10px; background-color:#fff; padding:8px; border-radius:4px; border:1px solid #ddd;\"&gt;\n            &lt;h4 style=\"margin-top:0; font-size:14px;\"&gt;Prior Probabilities:&lt;/h4&gt;\n            &lt;div style=\"display:flex; justify-content:space-between; margin-bottom:4px;\"&gt;\n                &lt;div style=\"font-size:12px;\"&gt;{true_state}: {true_prob:.3f}&lt;/div&gt;\n                &lt;div style=\"font-size:12px;\"&gt;{false_state}: {false_prob:.3f}&lt;/div&gt;\n            &lt;/div&gt;\n            {create_probability_bar(true_prob, false_prob, \"20px\", True)}\n        &lt;/div&gt;\n        \"\"\"\n\n    # Add click instruction\n    html += \"\"\"\n    &lt;div style=\"margin-top:8px; font-size:12px; color:#666; text-align:center;\"&gt;\n        Click node to see full probability details\n    &lt;/div&gt;\n    &lt;/div&gt;\n    \"\"\"\n\n    return html\n\ndef create_expanded_content(node_id, node_data):\n    \"\"\"\n    Create expanded content shown when a node is clicked\n\n    Args:\n        node_id (str): Identifier of the node\n        node_data (dict): Node attributes including probabilities\n\n    Returns:\n        str: HTML content for detailed view displayed on click\n    \"\"\"\n    # Extract node information\n    description = node_data.get('description', '')\n    priors = node_data.get('priors', {})\n    posteriors = node_data.get('posteriors', {})\n    instantiations = node_data.get('instantiations', [\"TRUE\", \"FALSE\"])\n\n    # Get proper state names\n    true_state = instantiations[0] if len(instantiations) &gt; 0 else \"TRUE\"\n    false_state = instantiations[1] if len(instantiations) &gt; 1 else \"FALSE\"\n\n    # Extract probabilities\n    true_prob = priors.get('true_prob', 0.5)\n    false_prob = 1.0 - true_prob\n\n    # Start building the expanded content\n    html = f\"\"\"\n    &lt;div style=\"max-width:500px; padding:15px; font-family:Arial, sans-serif;\"&gt;\n        &lt;h2 style=\"margin-top:0; color:#333;\"&gt;{node_id}&lt;/h2&gt;\n        &lt;p style=\"font-style:italic; margin-bottom:15px;\"&gt;{description}&lt;/p&gt;\n\n        &lt;div style=\"margin-bottom:20px; padding:12px; border:1px solid #ddd; background-color:#f9f9f9; border-radius:5px;\"&gt;\n            &lt;h3 style=\"margin-top:0; color:#333;\"&gt;Prior Probabilities&lt;/h3&gt;\n            &lt;div style=\"display:flex; justify-content:space-between; margin-bottom:5px;\"&gt;\n                &lt;div&gt;&lt;strong&gt;{true_state}:&lt;/strong&gt; {true_prob:.3f}&lt;/div&gt;\n                &lt;div&gt;&lt;strong&gt;{false_state}:&lt;/strong&gt; {false_prob:.3f}&lt;/div&gt;\n            &lt;/div&gt;\n            {create_probability_bar(true_prob, false_prob, \"25px\", True)}\n        &lt;/div&gt;\n    \"\"\"\n\n    # Add conditional probability table if available\n    if posteriors:\n        html += \"\"\"\n        &lt;div style=\"padding:12px; border:1px solid #ddd; background-color:#f9f9f9; border-radius:5px;\"&gt;\n            &lt;h3 style=\"margin-top:0; color:#333;\"&gt;Conditional Probabilities&lt;/h3&gt;\n            &lt;table style=\"width:100%; border-collapse:collapse; font-size:13px;\"&gt;\n                &lt;tr style=\"background-color:#eee;\"&gt;\n                    &lt;th style=\"padding:8px; text-align:left; border:1px solid #ddd;\"&gt;Condition&lt;/th&gt;\n                    &lt;th style=\"padding:8px; text-align:center; border:1px solid #ddd; width:80px;\"&gt;Value&lt;/th&gt;\n                    &lt;th style=\"padding:8px; text-align:center; border:1px solid #ddd;\"&gt;Visualization&lt;/th&gt;\n                &lt;/tr&gt;\n        \"\"\"\n\n        # Sort posteriors to group by similar conditions\n        posterior_items = list(posteriors.items())\n        posterior_items.sort(key=lambda x: x[0])\n\n        # Add rows for conditional probabilities\n        for key, value in posterior_items:\n            try:\n                # Try to parse probability value\n                prob_value = float(value)\n                inv_prob = 1.0 - prob_value\n\n                # Add row with probability visualization\n                html += f\"\"\"\n                &lt;tr&gt;\n                    &lt;td style=\"padding:8px; border:1px solid #ddd;\"&gt;{key}&lt;/td&gt;\n                    &lt;td style=\"padding:8px; text-align:center; border:1px solid #ddd;\"&gt;{prob_value:.3f}&lt;/td&gt;\n                    &lt;td style=\"padding:8px; border:1px solid #ddd;\"&gt;\n                        {create_probability_bar(prob_value, inv_prob, \"20px\", False)}\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                \"\"\"\n            except:\n                # Fallback for non-numeric values\n                html += f\"\"\"\n                &lt;tr&gt;\n                    &lt;td style=\"padding:8px; border:1px solid #ddd;\"&gt;{key}&lt;/td&gt;\n                    &lt;td style=\"padding:8px; text-align:center; border:1px solid #ddd;\" colspan=\"2\"&gt;{value}&lt;/td&gt;\n                &lt;/tr&gt;\n                \"\"\"\n\n        html += \"\"\"\n            &lt;/table&gt;\n        &lt;/div&gt;\n        \"\"\"\n\n    html += \"&lt;/div&gt;\"\n\n    return html",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#phase-4-main-visualization-function",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#phase-4-main-visualization-function",
    "title": "1  ``` {.python .cell-code}",
    "section": "6.5 Phase 4: Main Visualization Function",
    "text": "6.5 Phase 4: Main Visualization Function\n\n\nCode\ndef create_bayesian_network_with_probabilities(df):\n    \"\"\"\n    Create an interactive Bayesian network visualization with enhanced probability visualization\n    and node classification based on network structure.\n    \"\"\"\n    # Create a directed graph\n    G = nx.DiGraph()\n\n    # Add nodes with proper attributes\n    for idx, row in df.iterrows():\n        title = row['Title']\n        description = row['Description']\n\n        # Process probability information\n        priors = get_priors(row)\n        instantiations = get_instantiations(row)\n\n        # Add node with base information\n        G.add_node(\n            title,\n            description=description,\n            priors=priors,\n            instantiations=instantiations,\n            posteriors=get_posteriors(row)\n        )\n\n    # Add edges\n    for idx, row in df.iterrows():\n        child = row['Title']\n        parents = get_parents(row)\n\n        # Add edges from each parent to this child\n        for parent in parents:\n            if parent in G.nodes():\n                G.add_edge(parent, child)\n\n    # Classify nodes based on network structure\n    classify_nodes(G)\n\n    # Create network visualization\n    net = Network(notebook=True, directed=True, cdn_resources=\"in_line\", height=\"600px\", width=\"100%\")\n\n    # Configure physics for better layout\n    net.force_atlas_2based(gravity=-50, spring_length=100, spring_strength=0.02)\n    net.show_buttons(filter_=['physics'])\n\n    # Add the graph to the network\n    net.from_nx(G)\n\n    # Enhance node appearance with probability information and classification\n    for node in net.nodes:\n        node_id = node['id']\n        node_data = G.nodes[node_id]\n\n        # Get node type and set border color\n        node_type = node_data.get('node_type', 'unknown')\n        border_color = get_border_color(node_type)\n\n        # Get probability information\n        priors = node_data.get('priors', {})\n        true_prob = priors.get('true_prob', 0.5) if priors else 0.5\n\n        # Get proper state names\n        instantiations = node_data.get('instantiations', [\"TRUE\", \"FALSE\"])\n        true_state = instantiations[0] if len(instantiations) &gt; 0 else \"TRUE\"\n        false_state = instantiations[1] if len(instantiations) &gt; 1 else \"FALSE\"\n\n        # Create background color based on probability\n        background_color = get_probability_color(priors)\n\n        # Create tooltip with probability information\n        tooltip = create_tooltip(node_id, node_data)\n\n        # Create a simpler node label with probability\n        simple_label = f\"{node_id}\\np={true_prob:.2f}\"\n\n        # Store expanded content as a node attribute for use in click handler\n        node_data['expanded_content'] = create_expanded_content(node_id, node_data)\n\n        # Set node attributes\n        node['title'] = tooltip  # Tooltip HTML\n        node['label'] = simple_label  # Simple text label\n        node['shape'] = 'box'\n        node['color'] = {\n            'background': background_color,\n            'border': border_color,\n            'highlight': {\n                'background': background_color,\n                'border': border_color\n            }\n        }\n\n    # Set up the click handler with proper data\n    setup_data = {\n        'nodes_data': {node_id: {\n            'expanded_content': json.dumps(G.nodes[node_id].get('expanded_content', '')),\n            'description': G.nodes[node_id].get('description', ''),\n            'priors': G.nodes[node_id].get('priors', {}),\n            'posteriors': G.nodes[node_id].get('posteriors', {})\n        } for node_id in G.nodes()}\n    }\n\n    # Add custom click handling JavaScript\n    click_js = \"\"\"\n    // Store node data for click handling\n    var nodesData = %s;\n\n    // Add event listener for node clicks\n    network.on(\"click\", function(params) {\n        if (params.nodes.length &gt; 0) {\n            var nodeId = params.nodes[0];\n            var nodeInfo = nodesData[nodeId];\n\n            if (nodeInfo) {\n                // Create a modal popup for expanded content\n                var modal = document.createElement('div');\n                modal.style.position = 'fixed';\n                modal.style.left = '50%%';\n                modal.style.top = '50%%';\n                modal.style.transform = 'translate(-50%%, -50%%)';\n                modal.style.backgroundColor = 'white';\n                modal.style.padding = '20px';\n                modal.style.borderRadius = '5px';\n                modal.style.boxShadow = '0 0 10px rgba(0,0,0,0.5)';\n                modal.style.zIndex = '1000';\n                modal.style.maxWidth = '80%%';\n                modal.style.maxHeight = '80%%';\n                modal.style.overflow = 'auto';\n\n                // Parse the JSON string back to HTML content\n                try {\n                    var expandedContent = JSON.parse(nodeInfo.expanded_content);\n                    modal.innerHTML = expandedContent;\n                } catch (e) {\n                    modal.innerHTML = 'Error displaying content: ' + e.message;\n                }\n\n                // Add close button\n                var closeBtn = document.createElement('button');\n                closeBtn.innerHTML = 'Close';\n                closeBtn.style.marginTop = '10px';\n                closeBtn.style.padding = '5px 10px';\n                closeBtn.style.cursor = 'pointer';\n                closeBtn.onclick = function() {\n                    document.body.removeChild(modal);\n                };\n                modal.appendChild(closeBtn);\n\n                // Add modal to body\n                document.body.appendChild(modal);\n            }\n        }\n    });\n    \"\"\" % json.dumps(setup_data['nodes_data'])\n\n    # Save the graph to HTML\n    html_file = \"bayesian_network.html\"\n    net.save_graph(html_file)\n\n    # Inject custom click handling into HTML\n    try:\n        with open(html_file, \"r\") as f:\n            html_content = f.read()\n\n        # Insert click handling script before the closing body tag\n        html_content = html_content.replace('&lt;/body&gt;', f'&lt;script&gt;{click_js}&lt;/script&gt;&lt;/body&gt;')\n\n        # Write back the modified HTML\n        with open(html_file, \"w\") as f:\n            f.write(html_content)\n\n        return HTML(html_content)\n    except Exception as e:\n        return HTML(f\"&lt;p&gt;Error rendering HTML: {str(e)}&lt;/p&gt;&lt;p&gt;The network visualization has been saved to '{html_file}'&lt;/p&gt;\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#summary-of-achievements",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#summary-of-achievements",
    "title": "1  ``` {.python .cell-code}",
    "section": "8.1 Summary of Achievements",
    "text": "8.1 Summary of Achievements\nThis notebook has successfully demonstrated the core AMTAIR extraction pipeline, transforming structured argument representations into interactive Bayesian network visualizations through the following steps:\n\nEnvironment Setup: Established a reproducible environment with necessary libraries and data access\nArgument Extraction: Processed structured ArgDown representations preserving the hierarchical relationships\nProbability Integration: Enhanced arguments with probability information to create BayesDown\nData Transformation: Converted BayesDown into structured DataFrame representation\nVisualization & Analysis: Created interactive Bayesian network visualizations with probability encoding\n\nThe rain-sprinkler-lawn example, though simple, demonstrates all the key components of the extraction pipeline that can be applied to more complex AI safety arguments.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#limitations-and-future-work",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#limitations-and-future-work",
    "title": "1  ``` {.python .cell-code}",
    "section": "8.2 Limitations and Future Work",
    "text": "8.2 Limitations and Future Work\nWhile this prototype successfully demonstrates the core pipeline, several limitations and opportunities for future work remain:\n\nLLM Extraction: The current implementation focuses on processing pre-formatted ArgDown rather than performing extraction directly from unstructured text. Future work will integrate LLM-powered extraction.\nScalability: The system has been tested on small examples; scaling to larger, more complex arguments will require additional optimization and handling of computational complexity.\nPolicy Evaluation: The current implementation focuses on representation and visualization; future work will add policy evaluation capabilities by implementing intervention modeling.\nPrediction Market Integration: Future versions will integrate with forecasting platforms to incorporate live data into the models.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#connection-to-amtair-project",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#connection-to-amtair-project",
    "title": "1  ``` {.python .cell-code}",
    "section": "8.3 Connection to AMTAIR Project",
    "text": "8.3 Connection to AMTAIR Project\nThis prototype represents just one component of the broader AMTAIR project described in the project documentation (see PY_AMTAIRDescription and PY_AMTAIR_SoftwareToolsNMilestones). The full project includes:\n\nAI Risk Pathway Analyzer (ARPA): The core extraction and visualization system demonstrated in this notebook\nWorldview Comparator: Tools for comparing different perspectives on AI risk\nPolicy Impact Evaluator: Systems for evaluating intervention effects across scenarios\nStrategic Intervention Generator: Tools for identifying robust governance strategies\n\nTogether, these components aim to address the coordination crisis in AI governance by providing computational tools that make implicit models explicit, identify cruxes of disagreement, and evaluate policy impacts across diverse worldviews.\nBy transforming unstructured text into formal, analyzable representations, the AMTAIR project helps bridge the gaps between technical researchers, policy specialists, and other stakeholders, enabling more effective coordination in addressing existential risks from advanced AI.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  },
  {
    "objectID": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#convert-.ipynb-notebook-to-markdown",
    "href": "AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.html#convert-.ipynb-notebook-to-markdown",
    "title": "1  ``` {.python .cell-code}",
    "section": "10.1 Convert .ipynb Notebook to MarkDown",
    "text": "10.1 Convert .ipynb Notebook to MarkDown\n\n\nCode\n# @title --- Convert .ipynb Notebook to MarkDown ---\n\nimport nbformat\nfrom nbconvert import MarkdownExporter\nimport os\n\n# repo_url = \"https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_1/\"\nnotebook_name = \"AMTAIR_Prototype_example_carlsmith\"  #Change Notebook name and path when working on different examples\n\n# Download the notebook file\n!wget {repo_url}{notebook_name}.ipynb -O {notebook_name}.ipynb  # Corrected line\n\n# Load the notebook\n# add error handling for file not found\ntry:\n  with open(f\"{notebook_name}.ipynb\") as f:\n    nb = nbformat.read(f, as_version=4)\nexcept FileNotFoundError:\n  print(f\"Error: File '{notebook_name}.ipynb' not found. Please check if it was downloaded correctly.\")\n\n\n# Initialize the Markdown exporter\nexporter = MarkdownExporter(exclude_output=True)  # Correct initialization\n\n# Convert the notebook to Markdown\n(body, resources) = exporter.from_notebook_node(nb)\n\n# Save the Markdown to a file\nwith open(f\"{notebook_name}IPYNB.md\", \"w\") as f:\n    f.write(body)\n\n\n--2025-04-26 22:33:43--  https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_rain-sprinkler-lawn/AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.109.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1120047 (1.1M) [text/plain]\nSaving to: ‘AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb’\n\n          AMTAIR_Pr   0%[                    ]       0  --.-KB/s               AMTAIR_Prototype_ex 100%[===================&gt;]   1.07M  --.-KB/s    in 0.06s   \n\n2025-04-26 22:33:43 (18.1 MB/s) - ‘AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb’ saved [1120047/1120047]\n\n\n\n\n\nCode\n# @title 6.1 --- Convert Notebook to Markdown Documentation ---\n\n\"\"\"\nBLOCK PURPOSE: Converts the notebook to Markdown format for documentation purposes.\n\nMarkdown is a lightweight markup language that is widely used for documentation\nand is easily readable in both plain text and rendered formats. This conversion:\n\n1. Preserves the structure and content of the notebook\n2. Creates a format suitable for inclusion in documentation systems\n3. Excludes code outputs to focus on the process and methodology\n4. Supports version control and collaboration on GitHub\n\nThe resulting Markdown file can be used in project documentation, GitHub wikis,\nor as a standalone reference guide to the AMTAIR extraction pipeline.\n\nDEPENDENCIES: nbformat, nbconvert.MarkdownExporter modules\nINPUTS: Current notebook state\nOUTPUTS: Markdown version of the notebook\n\"\"\"\n\nimport nbformat\nfrom nbconvert import MarkdownExporter\nimport os\n\n# Repository URL variable for file access\n# repo_url = \"https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_carlsmith/\"\nnotebook_name = \"AMTAIR_Prototype_example_carlsmith\"  # Change when working with different examples\n\n# Download the notebook file\n!wget {repo_url}{notebook_name}.ipynb -O {notebook_name}.ipynb\n\n# Load the notebook\ntry:\n  with open(f\"{notebook_name}.ipynb\") as f:\n    nb = nbformat.read(f, as_version=4)\n  print(f\"✅ Successfully loaded notebook: {notebook_name}.ipynb\")\nexcept FileNotFoundError:\n  print(f\"❌ Error: File '{notebook_name}.ipynb' not found. Please check if it was downloaded correctly.\")\n\n\n# Initialize the Markdown exporter\nexporter = MarkdownExporter(exclude_output=True)  # Exclude outputs for cleaner documentation\n\n# Convert the notebook to Markdown\ntry:\n    (body, resources) = exporter.from_notebook_node(nb)\n\n    # Save the Markdown to a file\n    with open(f\"{notebook_name}IPYNB.md\", \"w\") as f:\n        f.write(body)\n    print(f\"✅ Successfully saved Markdown version to: {notebook_name}IPYNB.md\")\nexcept Exception as e:\n    print(f\"❌ Error converting notebook to Markdown: {str(e)}\")\n\n\n--2025-04-26 22:31:45--  https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_rain-sprinkler-lawn/AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1120047 (1.1M) [text/plain]\nSaving to: ‘AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb’\n\n          AMTAIR_Pr   0%[                    ]       0  --.-KB/s               AMTAIR_Prototype_ex 100%[===================&gt;]   1.07M  --.-KB/s    in 0.06s   \n\n2025-04-26 22:31:45 (18.0 MB/s) - ‘AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb’ saved [1120047/1120047]\n\n✅ Successfully loaded notebook: AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb\n✅ Successfully saved Markdown version to: AMTAIR_Prototype_example_rain-sprinkler-lawnIPYNB.md\n\n\n\n\nCode\nimport nbformat\nfrom nbconvert import PDFExporter\nimport os\nimport subprocess\nimport re\n\ndef escape_latex_special_chars(text):\n  \"\"\"Escapes special LaTeX characters in a string.\"\"\"\n  latex_special_chars = ['&', '%', '#', '_', '{', '}', '~', '^', '\\\\']\n  replacement_patterns = [\n      (char, '\\\\' + char) for char in latex_special_chars\n  ]\n\n  # Escape reserved characters\n  for original, replacement in replacement_patterns:\n    text = text.replace(original, replacement) # This is the fix\n  return text\n\n# Function to check if a command is available\ndef is_command_available(command):\n    try:\n        subprocess.run([command], capture_output=True, check=True)\n        return True\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        return False\n\n# Check if xelatex is installed, and install if necessary\nif not is_command_available(\"xelatex\"):\n    print(\"Installing necessary TeX packages...\")\n    !apt-get install -y texlive-xetex texlive-fonts-recommended texlive-plain-generic\n    print(\"TeX packages installed successfully.\")\nelse:\n    print(\"xelatex is already installed. Skipping installation.\")\n\n# repo_url = \"https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_1/\"\nnotebook_name = \"AMTAIR_Prototype_example_carlsmith\"  #Change Notebook name and path when working on different examples\n\n# Download the notebook file\n!wget {repo_url}{notebook_name}.ipynb -O {notebook_name}.ipynb  # Corrected line\n\n# Load the notebook\n# add error handling for file not found\ntry:\n  with open(f\"{notebook_name}.ipynb\") as f:\n    nb = nbformat.read(f, as_version=4)\nexcept FileNotFoundError:\n  print(f\"Error: File '{notebook_name}.ipynb' not found. Please check if it was downloaded correctly.\")\n\n\n# Initialize the PDF exporter\nexporter = PDFExporter(exclude_output=True)  # Changed to PDFExporter\n\n# Sanitize notebook cell titles to escape special LaTeX characters like '&'\nfor cell in nb.cells:\n    if 'cell_type' in cell and cell['cell_type'] == 'markdown':\n        if 'source' in cell and isinstance(cell['source'], str):\n            # Replace '&' with '\\protect&' in markdown cell titles AND CONTENT\n            # Updated to use escape_latex_special_chars function\n            cell['source'] = escape_latex_special_chars(cell['source'])\n            # Additionally, escape special characters in headings\n            cell['source'] = re.sub(r'(#+)\\s*(.*)', lambda m: m.group(1) + ' ' + escape_latex_special_chars(m.group(2)), cell['source'])\n\n\n\n# Convert the notebook to PDF\n(body, resources) = exporter.from_notebook_node(nb)\n\n\n# Save the PDF to a file\nwith open(f\"{notebook_name}IPYNB.pdf\", \"wb\") as f:  # Changed to 'wb' for binary writing\n    f.write(body)\n\n\nInstalling necessary TeX packages...\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following additional packages will be installed:\n  dvisvgm fonts-droid-fallback fonts-lato fonts-lmodern fonts-noto-mono\n  fonts-texgyre fonts-urw-base35 libapache-pom-java libcommons-logging-java\n  libcommons-parent-java libfontbox-java libgs9 libgs9-common libidn12\n  libijs-0.35 libjbig2dec0 libkpathsea6 libpdfbox-java libptexenc1 libruby3.0\n  libsynctex2 libteckit0 libtexlua53 libtexluajit2 libwoff1 libzzip-0-13\n  lmodern poppler-data preview-latex-style rake ruby ruby-net-telnet\n  ruby-rubygems ruby-webrick ruby-xmlrpc ruby3.0 rubygems-integration t1utils\n  teckit tex-common tex-gyre texlive-base texlive-binaries texlive-latex-base\n  texlive-latex-extra texlive-latex-recommended texlive-pictures tipa\n  xfonts-encodings xfonts-utils\nSuggested packages:\n  fonts-noto fonts-freefont-otf | fonts-freefont-ttf libavalon-framework-java\n  libcommons-logging-java-doc libexcalibur-logkit-java liblog4j1.2-java\n  poppler-utils ghostscript fonts-japanese-mincho | fonts-ipafont-mincho\n  fonts-japanese-gothic | fonts-ipafont-gothic fonts-arphic-ukai\n  fonts-arphic-uming fonts-nanum ri ruby-dev bundler debhelper gv\n  | postscript-viewer perl-tk xpdf | pdf-viewer xzdec\n  texlive-fonts-recommended-doc texlive-latex-base-doc python3-pygments\n  icc-profiles libfile-which-perl libspreadsheet-parseexcel-perl\n  texlive-latex-extra-doc texlive-latex-recommended-doc texlive-luatex\n  texlive-pstricks dot2tex prerex texlive-pictures-doc vprerex\n  default-jre-headless tipa-doc\nThe following NEW packages will be installed:\n  dvisvgm fonts-droid-fallback fonts-lato fonts-lmodern fonts-noto-mono\n  fonts-texgyre fonts-urw-base35 libapache-pom-java libcommons-logging-java\n  libcommons-parent-java libfontbox-java libgs9 libgs9-common libidn12\n  libijs-0.35 libjbig2dec0 libkpathsea6 libpdfbox-java libptexenc1 libruby3.0\n  libsynctex2 libteckit0 libtexlua53 libtexluajit2 libwoff1 libzzip-0-13\n  lmodern poppler-data preview-latex-style rake ruby ruby-net-telnet\n  ruby-rubygems ruby-webrick ruby-xmlrpc ruby3.0 rubygems-integration t1utils\n  teckit tex-common tex-gyre texlive-base texlive-binaries\n  texlive-fonts-recommended texlive-latex-base texlive-latex-extra\n  texlive-latex-recommended texlive-pictures texlive-plain-generic\n  texlive-xetex tipa xfonts-encodings xfonts-utils\n0 upgraded, 53 newly installed, 0 to remove and 34 not upgraded.\nNeed to get 182 MB of archives.\nAfter this operation, 571 MB of additional disk space will be used.\nGet:1 http://archive.ubuntu.com/ubuntu jammy/main amd64 fonts-droid-fallback all 1:6.0.1r16-1.1build1 [1,805 kB]\nGet:2 http://archive.ubuntu.com/ubuntu jammy/main amd64 fonts-lato all 2.0-2.1 [2,696 kB]\nGet:3 http://archive.ubuntu.com/ubuntu jammy/main amd64 poppler-data all 0.4.11-1 [2,171 kB]\nGet:4 http://archive.ubuntu.com/ubuntu jammy/universe amd64 tex-common all 6.17 [33.7 kB]\nGet:5 http://archive.ubuntu.com/ubuntu jammy/main amd64 fonts-urw-base35 all 20200910-1 [6,367 kB]\nGet:6 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgs9-common all 9.55.0~dfsg1-0ubuntu5.11 [753 kB]\nGet:7 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libidn12 amd64 1.38-4ubuntu1 [60.0 kB]\nGet:8 http://archive.ubuntu.com/ubuntu jammy/main amd64 libijs-0.35 amd64 0.35-15build2 [16.5 kB]\nGet:9 http://archive.ubuntu.com/ubuntu jammy/main amd64 libjbig2dec0 amd64 0.19-3build2 [64.7 kB]\nGet:10 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgs9 amd64 9.55.0~dfsg1-0ubuntu5.11 [5,031 kB]\nGet:11 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libkpathsea6 amd64 2021.20210626.59705-1ubuntu0.2 [60.4 kB]\nGet:12 http://archive.ubuntu.com/ubuntu jammy/main amd64 libwoff1 amd64 1.0.2-1build4 [45.2 kB]\nGet:13 http://archive.ubuntu.com/ubuntu jammy/universe amd64 dvisvgm amd64 2.13.1-1 [1,221 kB]\nGet:14 http://archive.ubuntu.com/ubuntu jammy/universe amd64 fonts-lmodern all 2.004.5-6.1 [4,532 kB]\nGet:15 http://archive.ubuntu.com/ubuntu jammy/main amd64 fonts-noto-mono all 20201225-1build1 [397 kB]\nGet:16 http://archive.ubuntu.com/ubuntu jammy/universe amd64 fonts-texgyre all 20180621-3.1 [10.2 MB]\nGet:17 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libapache-pom-java all 18-1 [4,720 B]\nGet:18 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libcommons-parent-java all 43-1 [10.8 kB]\nGet:19 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libcommons-logging-java all 1.2-2 [60.3 kB]\nGet:20 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libptexenc1 amd64 2021.20210626.59705-1ubuntu0.2 [39.1 kB]\nGet:21 http://archive.ubuntu.com/ubuntu jammy/main amd64 rubygems-integration all 1.18 [5,336 B]\nGet:22 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 ruby3.0 amd64 3.0.2-7ubuntu2.10 [50.1 kB]\nGet:23 http://archive.ubuntu.com/ubuntu jammy/main amd64 ruby-rubygems all 3.3.5-2 [228 kB]\nGet:24 http://archive.ubuntu.com/ubuntu jammy/main amd64 ruby amd64 1:3.0~exp1 [5,100 B]\nGet:25 http://archive.ubuntu.com/ubuntu jammy/main amd64 rake all 13.0.6-2 [61.7 kB]\nGet:26 http://archive.ubuntu.com/ubuntu jammy/main amd64 ruby-net-telnet all 0.1.1-2 [12.6 kB]\nGet:27 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 ruby-webrick all 1.7.0-3ubuntu0.1 [52.1 kB]\nGet:28 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 ruby-xmlrpc all 0.3.2-1ubuntu0.1 [24.9 kB]\nGet:29 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libruby3.0 amd64 3.0.2-7ubuntu2.10 [5,114 kB]\nGet:30 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libsynctex2 amd64 2021.20210626.59705-1ubuntu0.2 [55.6 kB]\nGet:31 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libteckit0 amd64 2.5.11+ds1-1 [421 kB]\nGet:32 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libtexlua53 amd64 2021.20210626.59705-1ubuntu0.2 [120 kB]\nGet:33 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libtexluajit2 amd64 2021.20210626.59705-1ubuntu0.2 [267 kB]\nGet:34 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libzzip-0-13 amd64 0.13.72+dfsg.1-1.1 [27.0 kB]\nGet:35 http://archive.ubuntu.com/ubuntu jammy/main amd64 xfonts-encodings all 1:1.0.5-0ubuntu2 [578 kB]\nGet:36 http://archive.ubuntu.com/ubuntu jammy/main amd64 xfonts-utils amd64 1:7.7+6build2 [94.6 kB]\nGet:37 http://archive.ubuntu.com/ubuntu jammy/universe amd64 lmodern all 2.004.5-6.1 [9,471 kB]\nGet:38 http://archive.ubuntu.com/ubuntu jammy/universe amd64 preview-latex-style all 12.2-1ubuntu1 [185 kB]\nGet:39 http://archive.ubuntu.com/ubuntu jammy/main amd64 t1utils amd64 1.41-4build2 [61.3 kB]\nGet:40 http://archive.ubuntu.com/ubuntu jammy/universe amd64 teckit amd64 2.5.11+ds1-1 [699 kB]\nGet:41 http://archive.ubuntu.com/ubuntu jammy/universe amd64 tex-gyre all 20180621-3.1 [6,209 kB]\nGet:42 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 texlive-binaries amd64 2021.20210626.59705-1ubuntu0.2 [9,860 kB]\nGet:43 http://archive.ubuntu.com/ubuntu jammy/universe amd64 texlive-base all 2021.20220204-1 [21.0 MB]\nGet:44 http://archive.ubuntu.com/ubuntu jammy/universe amd64 texlive-fonts-recommended all 2021.20220204-1 [4,972 kB]\nGet:45 http://archive.ubuntu.com/ubuntu jammy/universe amd64 texlive-latex-base all 2021.20220204-1 [1,128 kB]\nGet:46 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libfontbox-java all 1:1.8.16-2 [207 kB]\nGet:47 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libpdfbox-java all 1:1.8.16-2 [5,199 kB]\nGet:48 http://archive.ubuntu.com/ubuntu jammy/universe amd64 texlive-latex-recommended all 2021.20220204-1 [14.4 MB]\nGet:49 http://archive.ubuntu.com/ubuntu jammy/universe amd64 texlive-pictures all 2021.20220204-1 [8,720 kB]\nGet:50 http://archive.ubuntu.com/ubuntu jammy/universe amd64 texlive-latex-extra all 2021.20220204-1 [13.9 MB]\nGet:51 http://archive.ubuntu.com/ubuntu jammy/universe amd64 texlive-plain-generic all 2021.20220204-1 [27.5 MB]\nGet:52 http://archive.ubuntu.com/ubuntu jammy/universe amd64 tipa all 2:1.3-21 [2,967 kB]\nGet:53 http://archive.ubuntu.com/ubuntu jammy/universe amd64 texlive-xetex all 2021.20220204-1 [12.4 MB]\nFetched 182 MB in 3s (69.8 MB/s)\nExtracting templates from packages: 100%\nPreconfiguring packages ...\nSelecting previously unselected package fonts-droid-fallback.\n(Reading database ... 126558 files and directories currently installed.)\nPreparing to unpack .../00-fonts-droid-fallback_1%3a6.0.1r16-1.1build1_all.deb ...\nUnpacking fonts-droid-fallback (1:6.0.1r16-1.1build1) ...\nSelecting previously unselected package fonts-lato.\nPreparing to unpack .../01-fonts-lato_2.0-2.1_all.deb ...\nUnpacking fonts-lato (2.0-2.1) ...\nSelecting previously unselected package poppler-data.\nPreparing to unpack .../02-poppler-data_0.4.11-1_all.deb ...\nUnpacking poppler-data (0.4.11-1) ...\nSelecting previously unselected package tex-common.\nPreparing to unpack .../03-tex-common_6.17_all.deb ...\nUnpacking tex-common (6.17) ...\nSelecting previously unselected package fonts-urw-base35.\nPreparing to unpack .../04-fonts-urw-base35_20200910-1_all.deb ...\nUnpacking fonts-urw-base35 (20200910-1) ...\nSelecting previously unselected package libgs9-common.\nPreparing to unpack .../05-libgs9-common_9.55.0~dfsg1-0ubuntu5.11_all.deb ...\nUnpacking libgs9-common (9.55.0~dfsg1-0ubuntu5.11) ...\nSelecting previously unselected package libidn12:amd64.\nPreparing to unpack .../06-libidn12_1.38-4ubuntu1_amd64.deb ...\nUnpacking libidn12:amd64 (1.38-4ubuntu1) ...\nSelecting previously unselected package libijs-0.35:amd64.\nPreparing to unpack .../07-libijs-0.35_0.35-15build2_amd64.deb ...\nUnpacking libijs-0.35:amd64 (0.35-15build2) ...\nSelecting previously unselected package libjbig2dec0:amd64.\nPreparing to unpack .../08-libjbig2dec0_0.19-3build2_amd64.deb ...\nUnpacking libjbig2dec0:amd64 (0.19-3build2) ...\nSelecting previously unselected package libgs9:amd64.\nPreparing to unpack .../09-libgs9_9.55.0~dfsg1-0ubuntu5.11_amd64.deb ...\nUnpacking libgs9:amd64 (9.55.0~dfsg1-0ubuntu5.11) ...\nSelecting previously unselected package libkpathsea6:amd64.\nPreparing to unpack .../10-libkpathsea6_2021.20210626.59705-1ubuntu0.2_amd64.deb ...\nUnpacking libkpathsea6:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSelecting previously unselected package libwoff1:amd64.\nPreparing to unpack .../11-libwoff1_1.0.2-1build4_amd64.deb ...\nUnpacking libwoff1:amd64 (1.0.2-1build4) ...\nSelecting previously unselected package dvisvgm.\nPreparing to unpack .../12-dvisvgm_2.13.1-1_amd64.deb ...\nUnpacking dvisvgm (2.13.1-1) ...\nSelecting previously unselected package fonts-lmodern.\nPreparing to unpack .../13-fonts-lmodern_2.004.5-6.1_all.deb ...\nUnpacking fonts-lmodern (2.004.5-6.1) ...\nSelecting previously unselected package fonts-noto-mono.\nPreparing to unpack .../14-fonts-noto-mono_20201225-1build1_all.deb ...\nUnpacking fonts-noto-mono (20201225-1build1) ...\nSelecting previously unselected package fonts-texgyre.\nPreparing to unpack .../15-fonts-texgyre_20180621-3.1_all.deb ...\nUnpacking fonts-texgyre (20180621-3.1) ...\nSelecting previously unselected package libapache-pom-java.\nPreparing to unpack .../16-libapache-pom-java_18-1_all.deb ...\nUnpacking libapache-pom-java (18-1) ...\nSelecting previously unselected package libcommons-parent-java.\nPreparing to unpack .../17-libcommons-parent-java_43-1_all.deb ...\nUnpacking libcommons-parent-java (43-1) ...\nSelecting previously unselected package libcommons-logging-java.\nPreparing to unpack .../18-libcommons-logging-java_1.2-2_all.deb ...\nUnpacking libcommons-logging-java (1.2-2) ...\nSelecting previously unselected package libptexenc1:amd64.\nPreparing to unpack .../19-libptexenc1_2021.20210626.59705-1ubuntu0.2_amd64.deb ...\nUnpacking libptexenc1:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSelecting previously unselected package rubygems-integration.\nPreparing to unpack .../20-rubygems-integration_1.18_all.deb ...\nUnpacking rubygems-integration (1.18) ...\nSelecting previously unselected package ruby3.0.\nPreparing to unpack .../21-ruby3.0_3.0.2-7ubuntu2.10_amd64.deb ...\nUnpacking ruby3.0 (3.0.2-7ubuntu2.10) ...\nSelecting previously unselected package ruby-rubygems.\nPreparing to unpack .../22-ruby-rubygems_3.3.5-2_all.deb ...\nUnpacking ruby-rubygems (3.3.5-2) ...\nSelecting previously unselected package ruby.\nPreparing to unpack .../23-ruby_1%3a3.0~exp1_amd64.deb ...\nUnpacking ruby (1:3.0~exp1) ...\nSelecting previously unselected package rake.\nPreparing to unpack .../24-rake_13.0.6-2_all.deb ...\nUnpacking rake (13.0.6-2) ...\nSelecting previously unselected package ruby-net-telnet.\nPreparing to unpack .../25-ruby-net-telnet_0.1.1-2_all.deb ...\nUnpacking ruby-net-telnet (0.1.1-2) ...\nSelecting previously unselected package ruby-webrick.\nPreparing to unpack .../26-ruby-webrick_1.7.0-3ubuntu0.1_all.deb ...\nUnpacking ruby-webrick (1.7.0-3ubuntu0.1) ...\nSelecting previously unselected package ruby-xmlrpc.\nPreparing to unpack .../27-ruby-xmlrpc_0.3.2-1ubuntu0.1_all.deb ...\nUnpacking ruby-xmlrpc (0.3.2-1ubuntu0.1) ...\nSelecting previously unselected package libruby3.0:amd64.\nPreparing to unpack .../28-libruby3.0_3.0.2-7ubuntu2.10_amd64.deb ...\nUnpacking libruby3.0:amd64 (3.0.2-7ubuntu2.10) ...\nSelecting previously unselected package libsynctex2:amd64.\nPreparing to unpack .../29-libsynctex2_2021.20210626.59705-1ubuntu0.2_amd64.deb ...\nUnpacking libsynctex2:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSelecting previously unselected package libteckit0:amd64.\nPreparing to unpack .../30-libteckit0_2.5.11+ds1-1_amd64.deb ...\nUnpacking libteckit0:amd64 (2.5.11+ds1-1) ...\nSelecting previously unselected package libtexlua53:amd64.\nPreparing to unpack .../31-libtexlua53_2021.20210626.59705-1ubuntu0.2_amd64.deb ...\nUnpacking libtexlua53:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSelecting previously unselected package libtexluajit2:amd64.\nPreparing to unpack .../32-libtexluajit2_2021.20210626.59705-1ubuntu0.2_amd64.deb ...\nUnpacking libtexluajit2:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSelecting previously unselected package libzzip-0-13:amd64.\nPreparing to unpack .../33-libzzip-0-13_0.13.72+dfsg.1-1.1_amd64.deb ...\nUnpacking libzzip-0-13:amd64 (0.13.72+dfsg.1-1.1) ...\nSelecting previously unselected package xfonts-encodings.\nPreparing to unpack .../34-xfonts-encodings_1%3a1.0.5-0ubuntu2_all.deb ...\nUnpacking xfonts-encodings (1:1.0.5-0ubuntu2) ...\nSelecting previously unselected package xfonts-utils.\nPreparing to unpack .../35-xfonts-utils_1%3a7.7+6build2_amd64.deb ...\nUnpacking xfonts-utils (1:7.7+6build2) ...\nSelecting previously unselected package lmodern.\nPreparing to unpack .../36-lmodern_2.004.5-6.1_all.deb ...\nUnpacking lmodern (2.004.5-6.1) ...\nSelecting previously unselected package preview-latex-style.\nPreparing to unpack .../37-preview-latex-style_12.2-1ubuntu1_all.deb ...\nUnpacking preview-latex-style (12.2-1ubuntu1) ...\nSelecting previously unselected package t1utils.\nPreparing to unpack .../38-t1utils_1.41-4build2_amd64.deb ...\nUnpacking t1utils (1.41-4build2) ...\nSelecting previously unselected package teckit.\nPreparing to unpack .../39-teckit_2.5.11+ds1-1_amd64.deb ...\nUnpacking teckit (2.5.11+ds1-1) ...\nSelecting previously unselected package tex-gyre.\nPreparing to unpack .../40-tex-gyre_20180621-3.1_all.deb ...\nUnpacking tex-gyre (20180621-3.1) ...\nSelecting previously unselected package texlive-binaries.\nPreparing to unpack .../41-texlive-binaries_2021.20210626.59705-1ubuntu0.2_amd64.deb ...\nUnpacking texlive-binaries (2021.20210626.59705-1ubuntu0.2) ...\nSelecting previously unselected package texlive-base.\nPreparing to unpack .../42-texlive-base_2021.20220204-1_all.deb ...\nUnpacking texlive-base (2021.20220204-1) ...\nSelecting previously unselected package texlive-fonts-recommended.\nPreparing to unpack .../43-texlive-fonts-recommended_2021.20220204-1_all.deb ...\nUnpacking texlive-fonts-recommended (2021.20220204-1) ...\nSelecting previously unselected package texlive-latex-base.\nPreparing to unpack .../44-texlive-latex-base_2021.20220204-1_all.deb ...\nUnpacking texlive-latex-base (2021.20220204-1) ...\nSelecting previously unselected package libfontbox-java.\nPreparing to unpack .../45-libfontbox-java_1%3a1.8.16-2_all.deb ...\nUnpacking libfontbox-java (1:1.8.16-2) ...\nSelecting previously unselected package libpdfbox-java.\nPreparing to unpack .../46-libpdfbox-java_1%3a1.8.16-2_all.deb ...\nUnpacking libpdfbox-java (1:1.8.16-2) ...\nSelecting previously unselected package texlive-latex-recommended.\nPreparing to unpack .../47-texlive-latex-recommended_2021.20220204-1_all.deb ...\nUnpacking texlive-latex-recommended (2021.20220204-1) ...\nSelecting previously unselected package texlive-pictures.\nPreparing to unpack .../48-texlive-pictures_2021.20220204-1_all.deb ...\nUnpacking texlive-pictures (2021.20220204-1) ...\nSelecting previously unselected package texlive-latex-extra.\nPreparing to unpack .../49-texlive-latex-extra_2021.20220204-1_all.deb ...\nUnpacking texlive-latex-extra (2021.20220204-1) ...\nSelecting previously unselected package texlive-plain-generic.\nPreparing to unpack .../50-texlive-plain-generic_2021.20220204-1_all.deb ...\nUnpacking texlive-plain-generic (2021.20220204-1) ...\nSelecting previously unselected package tipa.\nPreparing to unpack .../51-tipa_2%3a1.3-21_all.deb ...\nUnpacking tipa (2:1.3-21) ...\nSelecting previously unselected package texlive-xetex.\nPreparing to unpack .../52-texlive-xetex_2021.20220204-1_all.deb ...\nUnpacking texlive-xetex (2021.20220204-1) ...\nSetting up fonts-lato (2.0-2.1) ...\nSetting up fonts-noto-mono (20201225-1build1) ...\nSetting up libwoff1:amd64 (1.0.2-1build4) ...\nSetting up libtexlua53:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSetting up libijs-0.35:amd64 (0.35-15build2) ...\nSetting up libtexluajit2:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSetting up libfontbox-java (1:1.8.16-2) ...\nSetting up rubygems-integration (1.18) ...\nSetting up libzzip-0-13:amd64 (0.13.72+dfsg.1-1.1) ...\nSetting up fonts-urw-base35 (20200910-1) ...\nSetting up poppler-data (0.4.11-1) ...\nSetting up tex-common (6.17) ...\nupdate-language: texlive-base not installed and configured, doing nothing!\nSetting up libjbig2dec0:amd64 (0.19-3build2) ...\nSetting up libteckit0:amd64 (2.5.11+ds1-1) ...\nSetting up libapache-pom-java (18-1) ...\nSetting up ruby-net-telnet (0.1.1-2) ...\nSetting up xfonts-encodings (1:1.0.5-0ubuntu2) ...\nSetting up t1utils (1.41-4build2) ...\nSetting up libidn12:amd64 (1.38-4ubuntu1) ...\nSetting up fonts-texgyre (20180621-3.1) ...\nSetting up libkpathsea6:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSetting up ruby-webrick (1.7.0-3ubuntu0.1) ...\nSetting up fonts-lmodern (2.004.5-6.1) ...\nSetting up fonts-droid-fallback (1:6.0.1r16-1.1build1) ...\nSetting up ruby-xmlrpc (0.3.2-1ubuntu0.1) ...\nSetting up libsynctex2:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSetting up libgs9-common (9.55.0~dfsg1-0ubuntu5.11) ...\nSetting up teckit (2.5.11+ds1-1) ...\nSetting up libpdfbox-java (1:1.8.16-2) ...\nSetting up libgs9:amd64 (9.55.0~dfsg1-0ubuntu5.11) ...\nSetting up preview-latex-style (12.2-1ubuntu1) ...\nSetting up libcommons-parent-java (43-1) ...\nSetting up dvisvgm (2.13.1-1) ...\nSetting up libcommons-logging-java (1.2-2) ...\nSetting up xfonts-utils (1:7.7+6build2) ...\nSetting up libptexenc1:amd64 (2021.20210626.59705-1ubuntu0.2) ...\nSetting up texlive-binaries (2021.20210626.59705-1ubuntu0.2) ...\nupdate-alternatives: using /usr/bin/xdvi-xaw to provide /usr/bin/xdvi.bin (xdvi.bin) in auto mode\nupdate-alternatives: using /usr/bin/bibtex.original to provide /usr/bin/bibtex (bibtex) in auto mode\nSetting up lmodern (2.004.5-6.1) ...\nSetting up texlive-base (2021.20220204-1) ...\n/usr/bin/ucfr\n/usr/bin/ucfr\n/usr/bin/ucfr\n/usr/bin/ucfr\nmktexlsr: Updating /var/lib/texmf/ls-R-TEXLIVEDIST... \nmktexlsr: Updating /var/lib/texmf/ls-R-TEXMFMAIN... \nmktexlsr: Updating /var/lib/texmf/ls-R... \nmktexlsr: Done.\ntl-paper: setting paper size for dvips to a4: /var/lib/texmf/dvips/config/config-paper.ps\ntl-paper: setting paper size for dvipdfmx to a4: /var/lib/texmf/dvipdfmx/dvipdfmx-paper.cfg\ntl-paper: setting paper size for xdvi to a4: /var/lib/texmf/xdvi/XDvi-paper\ntl-paper: setting paper size for pdftex to a4: /var/lib/texmf/tex/generic/tex-ini-files/pdftexconfig.tex\nSetting up tex-gyre (20180621-3.1) ...\nSetting up texlive-plain-generic (2021.20220204-1) ...\nSetting up texlive-latex-base (2021.20220204-1) ...\nSetting up texlive-latex-recommended (2021.20220204-1) ...\nSetting up texlive-pictures (2021.20220204-1) ...\nSetting up texlive-fonts-recommended (2021.20220204-1) ...\nSetting up tipa (2:1.3-21) ...\nSetting up texlive-latex-extra (2021.20220204-1) ...\nSetting up texlive-xetex (2021.20220204-1) ...\nSetting up rake (13.0.6-2) ...\nSetting up libruby3.0:amd64 (3.0.2-7ubuntu2.10) ...\nSetting up ruby3.0 (3.0.2-7ubuntu2.10) ...\nSetting up ruby (1:3.0~exp1) ...\nSetting up ruby-rubygems (3.3.5-2) ...\nProcessing triggers for man-db (2.10.2-1) ...\nProcessing triggers for mailcap (3.70+nmu1ubuntu1) ...\nProcessing triggers for fontconfig (2.13.1-4.2ubuntu5) ...\nProcessing triggers for libc-bin (2.35-0ubuntu3.8) ...\n/sbin/ldconfig.real: /usr/local/lib/libhwloc.so.15 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libtbbbind.so.3 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libur_loader.so.0 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_5.so.3 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc.so.2 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libtbb.so.12 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc_proxy.so.2 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libtcm.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libur_adapter_level_zero.so.0 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libur_adapter_opencl.so.0 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libtcm_debug.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libumf.so.0 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_0.so.3 is not a symbolic link\n\nProcessing triggers for tex-common (6.17) ...\nRunning updmap-sys. This may take some time... done.\nRunning mktexlsr /var/lib/texmf ... done.\nBuilding format(s) --all.\n    This may take some time... done.\nTeX packages installed successfully.\n--2025-04-26 22:32:56--  https://raw.githubusercontent.com/SingularitySmith/AMTAIR_Prototype/main/data/example_rain-sprinkler-lawn/AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.111.133, 185.199.108.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1120047 (1.1M) [text/plain]\nSaving to: ‘AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb’\n\nAMTAIR_Prototype_ex 100%[===================&gt;]   1.07M  --.-KB/s    in 0.06s   \n\n2025-04-26 22:32:56 (17.0 MB/s) - ‘AMTAIR_Prototype_example_rain-sprinkler-lawn.ipynb’ saved [1120047/1120047]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>[AMTAIR Prototype Demonstration (Public Colab Notebook)](https://colab.research.google.com/github/SingularitySmith/AMTAIR_Prototype/blob/main/version_history/AMTAIR_Prototype_0_1.3.ipynb#scrollTo=lt8-AnebGUXr)</span>"
    ]
  }
]