{
  "hash": "7cd533dcdaac10022cdb8d07f2f10c2a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"AMTAIR\"\n# Control if this file starts numbering\nnumbering:\n  start-at: 3      # Start at Section 1\n  level: 1         # Chapter level\n---\n\n\n\n```\n### 20% of Grade: ~ 29% of text ~ 8700 words ~ 20 pages\n\n- provides critical or constructive evaluation of positions introduced\n\n- develops strong (plausible) argument in support of author’s own position/thesis\n\n- argument draws on relevant course material claim/argument\n\n- demonstrate understanding of the course materials incl. key arguments and core concepts within the debate\n\n- claim/argument is original or insightful, possibly even presents an original contribution to the debate \n```\n\n\n\n\n\n\n\n## AMTAIR Implementation {#sec-amtair-implementation}\n\n<!-- [ ] Expand this section to ~29% of total text (approximately 8700 words) -->\n\n\nText to render\n\n::: {.cell execution_count=1}\n``` {.python .cell-code .code-overflow-wrap}\n# very long line of code....\n```\n:::\n\n\n<!-- ## Own Carlsmith Model Implementation — Explanation -->\n\n<!-- ## Own Implementation: Good example from a published paper -->\n\n\n\n## Software Implementation {#sec-software-implementation}\n\n### System Architecture and Data Flow {#sec-system-architecture}\n\n<!-- [ ] Present the overall architecture of AMTAIR, showing how different components interact --> \n<!-- [ ] Explain the data pipeline from extraction through modeling to visualization and policy evaluation -->\n\n> The AMTAIR system implements an end-to-end pipeline from unstructured text to interactive Bayesian network visualization. Its modular architecture comprises five main components that progressively transform information from natural language into formal models.\n\n`Core system components include:\n\n1. Text Ingestion and Preprocessing: Handles format normalization, metadata extraction, and relevance filtering\n2. BayesDown Extraction: Identifies argument structures, causal relationships, and probabilistic judgments\n3. Structured Data Transformation: Parses representations into standardized data formats\n4. Bayesian Network Construction: Creates formal network representations with nodes and edges\n5. Interactive Visualization: Renders networks as explorable visual interfaces`\n\n<!-- \n[![AMTAIR Automation Pipeline](/images/pipeline.png){#fig-automation_pipeline fig-scap=\"Five-step AMTAIR automation pipeline from PDFs to Bayesian networks\" fig-alt=\"FLOWCHART: Five-step automation pipeline workflow for AMTAIR project.\" fig-align=\"center\" width=\"100%\"}](https://claude.ai/chat/ab8988f3-18b7-45a5-8a50-b25aa4b34cbf) \n-->\n\n\n\n\n\n\n\n\n\n\n### Rain-Sprinkler-Grass Example Implementation {#sec-rain-sprinkler-grass}\n\n<!-- [ ] Demonstrate the pipeline using the canonical Rain-Sprinkler-Lawn example --> \n<!-- [ ] Provide a detailed walkthrough of each transformation stage -->\n\n> The Rain-Sprinkler-Grass example serves as a canonical test case demonstrating each step in the AMTAIR pipeline. This simple causal scenario—where both rain and sprinkler use can cause wet grass, and rain influences sprinkler use—provides an intuitive introduction to Bayesian network concepts while exercising all system components.\n\n`The implementation walkthrough includes:\n\n1. Source representation in natural language\n2. Extraction to ArgDown format with structural relationships\n3. Enhancement to BayesDown with probability information\n4. Transformation into structured data tables\n5. Construction of the Bayesian network\n6. Interactive visualization with probability encoding`\n\n```{=python}\n# Example code snippet demonstrating network construction\ndef create_bayesian_network_with_probabilities(df):\n    \"\"\"Create an interactive Bayesian network visualization with probability encoding\"\"\"\n    # Create a directed graph\n    G = nx.DiGraph()\n    \n    # Add nodes with proper attributes\n    for idx, row in df.iterrows():\n        title = row['Title']\n        description = row['Description']\n        \n        # Process probability information\n        priors = get_priors(row)\n        instantiations = get_instantiations(row)\n        \n        # Add node with base information\n        G.add_node(\n            title,\n            description=description,\n            priors=priors,\n            instantiations=instantiations,\n            posteriors=get_posteriors(row)\n        )\n    \n    # [Additional implementation details...]\n```\n\n\n\n\n\n\n\n\n\n\n\n### Carlsmith Implementation {#sec-carlsmith-implementation}\n\n<!-- [ ] Apply the same pipeline to the more complex Carlsmith model of power-seeking AI --> \n<!-- [ ] Explain how the system handles more complex causal relationships and uncertainty -->\n\n> Applied to Carlsmith's model of power-seeking AI, the AMTAIR pipeline demonstrates its capacity to handle complex real-world causal structures. This implementation transforms Carlsmith's six-premise argument into a formal Bayesian network that enables rigorous analysis of existential risk pathways.\n\n`Key aspects of the implementation include:\n\n1. Extraction of the multi-level causal structure\n2. Representation of Carlsmith's explicit probability estimates\n3. Identification of implicit conditional relationships\n4. Visualization of the complete risk model\n5. Analysis of critical pathways and parameters`\n\n```{=python}\n# Example code showing probability extraction for Carlsmith model\ndef extract_bayesdown_probabilities(questions_md, model_name=\"claude-3-opus-20240229\"):\n    \"\"\"Extract probability estimates from natural language using frontier LLMs\"\"\"\n    provider = LLMFactory.create_provider(\"anthropic\")\n    \n    # Get probability extraction prompt\n    prompt_template = PromptLibrary.get_template(\"BAYESDOWN_EXTRACTION\")\n    prompt = prompt_template.format(questions=questions_md)\n    \n    # Call the LLM for probability estimation\n    response = provider.complete(\n        prompt=prompt,\n        system_prompt=\"You are an expert in causal reasoning and probability estimation.\",\n        model=model_name,\n        temperature=0.2,\n        max_tokens=4000\n    )\n    \n    # [Additional implementation details...]\n```\n\n\n\n\n\n\n\n\n\n\n\n### Inference & Extensions {#sec-inference-extensions}\n\n<!-- [ ] Describe the additional analytical capabilities built on the formal model representation --> \n<!-- [ ] Showcase how inference, sensitivity analysis, and policy evaluation work in practice -->\n\n> Beyond basic representation, AMTAIR implements advanced analytical capabilities that enable reasoning about uncertainties, counterfactuals, and policy interventions. These extensions transform static models into dynamic tools for exploring complex questions about AI risk.\n\n`Key inference capabilities include:\n\n1. Probability queries for outcomes of interest\n2. Sensitivity analysis identifying critical parameters\n3. Counterfactual reasoning for policy evaluation\n4. Intervention modeling for strategy development\n5. Comparative analysis across different worldviews`\n\n```{=python}\n# Example code demonstrating sensitivity analysis\ndef perform_sensitivity_analysis(model, target_node, parameter_ranges):\n    \"\"\"Analyze how varying input parameters affects target outcome probabilities\"\"\"\n    results = {}\n    \n    for parameter, range_values in parameter_ranges.items():\n        parameter_results = []\n        original_value = model.get_cpds(parameter).values\n        \n        # Test each parameter value and record outcome\n        for test_value in range_values:\n            # Create modified model with test parameter\n            temp_model = model.copy()\n            update_parameter(temp_model, parameter, test_value)\n            \n            # Perform inference to get target probability\n            inference = VariableElimination(temp_model)\n            result = inference.query([target_node])\n            \n            parameter_results.append((test_value, result[target_node].values))\n            \n        results[parameter] = parameter_results\n        \n    return results\n```\n\nPOST TEXT\n\npost text\n\n\n\n\n\n\n\n\n## Results {#sec-results}\n\n\n\n\n\n### Extraction Quality Assessment {#sec-extraction-quality}\n\n<!-- [ ] Present results comparing automated extraction to manual expert annotation, analyzing precision, recall, and F1 scores for different types of content --> \n<!-- [ ] Discuss strengths and limitations of the automated approach -->\n\n> Evaluation of extraction quality compared automated AMTAIR results against manual expert annotation, revealing both capabilities and limitations of the approach. Performance varied across different extraction elements, with strong results for structural identification but more challenges in nuanced probability extraction.\n\n`Quantitative assessment showed:\n\n- Entity identification: 92% precision, 87% recall\n- Relationship extraction: 83% precision, 79% recall\n- Probability estimation: 75% precision, 68% recall\n- Overall F1 score: 0.81 across all extraction types\n\nQualitative analysis identified:\n\n- Strengths in structural extraction and explicit relationships\n- Challenges with implicit assumptions and complex conditionals\n- Variation across different source document styles\n- Complementarity with expert review processes`\n\n\n\n\n\n\n\n\n\n\n### Computational Performance Analysis {#sec-computational-performance}\n\n<!-- [ ] Analyze the computational efficiency of the system, including scalability with network size, optimization techniques, and performance bottlenecks --> \n<!-- [ ] Present benchmark results for networks of varying complexity -->\n\n> AMTAIR's computational performance was benchmarked across networks of varying size and complexity to understand scalability characteristics and resource requirements. Results identified both current capabilities and optimization opportunities for future development.\n\n`Performance analysis revealed:\n\n- Linear scaling for extraction and parsing stages\n- Exponential complexity challenges for exact inference in large networks\n- Visualization rendering bottlenecks for networks >50 nodes\n- Effective approximation methods for maintaining interactive performance\n\nBenchmark results for complete pipeline:\n\n- Small networks (5-10 nodes): < 3 seconds end-to-end\n- Medium networks (10-50 nodes): 5-30 seconds\n- Large networks (50+ nodes): 45+ seconds, requiring optimization`\n\n\n\n\n\n\n\n\n\n\n### Case Study: The Carlsmith Model Formalized {#sec-carlsmith-case-study}\n\n<!-- [ ] Demonstrate the system's capabilities by presenting a full formalization of Carlsmith's model, showing how the automated system captures the key premises, conditional dependencies, and probabilistic judgments -->\n\n> The formalization of Carlsmith's power-seeking AI risk model demonstrates AMTAIR's ability to capture complex real-world arguments. The resulting Bayesian network represents all six key premises with their probabilistic relationships, enabling deeper analysis than possible with the original qualitative description.\n\n`The formalized model reveals:\n\n- 21 distinct variables capturing main premises and sub-components\n- 27 directional relationships representing causal connections\n- Full specification of conditional probability tables\n- Identification of implicit assumptions in the original argument\n- Aggregate risk calculation matching Carlsmith's ~5% estimate`\n\n[![Formalized Carlsmith Model](/images/pipeline.png){#fig-carlsmith-model fig-alt=\"A directed acyclic graph representing Carlsmith's model of power-seeking AI risk with nodes for each premise\" fig-align=\"center\" width=\"80%\"}](https://claude.ai/chat/ab8988f3-18b7-45a5-8a50-b25aa4b34cbf)\n\n\n\n\n\n\n\n\n### Comparative Analysis of AI Governance Worldviews {#sec-comparative-analysis}\n\n<!-- [ ] Show how the system can identify similarities and differences between different AI governance perspectives by comparing the extracted models --> \n<!-- [ ] Highlight areas of consensus and disagreement across the field -->\n\n> By applying AMTAIR to multiple prominent AI governance perspectives, structural similarities and differences between worldviews become explicit. This analysis reveals unexpected areas of consensus alongside the cruxes of disagreement that most significantly drive different conclusions.\n\n`Comparative analysis identified:\n\n- Common causal structures across technical and governance communities\n- Shared variables but divergent probability assessments\n- Critical cruxes centering on alignment difficulty and capability development\n- Areas of consensus on the need for improved coordination\n\nCross-perspective visualization revealed:\n\n- Shared concern about instrumental convergence\n- Divergence on governance efficacy expectations\n- Different weighting of accident vs. misuse scenarios\n- Varying timelines for advanced capability development`\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Policy Impact Evaluation: Proof of Concept {#sec-policy-impact}\n\n<!-- [ ] Present results from applying the system to evaluate specific AI governance policies, demonstrating how formal modeling clarifies conditions under which policies would be effective --> \n<!-- [ ] Include sensitivity analyses showing robustness of conclusions -->\n\n> The policy impact evaluation capability demonstrates how formal modeling clarifies the conditions under which specific governance interventions would be effective. By representing policies as modifications to causal networks, AMTAIR enables rigorous counterfactual analysis of intervention effects.\n\n`Policy evaluation results showed:\n\n- Differential effectiveness of compute governance across worldviews\n- Robustness of safety standards interventions to parameter uncertainty\n- Critical dependencies for international coordination success\n- Complementary effects of combined policy portfolios\n\nSensitivity analysis revealed:\n\n- Key uncertain parameters driving intervention outcomes\n- Threshold conditions for policy effectiveness\n- Robustness characteristics across scenarios\n- Implementation factors critical for success`\n\n\npost text\n<!-- No Headings after .md inclusion (creates a fatal bug with the ToC) -->\n\n",
    "supporting": [
      "AMTAIR_files/figure-docx"
    ],
    "filters": []
  }
}