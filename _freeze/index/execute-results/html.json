{
  "hash": "92f6aa6f1f2e8abcef1b795a402847a2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\n# title: \"index\"\n# Control if this file starts numbering\nnumbering:\n  start-at: 0      # Start at Section 1\n  level: 1         # Chapter level\n---\n\n# Preface {.unnumbered}\n\n# Quarto Syntax {#sec-syntax}\n\n## Main Formatting\n\n### Html Comments\n\n<!-- Comments for comments -->\n\n### Tasks with ToDo Tree\n\n`<!-- [ ] ToDos for things to do / tasks / reminders (allows \"jump to with Taks Tree extension\") -->`\n\n<!-- [ ] ToDos for things to do / tasks / reminders (allows \"jump to with Taks Tree extension\") -->\n\n### Verbatim Code Formatting\n\n`verbatim code formatting for notes and ideas to be included (here)`\n\n### Code Block formatting\n\n```         \nAlso code blocks for more extensive notes and ideas to be included and checklists\n- test 1. \n- test 2. \n- test 3.\n2. second\n3. third\n```\n\n```\ncode\n```\n\nAdd a language to syntax highlight code blocks:\n\n\n```python\n1 + 1\n```\n\n### Blockquote Formatting\n\n> Blockquote formatting for \"Suggested Citations (e.g. carlsmith 2024 on ...)\" and/or claims which require a citation (e.g. claim x should be backed-up by a ciation from the literature)\n\n### Tables\n\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: My Caption {#tbl-letters}\n\nSee @tbl-letters.\n\n\n\n## Headings & Potential Headings in Standard Markdown formatting ('\\##') {#sec-heading}\n\n### Heading 3\n\n#### Heading 4\n\n<!-- ##### Heading 5 -->\n\n<!-- ###### Heading 6 -->\n\n\n## Text Formatting Options\n\n*italics*, **bold**, ***bold italics***\n\nsuperscript^2^ / subscript~2~\n\n~~strikethrough~~\n\n[This text is highlighted]{.mark}\n\n[This text is underlined]{.underline}\n\n[This text is smallcaps]{.smallcaps}\n\n## Lists\n\n-   unordered list\n\n    -   sub-item 1\n    -   sub-item 2\n        -   sub-sub-item 1\n\n-   item 2\n\n    Continued (indent 4 spaces)\n\n1.  ordered list\n2.  item 2\n    i)  sub-item 1\n        A.  sub-sub-item 1\n\n## Math\n\ninline math: $E = mc^{2}$\n\ndisplay math:\n\n$$E = mc^{2}$$\n\nIf you want to define custom TeX macros, include them within \\$\\$ delimiters enclosed in a .hidden block. For example:\n\n::: hidden\n$$\n \\def\\RR{{\\bf R}}\n \\def\\bold#1{{\\bf #1}}\n$$\n:::\n\nFor HTML math processed using MathJax (the default) you can use the \\\\def, \\\\newcommand, \\\\renewcommand, \\\\newenvironment, \\\\renewenvironment, and \\\\let commands to create your own macros and environments.\n\n## Footnotes\n\nHere is an inline note.[^1]\n\n[^1]: Inlines notes are easier to write, since you don't have to pick an identifier and move down to type the note.\n\nHere is a footnote reference,[^2]\n\n[^2]: Here is the footnote.\n\nAnother Text with a footnote[^3] but this time a \"longnote\".\n\n[^3]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they belong to the previous footnote.\n\n    ```         \n    { some.code }\n    ```\n\n    The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items.\n\nThis paragraph won't be part of the note, because it isn't indented.\n\n## Callouts {#sec-callouts}\n\nQuarto's native callouts work without additional packages:\n\n::: note\nThis is written in a 'note' environment -- but it does not seem to produce any special rendering.\n:::\n\n::: callout-note\n### Optional Title\n\nContent here\n:::\n\n::: callout-note\n### Important Note2\n\nThis renders perfectly in both HTML and PDF.\n:::\n\nAlso for markdown:\n\n``` markdown\n::: {.render_as_markdown_example}\n## Markdown Heading\nThis renders perfectly in both HTML and PDF but as markdown \"plain text\"\n:::\n```\n\n## Links\n\n`<https://quarto.org/docs/authoring/markdown-basics.html>` produces: <https://quarto.org/docs/authoring/markdown-basics.html>\n\n`[Quarto Book Cross-References](https://quarto.org/docs/books/book-crossrefs.html)` produces: [Quarto Book Cross-References](https://quarto.org/docs/books/book-crossrefs.html)\n\n## Images & Figures {#sec-figures1 .unnumbered .unlisted}\n\n```         \n[![AMTAIR Automation Pipeline from @bucknall2022](/images/pipeline.png){\n  #fig-automation_pipeline\n  fig-scap=\"Five-step AMTAIR automation pipeline from PDFs to Bayesian networks\" \n  fig-alt=\"FLOWCHART: Five-step automation pipeline workflow for AMTAIR project.\n          DATA: The pipeline transforms PDFs through ArgDown, BayesDown, CSV, and HTML into Bayesian network visualizations.\n          PURPOSE: Illustrates the core technical process that enables automated extraction of probabilistic models from AI safety literature.\n          DETAILS: Five numbered green steps show: (1) LLM-based extraction from PDFs to ArgDown, (2) ArgDown to BayesDown completion with probabilities, (3) Extracting world-models as CSV data, (4) Software tools for data inference, and (5) Visualization of the resulting Bayesian network.\n          Each step includes example outputs, with the final visualization showing a Rain-Sprinkler-Grass Wet Bayesian network with probability tables.\n          SOURCE: Created by the author to explain the AMTAIR methodology\n          \"\n  fig-align=\"center\" \n  width=\"100%\"\n  }](https://github.com/VJMeyer/submission)\n\n\nTesting crossreferencing grapics @fig-automation_pipeline.\n\n![Caption/Title 2](/images/cover.png){#fig-testgraphic2 fig-scap=\"Short 2 caption\" fig-alt=\"2nd Alt Text / Description.\" fig-align=\"left\" width=\"30%\"}\n\nTesting crossreferencing grapics @fig-testgraphic2.\n```\n\n[![AMTAIR Automation Pipeline from](/images/pipeline.png){#fig-automation_pipeline fig-scap=\"Five-step AMTAIR automation pipeline from PDFs to Bayesian networks\" fig-alt=\"FLOWCHART: Five-step automation pipeline workflow for AMTAIR project.           DATA: The pipeline transforms PDFs through ArgDown, BayesDown, CSV, and HTML into Bayesian network visualizations.           PURPOSE: Illustrates the core technical process that enables automated extraction of probabilistic models from AI safety literature.           DETAILS: Five numbered green steps show: (1) LLM-based extraction from PDFs to ArgDown, (2) ArgDown to BayesDown completion with probabilities, (3) Extracting world-models as CSV data, (4) Software tools for data inference, and (5) Visualization of the resulting Bayesian network.           Each step includes example outputs, with the final visualization showing a Rain-Sprinkler-Grass Wet Bayesian network with probability tables.           SOURCE: Created by the author to explain the AMTAIR methodology           \" fig-align=\"center\" width=\"100%\"}](https://github.com/VJMeyer/submission)\n\nTesting crossreferencing grapics @fig-automation_pipeline. Note that the indentations of graphic inclusions get messed up by viewing them in \"view mode\" in VS code.\n\n![Caption/Title 2](/images/cover.png){#fig-testgraphic2 fig-scap=\"Short 2 caption\" fig-alt=\"2nd Alt Text / Description.\" fig-align=\"left\" width=\"30%\"}\n\nTesting crossreferencing grapics @fig-testgraphic2.\n\n## Page Breaks\n\n``` markdown\npage 1\n\n{{< pagebreak >}}\n\npage 2\n```\n\npage 1\n\n{{< pagebreak >}}\n\npage 2\n\n## Including Code {#sec-code}\n\n::: {#fig-extraction-pipeline .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nprint(\"AMTAIR is working!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAMTAIR is working!\n```\n:::\n:::\n\n\n### In-Line LaTeX\n\n```{=latex}\n\\renewcommand*{\\labelitemi}{\\textgreater}\n```\n\n### In-Line HTML\n\nHere's some raw inline HTML: <a>html</a>\n\n## Reference or Embed Code from .ipynb files\n\n#### Code chunks from .ipynb notebooks can be embedded in the .qmd text with:\n\n``` markdown\n{{< embed /AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.ipynb#my_code_cell_test >}}\n```\n\n#### which produces the output of executing the code cell:\n\n{{< embed /AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.ipynb#my_code_cell_test >}}\n\n#### including 'echo=true' renders the code of the cell:\n\n``` markdown\n{{< embed /AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.ipynb#my_code_cell_test echo=true >}}\n```\n\n{{< embed /AMTAIR_Prototype/data/example_carlsmith/AMTAIR_Prototype_example_carlsmith.ipynb#my_code_cell_test echo=true >}}\n\nLink:\n\nFull Notebooks are embedded in the Appendix through the \\_quarto.yml file with:\n\n## Diagrams\n\nQuarto has native support for embedding Mermaid and Graphviz diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, Gantt charts, and more using a plain text syntax inspired by markdown.\n\nFor example, here we embed a flowchart created using Mermaid:\n\n```{mermaid}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n```\n\n## Citations {#sec-citations .unnumbered .unlisted}\n\n@soares2014 <!-- preferred because it works with both html, latex and pdf -->\n\n[@soares2014] and [@knuth1984]\n\nBlah Blah [see @knuth1984, pp. 33-35; also @growiec2024, chap. 1]\n\nBlah Blah [@knuth1984, pp. 33-35, 38-39 and passim]\n\nBlah Blah [@growiec2024; @knuth1984].\n\nGrowiec says blah [-@growiec2024]\n\n### Narrative citations (author as subject)\n\n@soares2014 argues that AI alignment requires...\n\n### Parenthetical citations (supporting reference)\n\nRecent work supports this view [@soares2014; @knuth1984].\n\n### Author-only citation (when discussing the person)\n\nAs [-@soares2014] demonstrates in their analysis...\n\n### Year-only citation (when author already mentioned)\n\nSoares [-@soares2014] later revised this position.\n\n### Page-specific references\n\nThe key insight appears in [@soares2014, pp. 45-67].\n\n### Multiple works, different pages\n\nThis view is supported [@soares2014, p. 23; @knuth1984, pp. 156-159].\n\n## Section Cross-References {#sec-crossref}\n\nRefer to sections like: @sec-adaptive-governance and @sec-crossref <!-- Using @-sec-REFERENCE_HEADING requires that the .qmd file contains a yml section which details the \"numbering\" -->\n\n``` markdown\nCaveat: refering to sections with @sec-HEADINGS works only for sections with:\n## Heading {#sec-HEADINGS}\nIt does not work for sections with \".unnumbered and/or .unlisted\":\n## Heading {#sec-HEADINGS .unnumbered .unlisted}\nFurthermore the .qmd and/or .md yml settings (~ numbering have to be just right)\n```\n\n### Section Numbers\n\nBy default, all headings in your document create a numbered section. You customize numbering depth using the number-depth option. For example, to only number sections immediately below the chapter level, use this:\n\n`number-depth: 2`\n\nNote that toc-depth is independent of number-depth (i.e. you can have unnumbered entries in the TOC if they are masked out from numbering by number-depth).\n\nTesting crossreferencing grapics @fig-automation_pipeline. See [Chapter @sec-syntax] for more details on visualizing model diagnostics.\n\nTesting crossreferencing headings @sec-carlsmith-model\n\n`Testing crossreferencing headings @sec-rain-sprinkler-grass` which does not work yet. <!-- [ ] Fix cross-chapter heading referencing -->\n\nChapter Cross-Reference @sec-crossref\n\n## Pages in Landscape\n\n::: landscape\nThis will appear in landscape but only in PDF format. Testing crossreferencing headings @sec-carlsmith-model\n:::\n\n\n\n\n\n\n\n\n\n\n# Abstract {#sec-abstract}\n\n```{=html}\n<!-- A concise overview highlighting the project's integration of frontier AI, Bayesian networks, and prediction markets to create a scalable framework for evaluating AI governance policies.\nEmphasize both technical contributions and policy relevance. -->\n```\n\n> The coordination crisis in AI governance presents a paradoxical challenge: unprecedented investment in AI safety coexists alongside fundamental coordination failures across technical, policy, and ethical domains. These divisions systematically increase existential risk. This thesis introduces AMTAIR (Automating Transformative AI Risk Modeling), a computational approach addressing this coordination failure by automating the extraction of probabilistic world models from AI safety literature using frontier language models. The system implements an end-to-end pipeline transforming unstructured text into interactive Bayesian networks through a novel two-stage extraction process that bridges communication gaps between stakeholders.\n\n<!-- [ ] Write comprehensive abstract capturing coordination crisis, technical contribution, and policy implications -->\n\n`The coordination crisis in AI governance presents a paradoxical challenge: unprecedented investment in AI safety coexists alongside fundamental coordination failures across technical, policy, and ethical domains. These divisions systematically increase existential risk by creating safety gaps, misallocating resources, and fostering inconsistent approaches to interdependent problems.`\n\n> This thesis introduces AMTAIR (Automating Transformative AI Risk Modeling), a computational approach that addresses this coordination failure by automating the extraction of probabilistic world models from AI safety literature using frontier language models.\n\n`The AMTAIR system implements an end-to-end pipeline that transforms unstructured text into interactive Bayesian networks through a novel two-stage extraction process: first capturing argument structure in ArgDown format, then enhancing it with probability information in BayesDown. This approach bridges communication gaps between stakeholders by making implicit models explicit, enabling comparison across different worldviews, providing a common language for discussing probabilistic relationships, and supporting policy evaluation across diverse scenarios.`\n\n<!-- [ ] Add key quantitative results and validation findings -->\n\n<!-- [ ] Implement a \"jump to ToC\" functionality (also in PDF) -->\n\n<!-- {{< include chapters/Outlining-Workflow.md >}} -->\n\n<!-- \\listoffigures -->\n\n### Quarto Features Previously Incompatible with LaTeX (Below) {.unnumbered .unlisted}\n\n```{=html}\n<!-- \n::: {.hidden}\n$$\n \\def\\RR{{\\bf R}}\n \\def\\bold#1{{\\bf #1}}\n$$\n::: -->\n```\n\n```{=html}\n<!-- :::note\nRemember to connect this back to the research question\n::: -->\n```\n\n```{=html}\n<!-- ::: {.callout-note}\n## Optional Title\nContent here\n::: -->\n```\n\n```{=html}\n<!-- (@)  A list whose numbering\n\ncontinues after\n\n(@)  an interruption -->\n```\n\n```{=html}\n<!-- ::: {}\n1. A list\n:::\n\n::: {}\n1. Followed by another list\n:::  -->\n```\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}